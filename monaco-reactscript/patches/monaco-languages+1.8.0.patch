diff --git a/node_modules/monaco-languages/release/dev/abap/abap.contribution.js b/node_modules/monaco-languages/release/dev/abap/abap.contribution.js
deleted file mode 100644
index 41f723a..0000000
--- a/node_modules/monaco-languages/release/dev/abap/abap.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'abap',
-        extensions: ['.abap'],
-        aliases: ['abap', 'ABAP'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./abap'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/abap/abap.js b/node_modules/monaco-languages/release/dev/abap/abap.js
deleted file mode 100644
index b55940d..0000000
--- a/node_modules/monaco-languages/release/dev/abap/abap.js
+++ /dev/null
@@ -1,97 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '*',
-        },
-        brackets: [
-            ['[', ']'],
-            ['(', ')']
-        ],
-    };
-    var abapKeywords = [
-        'abstract', 'add', 'add-corresponding', 'adjacent', 'alias', 'aliases', 'all', 'append', 'appending', 'ascending', 'as', 'assert', 'assign', 'assigned', 'assigning', 'association', 'authority-check',
-        'back', 'begin', 'binary', 'block', 'bound', 'break-point', 'by', 'byte',
-        'class', 'call', 'cast', 'changing', 'check', 'class-data', 'class-method', 'class-methods', 'clear', 'close', 'cnt', 'collect', 'commit', 'cond', 'character',
-        'corresponding', 'communication', 'component', 'compute', 'concatenate', 'condense', 'constants', 'conv', 'count',
-        'controls', 'convert', 'create', 'currency',
-        'data', 'descending', 'default', 'define', 'deferred', 'delete', 'describe', 'detail', 'display', 'divide', 'divide-corresponding', 'display-mode', 'duplicates',
-        'deleting',
-        'editor-call', 'end', 'endexec', 'endfunction', 'ending', 'endmodule', 'end-of-definition', 'end-of-page', 'end-of-selection', 'end-test-injection', 'end-test-seam', 'exit-command', 'endclass', 'endmethod', 'endform', 'endinterface',
-        'endprovide', 'endselect', 'endtry', 'endwhile', 'enum', 'event', 'events', 'exec', 'exit', 'export',
-        'exporting', 'extract', 'exception', 'exceptions',
-        'field-symbols', 'field-groups', 'field', 'first', 'fetch', 'fields', 'format', 'frame', 'free', 'from', 'function', 'find', 'for', 'found', 'function-pool',
-        'generate', 'get',
-        'handle', 'hide', 'hashed',
-        'include', 'import', 'importing', 'index', 'infotypes', 'initial', 'initialization',
-        'id', 'is', 'in', 'interface', 'interfaces', 'init', 'input', 'insert', 'instance', 'into',
-        'key',
-        'left-justified', 'leave', 'like', 'line', 'line-count', 'line-size', 'load', 'local', 'log-point', 'length', 'left', 'leading', 'lower',
-        'matchcode', 'method', 'mesh', 'message', 'message-id', 'methods', 'modify', 'module', 'move', 'move-corresponding', 'multiply', 'multiply-corresponding', 'match',
-        'new', 'new-line', 'new-page', 'new-section', 'next', 'no', 'no-gap', 'no-gaps', 'no-sign', 'no-zero', 'non-unique', 'number',
-        'occurrence', 'object', 'obligatory', 'of', 'output', 'overlay', 'optional', 'others', 'occurrences', 'occurs', 'offset', 'options',
-        'pack', 'parameters', 'perform', 'places', 'position', 'print-control', 'private', 'program', 'protected', 'provide', 'public', 'put',
-        'radiobutton', 'raising', 'ranges', 'receive', 'receiving', 'redefinition', 'reduce', 'reference', 'refresh', 'regex', 'reject', 'results', 'requested',
-        'ref', 'replace', 'report', 'reserve', 'restore', 'result', 'return', 'returning', 'right-justified', 'rollback', 'read', 'read-only', 'rp-provide-from-last', 'run',
-        'scan', 'screen', 'scroll', 'search', 'select', 'select-options', 'selection-screen', 'stamp', 'source', 'subkey',
-        'separated', 'set', 'shift', 'single', 'skip', 'sort', 'sorted', 'split', 'standard', 'stamp', 'starting', 'start-of-selection', 'sum', 'subtract-corresponding', 'statics', 'step', 'stop', 'structure', 'submatches', 'submit', 'subtract', 'summary', 'supplied', 'suppress', 'section', 'syntax-check', 'syntax-trace', 'system-call', 'switch',
-        'tables', 'table', 'task', 'testing', 'test-seam', 'test-injection', 'then', 'time', 'times', 'title', 'titlebar', 'to', 'top-of-page', 'trailing', 'transfer', 'transformation', 'translate', 'transporting', 'types', 'type', 'type-pool', 'type-pools',
-        'unassign', 'unique', 'uline', 'unpack', 'update', 'upper', 'using',
-        'value',
-        'when', 'while', 'window', 'write', 'where', 'with', 'work',
-        'at', 'case', 'catch', 'continue', 'do', 'elseif', 'else', 'endat', 'endcase', 'enddo', 'endif', 'endloop', 'endon', 'if', 'loop', 'on', 'raise', 'try',
-        'abs', 'sign', 'ceil', 'floor', 'trunc', 'frac', 'acos', 'asin', 'atan', 'cos', 'sin', 'tan', 'cosh', 'sinh', 'tanh', 'exp', 'log', 'log10', 'sqrt', 'strlen', 'xstrlen', 'charlen', 'lines', 'numofchar', 'dbmaxlen', 'round', 'rescale', 'nmax', 'nmin', 'cmax', 'cmin', 'boolc', 'boolx', 'xsdbool', 'contains', 'contains_any_of', 'contains_any_not_of', 'matches', 'line_exists', 'ipow', 'char_off', 'count', 'count_any_of', 'count_any_not_of', 'distance', 'condense', 'concat_lines_of', 'escape', 'find', 'find_end', 'find_any_of', 'find_any_not_of', 'insert', 'match', 'repeat', 'replace', 'reverse', 'segment', 'shift_left', 'shift_right', 'substring', 'substring_after', 'substring_from', 'substring_before', 'substring_to', 'to_upper', 'to_lower', 'to_mixed', 'from_mixed', 'translate', 'bit-set', 'line_index',
-        'definition', 'implementation', 'public', 'inheriting', 'final'
-    ];
-    exports.language = {
-        defaultToken: 'invalid',
-        ignoreCase: true,
-        tokenPostfix: '.abap',
-        keywords: abapKeywords,
-        typeKeywords: [
-            'abap_bool', 'string', 'xstring', 'any', 'clike', 'csequence', 'numeric',
-            'xsequence', 'c', 'n', 'i', 'p', 'f', 'd', 't', 'x'
-        ],
-        operators: [
-            '+', '-', '/', '*',
-            '=', '<', '>', '<=', '>=', '<>', '><', '=<', '=>',
-            'EQ', 'NE', 'GE', 'LE',
-            'CS', 'CN', 'CA', 'CO', 'CP', 'NS', 'NA', 'NP',
-        ],
-        symbols: /[=><!~?&+\-*\/\^%]+/,
-        tokenizer: {
-            root: [
-                [/[a-z_$][\w$]*/, { cases: { '@typeKeywords': 'keyword',
-                            '@keywords': 'keyword',
-                            '@default': 'identifier' } }],
-                { include: '@whitespace' },
-                [/[:,.]/, 'delimiter'],
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, { cases: { '@operators': 'operator',
-                            '@default': '' } }],
-                [/'/, { token: 'string', bracket: '@open', next: '@stringquote' }],
-                [/\|/, { token: 'string', bracket: '@open', next: '@stringtemplate' }],
-                [/\d+/, 'number'],
-            ],
-            stringtemplate: [
-                [/[^\\\|]+/, 'string'],
-                [/\\\|/, 'string'],
-                [/\|/, { token: 'string', bracket: '@close', next: '@pop' }]
-            ],
-            stringquote: [
-                [/[^\\']+/, 'string'],
-                [/'/, { token: 'string', bracket: '@close', next: '@pop' }]
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/^\*.*$/, 'comment'],
-                [/\".*$/, 'comment'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/apex/apex.contribution.js b/node_modules/monaco-languages/release/dev/apex/apex.contribution.js
deleted file mode 100644
index 385f451..0000000
--- a/node_modules/monaco-languages/release/dev/apex/apex.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'apex',
-        extensions: ['.cls'],
-        aliases: ['Apex', 'apex'],
-        mimetypes: ['text/x-apex-source', 'text/x-apex'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./apex'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/apex/apex.js b/node_modules/monaco-languages/release/dev/apex/apex.js
deleted file mode 100644
index e586c71..0000000
--- a/node_modules/monaco-languages/release/dev/apex/apex.js
+++ /dev/null
@@ -1,287 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        // the default separators except `@$`
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '<', close: '>' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*//\\s*(?:(?:#?region\\b)|(?:<editor-fold\\b))"),
-                end: new RegExp("^\\s*//\\s*(?:(?:#?endregion\\b)|(?:</editor-fold>))")
-            }
-        }
-    };
-    var keywords = [
-        'abstract',
-        'activate',
-        'and',
-        'any',
-        'array',
-        'as',
-        'asc',
-        'assert',
-        'autonomous',
-        'begin',
-        'bigdecimal',
-        'blob',
-        'boolean',
-        'break',
-        'bulk',
-        'by',
-        'case',
-        'cast',
-        'catch',
-        'char',
-        'class',
-        'collect',
-        'commit',
-        'const',
-        'continue',
-        'convertcurrency',
-        'decimal',
-        'default',
-        'delete',
-        'desc',
-        'do',
-        'double',
-        'else',
-        'end',
-        'enum',
-        'exception',
-        'exit',
-        'export',
-        'extends',
-        'false',
-        'final',
-        'finally',
-        'float',
-        'for',
-        'from',
-        'future',
-        'get',
-        'global',
-        'goto',
-        'group',
-        'having',
-        'hint',
-        'if',
-        'implements',
-        'import',
-        'in',
-        'inner',
-        'insert',
-        'instanceof',
-        'int',
-        'interface',
-        'into',
-        'join',
-        'last_90_days',
-        'last_month',
-        'last_n_days',
-        'last_week',
-        'like',
-        'limit',
-        'list',
-        'long',
-        'loop',
-        'map',
-        'merge',
-        'native',
-        'new',
-        'next_90_days',
-        'next_month',
-        'next_n_days',
-        'next_week',
-        'not',
-        'null',
-        'nulls',
-        'number',
-        'object',
-        'of',
-        'on',
-        'or',
-        'outer',
-        'override',
-        'package',
-        'parallel',
-        'pragma',
-        'private',
-        'protected',
-        'public',
-        'retrieve',
-        'return',
-        'returning',
-        'rollback',
-        'savepoint',
-        'search',
-        'select',
-        'set',
-        'short',
-        'sort',
-        'stat',
-        'static',
-        'strictfp',
-        'super',
-        'switch',
-        'synchronized',
-        'system',
-        'testmethod',
-        'then',
-        'this',
-        'this_month',
-        'this_week',
-        'throw',
-        'throws',
-        'today',
-        'tolabel',
-        'tomorrow',
-        'transaction',
-        'transient',
-        'trigger',
-        'true',
-        'try',
-        'type',
-        'undelete',
-        'update',
-        'upsert',
-        'using',
-        'virtual',
-        'void',
-        'volatile',
-        'webservice',
-        'when',
-        'where',
-        'while',
-        'yesterday'
-    ];
-    // create case variations of the keywords - apex is case insensitive, but we can't make the highlighter case insensitive
-    // because we use a heuristic to assume that identifiers starting with an upper case letter are types.
-    var uppercaseFirstLetter = function (lowercase) { return lowercase.charAt(0).toUpperCase() + lowercase.substr(1); };
-    var keywordsWithCaseVariations = [];
-    keywords.forEach(function (lowercase) {
-        keywordsWithCaseVariations.push(lowercase);
-        keywordsWithCaseVariations.push(lowercase.toUpperCase());
-        keywordsWithCaseVariations.push(uppercaseFirstLetter(lowercase));
-    });
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.apex',
-        keywords: keywordsWithCaseVariations,
-        operators: [
-            '=', '>', '<', '!', '~', '?', ':',
-            '==', '<=', '>=', '!=', '&&', '||', '++', '--',
-            '+', '-', '*', '/', '&', '|', '^', '%', '<<',
-            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',
-            '^=', '%=', '<<=', '>>=', '>>>='
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        digits: /\d+(_+\d+)*/,
-        octaldigits: /[0-7]+(_+[0-7]+)*/,
-        binarydigits: /[0-1]+(_+[0-1]+)*/,
-        hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-z_$][\w$]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // assume that identifiers starting with an uppercase letter are types
-                [/[A-Z][\w\$]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'type.identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // @ annotations.
-                [/@\s*[a-zA-Z_\$][\w\$]*/, 'annotation'],
-                // numbers
-                [/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/, 'number.float'],
-                [/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/, 'number.float'],
-                [/(@digits)[fFdD]/, 'number.float'],
-                [/(@digits)[lL]?/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/'([^'\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string."'],
-                [/'/, 'string', '@string.\''],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@apexdoc'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                // [/\/\*/, 'comment', '@push' ],    // nested comment not allowed :-(
-                // [/\/\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            apexdoc: [
-                [/[^\/*]+/, 'comment.doc'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"']+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/["']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string' } }]
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/azcli/azcli.contribution.js b/node_modules/monaco-languages/release/dev/azcli/azcli.contribution.js
deleted file mode 100644
index 6fcd558..0000000
--- a/node_modules/monaco-languages/release/dev/azcli/azcli.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'azcli',
-        extensions: ['.azcli'],
-        aliases: ['Azure CLI', 'azcli'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./azcli'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/azcli/azcli.js b/node_modules/monaco-languages/release/dev/azcli/azcli.js
deleted file mode 100644
index 034f693..0000000
--- a/node_modules/monaco-languages/release/dev/azcli/azcli.js
+++ /dev/null
@@ -1,58 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#',
-        }
-    };
-    exports.language = {
-        defaultToken: 'keyword',
-        ignoreCase: true,
-        tokenPostfix: '.azcli',
-        str: /[^#\s]/,
-        tokenizer: {
-            root: [
-                { include: '@comment' },
-                [/\s-+@str*\s*/, {
-                        cases: {
-                            '@eos': { token: 'key.identifier', next: '@popall' },
-                            '@default': { token: 'key.identifier', next: '@type' }
-                        }
-                    }],
-                [/^-+@str*\s*/, {
-                        cases: {
-                            '@eos': { token: 'key.identifier', next: '@popall' },
-                            '@default': { token: 'key.identifier', next: '@type' }
-                        }
-                    }]
-            ],
-            type: [
-                { include: '@comment' },
-                [/-+@str*\s*/, {
-                        cases: {
-                            '@eos': { token: 'key.identifier', next: '@popall' },
-                            '@default': 'key.identifier'
-                        }
-                    }],
-                [/@str+\s*/, {
-                        cases: {
-                            '@eos': { token: 'string', next: '@popall' },
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-            comment: [
-                [/#.*$/, {
-                        cases: {
-                            '@eos': { token: 'comment', next: '@popall' }
-                        }
-                    }]
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/bat/bat.contribution.js b/node_modules/monaco-languages/release/dev/bat/bat.contribution.js
deleted file mode 100644
index 107482b..0000000
--- a/node_modules/monaco-languages/release/dev/bat/bat.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'bat',
-        extensions: ['.bat', '.cmd'],
-        aliases: ['Batch', 'bat'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./bat'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/bat/bat.js b/node_modules/monaco-languages/release/dev/bat/bat.js
deleted file mode 100644
index 1005f40..0000000
--- a/node_modules/monaco-languages/release/dev/bat/bat.js
+++ /dev/null
@@ -1,99 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: 'REM'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-        ],
-        surroundingPairs: [
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*(::\\s*|REM\\s+)#region"),
-                end: new RegExp("^\\s*(::\\s*|REM\\s+)#endregion")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: true,
-        tokenPostfix: '.bat',
-        brackets: [
-            { token: 'delimiter.bracket', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' }
-        ],
-        keywords: /call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,
-        // we include these common regular expressions
-        symbols: /[=><!~?&|+\-*\/\^;\.,]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                [/^(\s*)(rem(?:\s.*|))$/, ['', 'comment']],
-                [/(\@?)(@keywords)(?!\w)/, [{ token: 'keyword' }, { token: 'keyword.$2' }]],
-                // whitespace
-                [/[ \t\r\n]+/, ''],
-                // blocks
-                [/setlocal(?!\w)/, 'keyword.tag-setlocal'],
-                [/endlocal(?!\w)/, 'keyword.tag-setlocal'],
-                // words
-                [/[a-zA-Z_]\w*/, ''],
-                // labels
-                [/:\w*/, 'metatag'],
-                // variables
-                [/%[^%]+%/, 'variable'],
-                [/%%[\w]+(?!\w)/, 'variable'],
-                // punctuations
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, 'delimiter'],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
-                [/\d+/, 'number'],
-                // punctuation: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings:
-                [/"/, 'string', '@string."'],
-                [/'/, 'string', '@string.\''],
-            ],
-            string: [
-                [/[^\\"'%]+/, {
-                        cases: {
-                            '@eos': { token: 'string', next: '@popall' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/%[\w ]+%/, 'variable'],
-                [/%%[\w]+(?!\w)/, 'variable'],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/$/, 'string', '@popall']
-            ],
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/clojure/clojure.contribution.js b/node_modules/monaco-languages/release/dev/clojure/clojure.contribution.js
deleted file mode 100644
index aa2f8f2..0000000
--- a/node_modules/monaco-languages/release/dev/clojure/clojure.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'clojure',
-        extensions: ['.clj', '.cljs', '.cljc', '.edn'],
-        aliases: ['clojure', 'Clojure'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./clojure'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/clojure/clojure.js b/node_modules/monaco-languages/release/dev/clojure/clojure.js
deleted file mode 100644
index 2d548bc..0000000
--- a/node_modules/monaco-languages/release/dev/clojure/clojure.js
+++ /dev/null
@@ -1,765 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: ';;',
-        },
-        brackets: [
-            ['[', ']'],
-            ['(', ')'],
-            ['{', '}']
-        ],
-        autoClosingPairs: [
-            { open: '[', close: ']' },
-            { open: '"', close: '"' },
-            { open: '(', close: ')' },
-            { open: '{', close: '}' },
-        ],
-        surroundingPairs: [
-            { open: '[', close: ']' },
-            { open: '"', close: '"' },
-            { open: '(', close: ')' },
-            { open: '{', close: '}' },
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: true,
-        tokenPostfix: '.clj',
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '{', close: '}', token: 'delimiter.curly' },
-        ],
-        constants: ['true', 'false', 'nil'],
-        // delimiters: /[\\\[\]\s"#'(),;@^`{}~]|$/,
-        numbers: /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/,
-        characters: /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/,
-        escapes: /^\\(?:["'\\bfnrt]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // simple-namespace := /^[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*/
-        // simple-symbol    := /^(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)/
-        // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>
-        qualifiedSymbols: /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/,
-        specialForms: [
-            '.',
-            'catch',
-            'def',
-            'do',
-            'if',
-            'monitor-enter',
-            'monitor-exit',
-            'new',
-            'quote',
-            'recur',
-            'set!',
-            'throw',
-            'try',
-            'var',
-        ],
-        coreSymbols: [
-            '*',
-            '*\'',
-            '*1',
-            '*2',
-            '*3',
-            '*agent*',
-            '*allow-unresolved-vars*',
-            '*assert*',
-            '*clojure-version*',
-            '*command-line-args*',
-            '*compile-files*',
-            '*compile-path*',
-            '*compiler-options*',
-            '*data-readers*',
-            '*default-data-reader-fn*',
-            '*e',
-            '*err*',
-            '*file*',
-            '*flush-on-newline*',
-            '*fn-loader*',
-            '*in*',
-            '*math-context*',
-            '*ns*',
-            '*out*',
-            '*print-dup*',
-            '*print-length*',
-            '*print-level*',
-            '*print-meta*',
-            '*print-namespace-maps*',
-            '*print-readably*',
-            '*read-eval*',
-            '*reader-resolver*',
-            '*source-path*',
-            '*suppress-read*',
-            '*unchecked-math*',
-            '*use-context-classloader*',
-            '*verbose-defrecords*',
-            '*warn-on-reflection*',
-            '+',
-            '+\'',
-            '-',
-            '-\'',
-            '->',
-            '->>',
-            '->ArrayChunk',
-            '->Eduction',
-            '->Vec',
-            '->VecNode',
-            '->VecSeq',
-            '-cache-protocol-fn',
-            '-reset-methods',
-            '..',
-            '/',
-            '<',
-            '<=',
-            '=',
-            '==',
-            '>',
-            '>=',
-            'EMPTY-NODE',
-            'Inst',
-            'StackTraceElement->vec',
-            'Throwable->map',
-            'accessor',
-            'aclone',
-            'add-classpath',
-            'add-watch',
-            'agent',
-            'agent-error',
-            'agent-errors',
-            'aget',
-            'alength',
-            'alias',
-            'all-ns',
-            'alter',
-            'alter-meta!',
-            'alter-var-root',
-            'amap',
-            'ancestors',
-            'and',
-            'any?',
-            'apply',
-            'areduce',
-            'array-map',
-            'as->',
-            'aset',
-            'aset-boolean',
-            'aset-byte',
-            'aset-char',
-            'aset-double',
-            'aset-float',
-            'aset-int',
-            'aset-long',
-            'aset-short',
-            'assert',
-            'assoc',
-            'assoc!',
-            'assoc-in',
-            'associative?',
-            'atom',
-            'await',
-            'await-for',
-            'await1',
-            'bases',
-            'bean',
-            'bigdec',
-            'bigint',
-            'biginteger',
-            'binding',
-            'bit-and',
-            'bit-and-not',
-            'bit-clear',
-            'bit-flip',
-            'bit-not',
-            'bit-or',
-            'bit-set',
-            'bit-shift-left',
-            'bit-shift-right',
-            'bit-test',
-            'bit-xor',
-            'boolean',
-            'boolean-array',
-            'boolean?',
-            'booleans',
-            'bound-fn',
-            'bound-fn*',
-            'bound?',
-            'bounded-count',
-            'butlast',
-            'byte',
-            'byte-array',
-            'bytes',
-            'bytes?',
-            'case',
-            'cast',
-            'cat',
-            'char',
-            'char-array',
-            'char-escape-string',
-            'char-name-string',
-            'char?',
-            'chars',
-            'chunk',
-            'chunk-append',
-            'chunk-buffer',
-            'chunk-cons',
-            'chunk-first',
-            'chunk-next',
-            'chunk-rest',
-            'chunked-seq?',
-            'class',
-            'class?',
-            'clear-agent-errors',
-            'clojure-version',
-            'coll?',
-            'comment',
-            'commute',
-            'comp',
-            'comparator',
-            'compare',
-            'compare-and-set!',
-            'compile',
-            'complement',
-            'completing',
-            'concat',
-            'cond',
-            'cond->',
-            'cond->>',
-            'condp',
-            'conj',
-            'conj!',
-            'cons',
-            'constantly',
-            'construct-proxy',
-            'contains?',
-            'count',
-            'counted?',
-            'create-ns',
-            'create-struct',
-            'cycle',
-            'dec',
-            'dec\'',
-            'decimal?',
-            'declare',
-            'dedupe',
-            'default-data-readers',
-            'definline',
-            'definterface',
-            'defmacro',
-            'defmethod',
-            'defmulti',
-            'defn',
-            'defn-',
-            'defonce',
-            'defprotocol',
-            'defrecord',
-            'defstruct',
-            'deftype',
-            'delay',
-            'delay?',
-            'deliver',
-            'denominator',
-            'deref',
-            'derive',
-            'descendants',
-            'destructure',
-            'disj',
-            'disj!',
-            'dissoc',
-            'dissoc!',
-            'distinct',
-            'distinct?',
-            'doall',
-            'dorun',
-            'doseq',
-            'dosync',
-            'dotimes',
-            'doto',
-            'double',
-            'double-array',
-            'double?',
-            'doubles',
-            'drop',
-            'drop-last',
-            'drop-while',
-            'eduction',
-            'empty',
-            'empty?',
-            'ensure',
-            'ensure-reduced',
-            'enumeration-seq',
-            'error-handler',
-            'error-mode',
-            'eval',
-            'even?',
-            'every-pred',
-            'every?',
-            'ex-data',
-            'ex-info',
-            'extend',
-            'extend-protocol',
-            'extend-type',
-            'extenders',
-            'extends?',
-            'false?',
-            'ffirst',
-            'file-seq',
-            'filter',
-            'filterv',
-            'find',
-            'find-keyword',
-            'find-ns',
-            'find-protocol-impl',
-            'find-protocol-method',
-            'find-var',
-            'first',
-            'flatten',
-            'float',
-            'float-array',
-            'float?',
-            'floats',
-            'flush',
-            'fn',
-            'fn?',
-            'fnext',
-            'fnil',
-            'for',
-            'force',
-            'format',
-            'frequencies',
-            'future',
-            'future-call',
-            'future-cancel',
-            'future-cancelled?',
-            'future-done?',
-            'future?',
-            'gen-class',
-            'gen-interface',
-            'gensym',
-            'get',
-            'get-in',
-            'get-method',
-            'get-proxy-class',
-            'get-thread-bindings',
-            'get-validator',
-            'group-by',
-            'halt-when',
-            'hash',
-            'hash-combine',
-            'hash-map',
-            'hash-ordered-coll',
-            'hash-set',
-            'hash-unordered-coll',
-            'ident?',
-            'identical?',
-            'identity',
-            'if-let',
-            'if-not',
-            'if-some',
-            'ifn?',
-            'import',
-            'in-ns',
-            'inc',
-            'inc\'',
-            'indexed?',
-            'init-proxy',
-            'inst-ms',
-            'inst-ms*',
-            'inst?',
-            'instance?',
-            'int',
-            'int-array',
-            'int?',
-            'integer?',
-            'interleave',
-            'intern',
-            'interpose',
-            'into',
-            'into-array',
-            'ints',
-            'io!',
-            'isa?',
-            'iterate',
-            'iterator-seq',
-            'juxt',
-            'keep',
-            'keep-indexed',
-            'key',
-            'keys',
-            'keyword',
-            'keyword?',
-            'last',
-            'lazy-cat',
-            'lazy-seq',
-            'let',
-            'letfn',
-            'line-seq',
-            'list',
-            'list*',
-            'list?',
-            'load',
-            'load-file',
-            'load-reader',
-            'load-string',
-            'loaded-libs',
-            'locking',
-            'long',
-            'long-array',
-            'longs',
-            'loop',
-            'macroexpand',
-            'macroexpand-1',
-            'make-array',
-            'make-hierarchy',
-            'map',
-            'map-entry?',
-            'map-indexed',
-            'map?',
-            'mapcat',
-            'mapv',
-            'max',
-            'max-key',
-            'memfn',
-            'memoize',
-            'merge',
-            'merge-with',
-            'meta',
-            'method-sig',
-            'methods',
-            'min',
-            'min-key',
-            'mix-collection-hash',
-            'mod',
-            'munge',
-            'name',
-            'namespace',
-            'namespace-munge',
-            'nat-int?',
-            'neg-int?',
-            'neg?',
-            'newline',
-            'next',
-            'nfirst',
-            'nil?',
-            'nnext',
-            'not',
-            'not-any?',
-            'not-empty',
-            'not-every?',
-            'not=',
-            'ns',
-            'ns-aliases',
-            'ns-imports',
-            'ns-interns',
-            'ns-map',
-            'ns-name',
-            'ns-publics',
-            'ns-refers',
-            'ns-resolve',
-            'ns-unalias',
-            'ns-unmap',
-            'nth',
-            'nthnext',
-            'nthrest',
-            'num',
-            'number?',
-            'numerator',
-            'object-array',
-            'odd?',
-            'or',
-            'parents',
-            'partial',
-            'partition',
-            'partition-all',
-            'partition-by',
-            'pcalls',
-            'peek',
-            'persistent!',
-            'pmap',
-            'pop',
-            'pop!',
-            'pop-thread-bindings',
-            'pos-int?',
-            'pos?',
-            'pr',
-            'pr-str',
-            'prefer-method',
-            'prefers',
-            'primitives-classnames',
-            'print',
-            'print-ctor',
-            'print-dup',
-            'print-method',
-            'print-simple',
-            'print-str',
-            'printf',
-            'println',
-            'println-str',
-            'prn',
-            'prn-str',
-            'promise',
-            'proxy',
-            'proxy-call-with-super',
-            'proxy-mappings',
-            'proxy-name',
-            'proxy-super',
-            'push-thread-bindings',
-            'pvalues',
-            'qualified-ident?',
-            'qualified-keyword?',
-            'qualified-symbol?',
-            'quot',
-            'rand',
-            'rand-int',
-            'rand-nth',
-            'random-sample',
-            'range',
-            'ratio?',
-            'rational?',
-            'rationalize',
-            're-find',
-            're-groups',
-            're-matcher',
-            're-matches',
-            're-pattern',
-            're-seq',
-            'read',
-            'read-line',
-            'read-string',
-            'reader-conditional',
-            'reader-conditional?',
-            'realized?',
-            'record?',
-            'reduce',
-            'reduce-kv',
-            'reduced',
-            'reduced?',
-            'reductions',
-            'ref',
-            'ref-history-count',
-            'ref-max-history',
-            'ref-min-history',
-            'ref-set',
-            'refer',
-            'refer-clojure',
-            'reify',
-            'release-pending-sends',
-            'rem',
-            'remove',
-            'remove-all-methods',
-            'remove-method',
-            'remove-ns',
-            'remove-watch',
-            'repeat',
-            'repeatedly',
-            'replace',
-            'replicate',
-            'require',
-            'reset!',
-            'reset-meta!',
-            'reset-vals!',
-            'resolve',
-            'rest',
-            'restart-agent',
-            'resultset-seq',
-            'reverse',
-            'reversible?',
-            'rseq',
-            'rsubseq',
-            'run!',
-            'satisfies?',
-            'second',
-            'select-keys',
-            'send',
-            'send-off',
-            'send-via',
-            'seq',
-            'seq?',
-            'seqable?',
-            'seque',
-            'sequence',
-            'sequential?',
-            'set',
-            'set-agent-send-executor!',
-            'set-agent-send-off-executor!',
-            'set-error-handler!',
-            'set-error-mode!',
-            'set-validator!',
-            'set?',
-            'short',
-            'short-array',
-            'shorts',
-            'shuffle',
-            'shutdown-agents',
-            'simple-ident?',
-            'simple-keyword?',
-            'simple-symbol?',
-            'slurp',
-            'some',
-            'some->',
-            'some->>',
-            'some-fn',
-            'some?',
-            'sort',
-            'sort-by',
-            'sorted-map',
-            'sorted-map-by',
-            'sorted-set',
-            'sorted-set-by',
-            'sorted?',
-            'special-symbol?',
-            'spit',
-            'split-at',
-            'split-with',
-            'str',
-            'string?',
-            'struct',
-            'struct-map',
-            'subs',
-            'subseq',
-            'subvec',
-            'supers',
-            'swap!',
-            'swap-vals!',
-            'symbol',
-            'symbol?',
-            'sync',
-            'tagged-literal',
-            'tagged-literal?',
-            'take',
-            'take-last',
-            'take-nth',
-            'take-while',
-            'test',
-            'the-ns',
-            'thread-bound?',
-            'time',
-            'to-array',
-            'to-array-2d',
-            'trampoline',
-            'transduce',
-            'transient',
-            'tree-seq',
-            'true?',
-            'type',
-            'unchecked-add',
-            'unchecked-add-int',
-            'unchecked-byte',
-            'unchecked-char',
-            'unchecked-dec',
-            'unchecked-dec-int',
-            'unchecked-divide-int',
-            'unchecked-double',
-            'unchecked-float',
-            'unchecked-inc',
-            'unchecked-inc-int',
-            'unchecked-int',
-            'unchecked-long',
-            'unchecked-multiply',
-            'unchecked-multiply-int',
-            'unchecked-negate',
-            'unchecked-negate-int',
-            'unchecked-remainder-int',
-            'unchecked-short',
-            'unchecked-subtract',
-            'unchecked-subtract-int',
-            'underive',
-            'unquote',
-            'unquote-splicing',
-            'unreduced',
-            'unsigned-bit-shift-right',
-            'update',
-            'update-in',
-            'update-proxy',
-            'uri?',
-            'use',
-            'uuid?',
-            'val',
-            'vals',
-            'var-get',
-            'var-set',
-            'var?',
-            'vary-meta',
-            'vec',
-            'vector',
-            'vector-of',
-            'vector?',
-            'volatile!',
-            'volatile?',
-            'vreset!',
-            'vswap!',
-            'when',
-            'when-first',
-            'when-let',
-            'when-not',
-            'when-some',
-            'while',
-            'with-bindings',
-            'with-bindings*',
-            'with-in-str',
-            'with-loading-context',
-            'with-local-vars',
-            'with-meta',
-            'with-open',
-            'with-out-str',
-            'with-precision',
-            'with-redefs',
-            'with-redefs-fn',
-            'xml-seq',
-            'zero?',
-            'zipmap',
-        ],
-        tokenizer: {
-            root: [
-                // whitespaces and comments
-                { include: '@whitespace' },
-                // numbers
-                [/@numbers/, 'number'],
-                // characters
-                [/@characters/, 'string'],
-                // strings
-                { include: '@string' },
-                // brackets
-                [/[()\[\]{}]/, '@brackets'],
-                // regular expressions
-                [/\/#"(?:\.|(?:")|[^"\n])*"\/g/, 'regexp'],
-                // reader macro characters
-                [/[#'@^`~]/, 'meta'],
-                // symbols
-                [/@qualifiedSymbols/, {
-                        cases: {
-                            '^:.+$': 'constant',
-                            '@specialForms': 'keyword',
-                            '@coreSymbols': 'keyword',
-                            '@constants': 'constant',
-                            '@default': 'identifier',
-                        },
-                    },
-                ],
-            ],
-            whitespace: [
-                [/[\s,]+/, 'white'],
-                [/;.*$/, 'comment'],
-                [/\(comment\b/, 'comment', '@comment'],
-            ],
-            comment: [
-                [/\(/, 'comment', '@push'],
-                [/\)/, 'comment', '@pop'],
-                [/[^()]/, 'comment'],
-            ],
-            string: [
-                [/"/, 'string', '@multiLineString'],
-            ],
-            multiLineString: [
-                [/"/, 'string', '@popall'],
-                [/@escapes/, 'string.escape'],
-                [/./, 'string']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/coffee/coffee.contribution.js b/node_modules/monaco-languages/release/dev/coffee/coffee.contribution.js
deleted file mode 100644
index 6b4f304..0000000
--- a/node_modules/monaco-languages/release/dev/coffee/coffee.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'coffeescript',
-        extensions: ['.coffee'],
-        aliases: ['CoffeeScript', 'coffeescript', 'coffee'],
-        mimetypes: ['text/x-coffeescript', 'text/coffeescript'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./coffee'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/coffee/coffee.js b/node_modules/monaco-languages/release/dev/coffee/coffee.js
deleted file mode 100644
index c544f7c..0000000
--- a/node_modules/monaco-languages/release/dev/coffee/coffee.js
+++ /dev/null
@@ -1,173 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#%\^\&\*\(\)\=\$\-\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            blockComment: ['###', '###'],
-            lineComment: '#'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#region\\b"),
-                end: new RegExp("^\\s*#endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: true,
-        tokenPostfix: '.coffee',
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        regEx: /\/(?!\/\/)(?:[^\/\\]|\\.)*\/[igm]*/,
-        keywords: [
-            'and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off',
-            'true', 'false', 'null', 'this',
-            'new', 'delete', 'typeof', 'in', 'instanceof',
-            'return', 'throw', 'break', 'continue', 'debugger',
-            'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally',
-            'class', 'extends', 'super',
-            'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?&%|+\-*\/\^\.,\:]+/,
-        escapes: /\\(?:[abfnrtv\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/\@[a-zA-Z_]\w*/, 'variable.predefined'],
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            'this': 'variable.predefined',
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': ''
-                        }
-                    }],
-                // whitespace
-                [/[ \t\r\n]+/, ''],
-                // Comments
-                [/###/, 'comment', '@comment'],
-                [/#.*$/, 'comment'],
-                // regular expressions
-                ['///', { token: 'regexp', next: '@hereregexp' }],
-                [/^(\s*)(@regEx)/, ['', 'regexp']],
-                [/(\()(\s*)(@regEx)/, ['@brackets', '', 'regexp']],
-                [/(\,)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\=)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\:)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\[)(\s*)(@regEx)/, ['@brackets', '', 'regexp']],
-                [/(\!)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\&)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\|)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\?)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\{)(\s*)(@regEx)/, ['@brackets', '', 'regexp']],
-                [/(\;)(\s*)(@regEx)/, ['', '', 'regexp']],
-                // delimiters
-                [/}/, {
-                        cases: {
-                            '$S2==interpolatedstring': { token: 'string', next: '@pop' },
-                            '@default': '@brackets'
-                        }
-                    }],
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, 'delimiter'],
-                // numbers
-                [/\d+[eE]([\-+]?\d+)?/, 'number.float'],
-                [/\d+\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F]+/, 'number.hex'],
-                [/0[0-7]+(?!\d)/, 'number.octal'],
-                [/\d+/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[,.]/, 'delimiter'],
-                // strings:
-                [/"""/, 'string', '@herestring."""'],
-                [/'''/, 'string', '@herestring.\'\'\''],
-                [/"/, {
-                        cases: {
-                            '@eos': 'string',
-                            '@default': { token: 'string', next: '@string."' }
-                        }
-                    }],
-                [/'/, {
-                        cases: {
-                            '@eos': 'string',
-                            '@default': { token: 'string', next: '@string.\'' }
-                        }
-                    }],
-            ],
-            string: [
-                [/[^"'\#\\]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\./, 'string.escape.invalid'],
-                [/\./, 'string.escape.invalid'],
-                [/#{/, {
-                        cases: {
-                            '$S2=="': { token: 'string', next: 'root.interpolatedstring' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/#/, 'string']
-            ],
-            herestring: [
-                [/("""|''')/, {
-                        cases: {
-                            '$1==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/[^#\\'"]+/, 'string'],
-                [/['"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\./, 'string.escape.invalid'],
-                [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],
-                [/#/, 'string']
-            ],
-            comment: [
-                [/[^#]+/, 'comment',],
-                [/###/, 'comment', '@pop'],
-                [/#/, 'comment'],
-            ],
-            hereregexp: [
-                [/[^\\\/#]+/, 'regexp'],
-                [/\\./, 'regexp'],
-                [/#.*$/, 'comment'],
-                ['///[igm]*', { token: 'regexp', next: '@pop' }],
-                [/\//, 'regexp'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/cpp/cpp.contribution.js b/node_modules/monaco-languages/release/dev/cpp/cpp.contribution.js
deleted file mode 100644
index 43da7b1..0000000
--- a/node_modules/monaco-languages/release/dev/cpp/cpp.contribution.js
+++ /dev/null
@@ -1,20 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'c',
-        extensions: ['.c', '.h'],
-        aliases: ['C', 'c'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./cpp'], resolve_1, reject_1); }); }
-    });
-    __contribution_1.registerLanguage({
-        id: 'cpp',
-        extensions: ['.cpp', '.cc', '.cxx', '.hpp', '.hh', '.hxx'],
-        aliases: ['C++', 'Cpp', 'cpp'],
-        loader: function () { return new Promise(function (resolve_2, reject_2) { require(['./cpp'], resolve_2, reject_2); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/cpp/cpp.js b/node_modules/monaco-languages/release/dev/cpp/cpp.js
deleted file mode 100644
index 4505e2f..0000000
--- a/node_modules/monaco-languages/release/dev/cpp/cpp.js
+++ /dev/null
@@ -1,325 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '[', close: ']' },
-            { open: '{', close: '}' },
-            { open: '(', close: ')' },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#pragma\\s+region\\b"),
-                end: new RegExp("^\\s*#pragma\\s+endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.cpp',
-        brackets: [
-            { token: 'delimiter.curly', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' },
-            { token: 'delimiter.angle', open: '<', close: '>' }
-        ],
-        keywords: [
-            'abstract',
-            'amp',
-            'array',
-            'auto',
-            'bool',
-            'break',
-            'case',
-            'catch',
-            'char',
-            'class',
-            'const',
-            'constexpr',
-            'const_cast',
-            'continue',
-            'cpu',
-            'decltype',
-            'default',
-            'delegate',
-            'delete',
-            'do',
-            'double',
-            'dynamic_cast',
-            'each',
-            'else',
-            'enum',
-            'event',
-            'explicit',
-            'export',
-            'extern',
-            'false',
-            'final',
-            'finally',
-            'float',
-            'for',
-            'friend',
-            'gcnew',
-            'generic',
-            'goto',
-            'if',
-            'in',
-            'initonly',
-            'inline',
-            'int',
-            'interface',
-            'interior_ptr',
-            'internal',
-            'literal',
-            'long',
-            'mutable',
-            'namespace',
-            'new',
-            'noexcept',
-            'nullptr',
-            '__nullptr',
-            'operator',
-            'override',
-            'partial',
-            'pascal',
-            'pin_ptr',
-            'private',
-            'property',
-            'protected',
-            'public',
-            'ref',
-            'register',
-            'reinterpret_cast',
-            'restrict',
-            'return',
-            'safe_cast',
-            'sealed',
-            'short',
-            'signed',
-            'sizeof',
-            'static',
-            'static_assert',
-            'static_cast',
-            'struct',
-            'switch',
-            'template',
-            'this',
-            'thread_local',
-            'throw',
-            'tile_static',
-            'true',
-            'try',
-            'typedef',
-            'typeid',
-            'typename',
-            'union',
-            'unsigned',
-            'using',
-            'virtual',
-            'void',
-            'volatile',
-            'wchar_t',
-            'where',
-            'while',
-            '_asm',
-            '_based',
-            '_cdecl',
-            '_declspec',
-            '_fastcall',
-            '_if_exists',
-            '_if_not_exists',
-            '_inline',
-            '_multiple_inheritance',
-            '_pascal',
-            '_single_inheritance',
-            '_stdcall',
-            '_virtual_inheritance',
-            '_w64',
-            '__abstract',
-            '__alignof',
-            '__asm',
-            '__assume',
-            '__based',
-            '__box',
-            '__builtin_alignof',
-            '__cdecl',
-            '__clrcall',
-            '__declspec',
-            '__delegate',
-            '__event',
-            '__except',
-            '__fastcall',
-            '__finally',
-            '__forceinline',
-            '__gc',
-            '__hook',
-            '__identifier',
-            '__if_exists',
-            '__if_not_exists',
-            '__inline',
-            '__int128',
-            '__int16',
-            '__int32',
-            '__int64',
-            '__int8',
-            '__interface',
-            '__leave',
-            '__m128',
-            '__m128d',
-            '__m128i',
-            '__m256',
-            '__m256d',
-            '__m256i',
-            '__m64',
-            '__multiple_inheritance',
-            '__newslot',
-            '__nogc',
-            '__noop',
-            '__nounwind',
-            '__novtordisp',
-            '__pascal',
-            '__pin',
-            '__pragma',
-            '__property',
-            '__ptr32',
-            '__ptr64',
-            '__raise',
-            '__restrict',
-            '__resume',
-            '__sealed',
-            '__single_inheritance',
-            '__stdcall',
-            '__super',
-            '__thiscall',
-            '__try',
-            '__try_cast',
-            '__typeof',
-            '__unaligned',
-            '__unhook',
-            '__uuidof',
-            '__value',
-            '__virtual_inheritance',
-            '__w64',
-            '__wchar_t'
-        ],
-        operators: [
-            '=', '>', '<', '!', '~', '?', ':',
-            '==', '<=', '>=', '!=', '&&', '||', '++', '--',
-            '+', '-', '*', '/', '&', '|', '^', '%', '<<',
-            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',
-            '^=', '%=', '<<=', '>>=', '>>>='
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
-        floatsuffix: /[fFlL]?/,
-        encoding: /u|u8|U|L/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // C++ 11 Raw String
-                [/@encoding?R\"(?:([^ ()\\\t]*))\(/, { token: 'string.raw.begin', next: '@raw.$1' }],
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // [[ attributes ]].
-                [/\[\[.*\]\]/, 'annotation'],
-                [/^\s*#include/, { token: 'keyword.directive.include', next: '@include' }],
-                // Preprocessor directive
-                [/^\s*#\s*\w+/, 'keyword'],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
-                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
-                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
-                [/\d[\d']*\d(@integersuffix)/, 'number'],
-                [/\d(@integersuffix)/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            doccomment: [
-                [/[^\/*]+/, 'comment.doc'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-            raw: [
-                [/(.*)(\))(?:([^ ()\\\t]*))(\")/, {
-                        cases: {
-                            '$3==$S2': ['string.raw', 'string.raw.end', 'string.raw.end', { token: 'string.raw.end', next: '@pop' }],
-                            '@default': ['string.raw', 'string.raw', 'string.raw', 'string.raw']
-                        }
-                    }
-                ],
-                [/.*/, 'string.raw']
-            ],
-            include: [
-                [/(\s*)(<)([^<>]*)(>)/, ['', 'keyword.directive.include.begin', 'string.include.identifier', { token: 'keyword.directive.include.end', next: '@pop' }]],
-                [/(\s*)(")([^"]*)(")/, ['', 'keyword.directive.include.begin', 'string.include.identifier', { token: 'keyword.directive.include.end', next: '@pop' }]]
-            ]
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/csharp/csharp.contribution.js b/node_modules/monaco-languages/release/dev/csharp/csharp.contribution.js
deleted file mode 100644
index ac5690b..0000000
--- a/node_modules/monaco-languages/release/dev/csharp/csharp.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'csharp',
-        extensions: ['.cs', '.csx', '.cake'],
-        aliases: ['C#', 'csharp'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./csharp'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/csharp/csharp.js b/node_modules/monaco-languages/release/dev/csharp/csharp.js
deleted file mode 100644
index 280577b..0000000
--- a/node_modules/monaco-languages/release/dev/csharp/csharp.js
+++ /dev/null
@@ -1,187 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\#\$\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-            { open: '"', close: '"' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#region\\b"),
-                end: new RegExp("^\\s*#endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.cs',
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        keywords: [
-            'extern', 'alias', 'using', 'bool', 'decimal', 'sbyte', 'byte', 'short',
-            'ushort', 'int', 'uint', 'long', 'ulong', 'char', 'float', 'double',
-            'object', 'dynamic', 'string', 'assembly', 'is', 'as', 'ref',
-            'out', 'this', 'base', 'new', 'typeof', 'void', 'checked', 'unchecked',
-            'default', 'delegate', 'var', 'const', 'if', 'else', 'switch', 'case',
-            'while', 'do', 'for', 'foreach', 'in', 'break', 'continue', 'goto',
-            'return', 'throw', 'try', 'catch', 'finally', 'lock', 'yield', 'from',
-            'let', 'where', 'join', 'on', 'equals', 'into', 'orderby', 'ascending',
-            'descending', 'select', 'group', 'by', 'namespace', 'partial', 'class',
-            'field', 'event', 'method', 'param', 'property', 'public', 'protected',
-            'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',
-            'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',
-            'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',
-            'null', 'async', 'await', 'fixed', 'sizeof', 'stackalloc', 'unsafe', 'nameof',
-            'when'
-        ],
-        namespaceFollows: [
-            'namespace', 'using',
-        ],
-        parenFollows: [
-            'if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'
-        ],
-        operators: [
-            '=', '??', '||', '&&', '|', '^', '&', '==', '!=', '<=', '>=', '<<',
-            '+', '-', '*', '/', '%', '!', '~', '++', '--', '+=',
-            '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '>>', '=>'
-        ],
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        // escape sequences
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/\@?[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@namespaceFollows': { token: 'keyword.$0', next: '@namespace' },
-                            '@keywords': { token: 'keyword.$0', next: '@qualified' },
-                            '@default': { token: 'identifier', next: '@qualified' }
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/}/, {
-                        cases: {
-                            '$S2==interpolatedstring': { token: 'string.quote', next: '@pop' },
-                            '$S2==litinterpstring': { token: 'string.quote', next: '@pop' },
-                            '@default': '@brackets'
-                        }
-                    }],
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/[0-9_]*\.[0-9_]+([eE][\-+]?\d+)?[fFdD]?/, 'number.float'],
-                [/0[xX][0-9a-fA-F_]+/, 'number.hex'],
-                [/0[bB][01_]+/, 'number.hex'],
-                [/[0-9_]+/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, { token: 'string.quote', next: '@string' }],
-                [/\$\@"/, { token: 'string.quote', next: '@litinterpstring' }],
-                [/\@"/, { token: 'string.quote', next: '@litstring' }],
-                [/\$"/, { token: 'string.quote', next: '@interpolatedstring' }],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            qualified: [
-                [/[a-zA-Z_][\w]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/\./, 'delimiter'],
-                ['', '', '@pop'],
-            ],
-            namespace: [
-                { include: '@whitespace' },
-                [/[A-Z]\w*/, 'namespace'],
-                [/[\.=]/, 'delimiter'],
-                ['', '', '@pop'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                // [/\/\*/,    'comment', '@push' ],    // no nested comments :-(
-                ['\\*/', 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, { token: 'string.quote', next: '@pop' }]
-            ],
-            litstring: [
-                [/[^"]+/, 'string'],
-                [/""/, 'string.escape'],
-                [/"/, { token: 'string.quote', next: '@pop' }]
-            ],
-            litinterpstring: [
-                [/[^"{]+/, 'string'],
-                [/""/, 'string.escape'],
-                [/{{/, 'string.escape'],
-                [/}}/, 'string.escape'],
-                [/{/, { token: 'string.quote', next: 'root.litinterpstring' }],
-                [/"/, { token: 'string.quote', next: '@pop' }]
-            ],
-            interpolatedstring: [
-                [/[^\\"{]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/{{/, 'string.escape'],
-                [/}}/, 'string.escape'],
-                [/{/, { token: 'string.quote', next: 'root.interpolatedstring' }],
-                [/"/, { token: 'string.quote', next: '@pop' }]
-            ],
-            whitespace: [
-                [/^[ \t\v\f]*#((r)|(load))(?=\s)/, 'directive.csx'],
-                [/^[ \t\v\f]*#\w.*$/, 'namespace.cpp'],
-                [/[ \t\v\f\r\n]+/, ''],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/csp/csp.contribution.js b/node_modules/monaco-languages/release/dev/csp/csp.contribution.js
deleted file mode 100644
index 7edf35d..0000000
--- a/node_modules/monaco-languages/release/dev/csp/csp.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'csp',
-        extensions: [],
-        aliases: ['CSP', 'csp'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./csp'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/csp/csp.js b/node_modules/monaco-languages/release/dev/csp/csp.js
deleted file mode 100644
index f3f377d..0000000
--- a/node_modules/monaco-languages/release/dev/csp/csp.js
+++ /dev/null
@@ -1,58 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        brackets: [],
-        autoClosingPairs: [],
-        surroundingPairs: []
-    };
-    exports.language = {
-        // Set defaultToken to invalid to see what you do not tokenize yet
-        // defaultToken: 'invalid',
-        keywords: [],
-        typeKeywords: [],
-        tokenPostfix: '.csp',
-        operators: [],
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        tokenizer: {
-            root: [
-                [/child-src/, 'string.quote'],
-                [/connect-src/, 'string.quote'],
-                [/default-src/, 'string.quote'],
-                [/font-src/, 'string.quote'],
-                [/frame-src/, 'string.quote'],
-                [/img-src/, 'string.quote'],
-                [/manifest-src/, 'string.quote'],
-                [/media-src/, 'string.quote'],
-                [/object-src/, 'string.quote'],
-                [/script-src/, 'string.quote'],
-                [/style-src/, 'string.quote'],
-                [/worker-src/, 'string.quote'],
-                [/base-uri/, 'string.quote'],
-                [/plugin-types/, 'string.quote'],
-                [/sandbox/, 'string.quote'],
-                [/disown-opener/, 'string.quote'],
-                [/form-action/, 'string.quote'],
-                [/frame-ancestors/, 'string.quote'],
-                [/report-uri/, 'string.quote'],
-                [/report-to/, 'string.quote'],
-                [/upgrade-insecure-requests/, 'string.quote'],
-                [/block-all-mixed-content/, 'string.quote'],
-                [/require-sri-for/, 'string.quote'],
-                [/reflected-xss/, 'string.quote'],
-                [/referrer/, 'string.quote'],
-                [/policy-uri/, 'string.quote'],
-                [/'self'/, 'string.quote'],
-                [/'unsafe-inline'/, 'string.quote'],
-                [/'unsafe-eval'/, 'string.quote'],
-                [/'strict-dynamic'/, 'string.quote'],
-                [/'unsafe-hashed-attributes'/, 'string.quote']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/css/css.contribution.js b/node_modules/monaco-languages/release/dev/css/css.contribution.js
deleted file mode 100644
index 55b6e0a..0000000
--- a/node_modules/monaco-languages/release/dev/css/css.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'css',
-        extensions: ['.css'],
-        aliases: ['CSS', 'css'],
-        mimetypes: ['text/css'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./css'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/css/css.js b/node_modules/monaco-languages/release/dev/css/css.js
deleted file mode 100644
index a44cac2..0000000
--- a/node_modules/monaco-languages/release/dev/css/css.js
+++ /dev/null
@@ -1,174 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(#?-?\d*\.\d\w*%?)|((::|[@#.!:])?[\w-?]+%?)|::|[@#.!:]/g,
-        comments: {
-            blockComment: ['/*', '*/']
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] }
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' }
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*\\/\\*\\s*#region\\b\\s*(.*?)\\s*\\*\\/"),
-                end: new RegExp("^\\s*\\/\\*\\s*#endregion\\b.*\\*\\/")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.css',
-        ws: '[ \t\n\r\f]*',
-        identifier: '-?-?([a-zA-Z]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))([\\w\\-]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))*',
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.bracket' },
-            { open: '[', close: ']', token: 'delimiter.bracket' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        tokenizer: {
-            root: [
-                { include: '@selector' },
-            ],
-            selector: [
-                { include: '@comments' },
-                { include: '@import' },
-                { include: '@strings' },
-                ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],
-                ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],
-                ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],
-                ['(url-prefix)(\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],
-                ['(url)(\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],
-                { include: '@selectorname' },
-                ['[\\*]', 'tag'],
-                ['[>\\+,]', 'delimiter'],
-                ['\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],
-                ['{', { token: 'delimiter.bracket', next: '@selectorbody' }]
-            ],
-            selectorbody: [
-                { include: '@comments' },
-                ['[*_]?@identifier@ws:(?=(\\s|\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],
-                ['}', { token: 'delimiter.bracket', next: '@pop' }]
-            ],
-            selectorname: [
-                ['(\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],
-            ],
-            selectorattribute: [
-                { include: '@term' },
-                [']', { token: 'delimiter.bracket', next: '@pop' }],
-            ],
-            term: [
-                { include: '@comments' },
-                ['(url-prefix)(\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],
-                ['(url)(\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],
-                { include: '@functioninvocation' },
-                { include: '@numbers' },
-                { include: '@name' },
-                ['([<>=\\+\\-\\*\\/\\^\\|\\~,])', 'delimiter'],
-                [',', 'delimiter']
-            ],
-            rulevalue: [
-                { include: '@comments' },
-                { include: '@strings' },
-                { include: '@term' },
-                ['!important', 'keyword'],
-                [';', 'delimiter', '@pop'],
-                ['(?=})', { token: '', next: '@pop' }] // missing semicolon
-            ],
-            warndebug: [
-                ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]
-            ],
-            import: [
-                ['[@](import)', { token: 'keyword', next: '@declarationbody' }]
-            ],
-            urldeclaration: [
-                { include: '@strings' },
-                ['[^)\r\n]+', 'string'],
-                ['\\)', { token: 'delimiter.parenthesis', next: '@pop' }]
-            ],
-            parenthizedterm: [
-                { include: '@term' },
-                ['\\)', { token: 'delimiter.parenthesis', next: '@pop' }]
-            ],
-            declarationbody: [
-                { include: '@term' },
-                [';', 'delimiter', '@pop'],
-                ['(?=})', { token: '', next: '@pop' }] // missing semicolon
-            ],
-            comments: [
-                ['\\/\\*', 'comment', '@comment'],
-                ['\\/\\/+.*', 'comment']
-            ],
-            comment: [
-                ['\\*\\/', 'comment', '@pop'],
-                [/[^*/]+/, 'comment'],
-                [/./, 'comment'],
-            ],
-            name: [
-                ['@identifier', 'attribute.value']
-            ],
-            numbers: [
-                ['-?(\\d*\\.)?\\d+([eE][\\-+]?\\d+)?', { token: 'attribute.value.number', next: '@units' }],
-                ['#[0-9a-fA-F_]+(?!\\w)', 'attribute.value.hex']
-            ],
-            units: [
-                ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']
-            ],
-            keyframedeclaration: [
-                ['@identifier', 'attribute.value'],
-                ['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }],
-            ],
-            keyframebody: [
-                { include: '@term' },
-                ['{', { token: 'delimiter.bracket', next: '@selectorbody' }],
-                ['}', { token: 'delimiter.bracket', next: '@pop' }],
-            ],
-            functioninvocation: [
-                ['@identifier\\(', { token: 'attribute.value', next: '@functionarguments' }],
-            ],
-            functionarguments: [
-                ['\\$@identifier@ws:', 'attribute.name'],
-                ['[,]', 'delimiter'],
-                { include: '@term' },
-                ['\\)', { token: 'attribute.value', next: '@pop' }],
-            ],
-            strings: [
-                ['~?"', { token: 'string', next: '@stringenddoublequote' }],
-                ['~?\'', { token: 'string', next: '@stringendquote' }]
-            ],
-            stringenddoublequote: [
-                ['\\\\.', 'string'],
-                ['"', { token: 'string', next: '@pop' }],
-                [/[^\\"]+/, 'string'],
-                ['.', 'string']
-            ],
-            stringendquote: [
-                ['\\\\.', 'string'],
-                ['\'', { token: 'string', next: '@pop' }],
-                [/[^\\']+/, 'string'],
-                ['.', 'string']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/dockerfile/dockerfile.contribution.js b/node_modules/monaco-languages/release/dev/dockerfile/dockerfile.contribution.js
deleted file mode 100644
index 3b08d79..0000000
--- a/node_modules/monaco-languages/release/dev/dockerfile/dockerfile.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'dockerfile',
-        extensions: ['.dockerfile'],
-        filenames: ['Dockerfile'],
-        aliases: ['Dockerfile'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./dockerfile'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/dockerfile/dockerfile.js b/node_modules/monaco-languages/release/dev/dockerfile/dockerfile.js
deleted file mode 100644
index 1280232..0000000
--- a/node_modules/monaco-languages/release/dev/dockerfile/dockerfile.js
+++ /dev/null
@@ -1,112 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.dockerfile',
-        variable: /\${?[\w]+}?/,
-        tokenizer: {
-            root: [
-                { include: '@whitespace' },
-                { include: '@comment' },
-                [/(ONBUILD)(\s+)/, ['keyword', '']],
-                [/(ENV)(\s+)([\w]+)/, ['keyword', '', { token: 'variable', next: '@arguments' }]],
-                [/(FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT)/, { token: 'keyword', next: '@arguments' }]
-            ],
-            arguments: [
-                { include: '@whitespace' },
-                { include: '@strings' },
-                [/(@variable)/, {
-                        cases: {
-                            '@eos': { token: 'variable', next: '@popall' },
-                            '@default': 'variable'
-                        }
-                    }],
-                [/\\/, {
-                        cases: {
-                            '@eos': '',
-                            '@default': ''
-                        }
-                    }],
-                [/./, {
-                        cases: {
-                            '@eos': { token: '', next: '@popall' },
-                            '@default': ''
-                        }
-                    }],
-            ],
-            // Deal with white space, including comments
-            whitespace: [
-                [/\s+/, {
-                        cases: {
-                            '@eos': { token: '', next: '@popall' },
-                            '@default': ''
-                        }
-                    }],
-            ],
-            comment: [
-                [/(^#.*$)/, 'comment', '@popall']
-            ],
-            // Recognize strings, including those broken across lines with \ (but not without)
-            strings: [
-                [/'$/, 'string', '@popall'],
-                [/'/, 'string', '@stringBody'],
-                [/"$/, 'string', '@popall'],
-                [/"/, 'string', '@dblStringBody']
-            ],
-            stringBody: [
-                [/[^\\\$']/, {
-                        cases: {
-                            '@eos': { token: 'string', next: '@popall' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/\\./, 'string.escape'],
-                [/'$/, 'string', '@popall'],
-                [/'/, 'string', '@pop'],
-                [/(@variable)/, 'variable'],
-                [/\\$/, 'string'],
-                [/$/, 'string', '@popall']
-            ],
-            dblStringBody: [
-                [/[^\\\$"]/, {
-                        cases: {
-                            '@eos': { token: 'string', next: '@popall' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/\\./, 'string.escape'],
-                [/"$/, 'string', '@popall'],
-                [/"/, 'string', '@pop'],
-                [/(@variable)/, 'variable'],
-                [/\\$/, 'string'],
-                [/$/, 'string', '@popall']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/fsharp/fsharp.contribution.js b/node_modules/monaco-languages/release/dev/fsharp/fsharp.contribution.js
deleted file mode 100644
index 733d67f..0000000
--- a/node_modules/monaco-languages/release/dev/fsharp/fsharp.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'fsharp',
-        extensions: ['.fs', '.fsi', '.ml', '.mli', '.fsx', '.fsscript'],
-        aliases: ['F#', 'FSharp', 'fsharp'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./fsharp'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/fsharp/fsharp.js b/node_modules/monaco-languages/release/dev/fsharp/fsharp.js
deleted file mode 100644
index edaaba7..0000000
--- a/node_modules/monaco-languages/release/dev/fsharp/fsharp.js
+++ /dev/null
@@ -1,141 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['(*', '*)'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' }
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' }
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*//\\s*#region\\b|^\\s*\\(\\*\\s*#region(.*)\\*\\)"),
-                end: new RegExp("^\\s*//\\s*#endregion\\b|^\\s*\\(\\*\\s*#endregion\\s*\\*\\)")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.fs',
-        keywords: [
-            'abstract', 'and', 'atomic', 'as',
-            'assert', 'asr', 'base', 'begin',
-            'break', 'checked', 'component',
-            'const', 'constraint', 'constructor',
-            'continue', 'class', 'default',
-            'delegate', 'do', 'done', 'downcast',
-            'downto', 'elif', 'else', 'end',
-            'exception', 'eager', 'event', 'external',
-            'extern', 'false', 'finally', 'for',
-            'fun', 'function', 'fixed', 'functor',
-            'global', 'if', 'in', 'include', 'inherit',
-            'inline', 'interface', 'internal', 'land',
-            'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let',
-            'match', 'member', 'mod', 'module', 'mutable',
-            'namespace', 'method', 'mixin', 'new', 'not',
-            'null', 'of', 'open', 'or', 'object',
-            'override', 'private', 'parallel', 'process',
-            'protected', 'pure', 'public', 'rec', 'return',
-            'static', 'sealed', 'struct', 'sig', 'then',
-            'to', 'true', 'tailcall', 'trait',
-            'try', 'type', 'upcast', 'use',
-            'val', 'void', 'virtual', 'volatile',
-            'when', 'while', 'with', 'yield'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\^%;\.,\/]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        integersuffix: /[uU]?[yslnLI]?/,
-        floatsuffix: /[fFmM]?/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // [< attributes >].
-                [/\[<.*>\]/, 'annotation'],
-                // Preprocessor directive
-                [/^#(if|else|endif)/, 'keyword'],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, 'delimiter'],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/0x[0-9a-fA-F]+LF/, 'number.float'],
-                [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],
-                [/0b[0-1]+(@integersuffix)/, 'number.bin'],
-                [/\d+(@integersuffix)/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"""/, 'string', '@string."""'],
-                [/"/, 'string', '@string."'],
-                // literal string
-                [/\@"/, { token: 'string.quote', next: '@litstring' }],
-                // characters
-                [/'[^\\']'B?/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\(\*(?!\))/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^*(]+/, 'comment'],
-                [/\*\)/, 'comment', '@pop'],
-                [/\*/, 'comment'],
-                [/\(\*\)/, 'comment'],
-                [/\(/, 'comment']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/("""|"B?)/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-            litstring: [
-                [/[^"]+/, 'string'],
-                [/""/, 'string.escape'],
-                [/"/, { token: 'string.quote', next: '@pop' }]
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/go/go.contribution.js b/node_modules/monaco-languages/release/dev/go/go.contribution.js
deleted file mode 100644
index c5fc11a..0000000
--- a/node_modules/monaco-languages/release/dev/go/go.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'go',
-        extensions: ['.go'],
-        aliases: ['Go'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./go'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/go/go.js b/node_modules/monaco-languages/release/dev/go/go.js
deleted file mode 100644
index f6a47a8..0000000
--- a/node_modules/monaco-languages/release/dev/go/go.js
+++ /dev/null
@@ -1,173 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '`', close: '`', notIn: ['string'] },
-            { open: '"', close: '"', notIn: ['string'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '`', close: '`' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.go',
-        keywords: [
-            'break',
-            'case',
-            'chan',
-            'const',
-            'continue',
-            'default',
-            'defer',
-            'else',
-            'fallthrough',
-            'for',
-            'func',
-            'go',
-            'goto',
-            'if',
-            'import',
-            'interface',
-            'map',
-            'package',
-            'range',
-            'return',
-            'select',
-            'struct',
-            'switch',
-            'type',
-            'var',
-            'bool',
-            'true',
-            'false',
-            'uint8',
-            'uint16',
-            'uint32',
-            'uint64',
-            'int8',
-            'int16',
-            'int32',
-            'int64',
-            'float32',
-            'float64',
-            'complex64',
-            'complex128',
-            'byte',
-            'rune',
-            'uint',
-            'int',
-            'uintptr',
-            'string',
-            'nil',
-        ],
-        operators: [
-            '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^',
-            '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '&^=',
-            '&&', '||', '<-', '++', '--', '==', '<', '>', '=', '!', '!=', '<=', '>=', ':=', '...',
-            '(', ')', '', ']', '{', '}', ',', ';', '.', ':'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // [[ attributes ]].
-                [/\[\[.*\]\]/, 'annotation'],
-                // Preprocessor directive
-                [/^\s*#\w+/, 'keyword'],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?/, 'number.float'],
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],
-                [/0[0-7']*[0-7]/, 'number.octal'],
-                [/0[bB][0-1']*[0-1]/, 'number.binary'],
-                [/\d[\d']*/, 'number'],
-                [/\d/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-                [/`/, "string", "@rawstring"],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                // [/\/\*/, 'comment', '@push' ],    // nested comment not allowed :-(
-                // [/\/\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            doccomment: [
-                [/[^\/*]+/, 'comment.doc'],
-                // [/\/\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(
-                [/\/\*/, 'comment.doc.invalid'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-            rawstring: [
-                [/[^\`]/, "string"],
-                [/`/, "string", "@pop"]
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/graphql/graphql.contribution.js b/node_modules/monaco-languages/release/dev/graphql/graphql.contribution.js
deleted file mode 100644
index a0ba400..0000000
--- a/node_modules/monaco-languages/release/dev/graphql/graphql.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'graphql',
-        extensions: ['.graphql', '.gql'],
-        aliases: ['GraphQL', 'graphql', 'gql'],
-        mimetypes: ['application/graphql'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./graphql'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/graphql/graphql.js b/node_modules/monaco-languages/release/dev/graphql/graphql.js
deleted file mode 100644
index b9ec8ef..0000000
--- a/node_modules/monaco-languages/release/dev/graphql/graphql.js
+++ /dev/null
@@ -1,121 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"""', close: '"""', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"""', close: '"""' },
-            { open: '"', close: '"' },
-        ],
-        folding: {
-            offSide: true
-        }
-    };
-    exports.language = {
-        // Set defaultToken to invalid to see what you do not tokenize yet
-        defaultToken: 'invalid',
-        tokenPostfix: '.gql',
-        keywords: [
-            'null', 'true', 'false',
-            'query', 'mutation', 'subscription',
-            'extend', 'schema', 'directive',
-            'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements',
-            'fragment', 'on',
-        ],
-        typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],
-        directiveLocations: [
-            'SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION',
-            'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION',
-            'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION',
-            'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION',
-        ],
-        operators: ['=', '!', '?', ':', '&', '|'],
-        // we include these common regular expressions
-        symbols: /[=!?:&|]+/,
-        // https://facebook.github.io/graphql/draft/#sec-String-Value
-        escapes: /\\(?:["\\\/bfnrt]|u[0-9A-Fa-f]{4})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [
-                    /[a-z_$][\w$]*/,
-                    {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'identifier',
-                        },
-                    },
-                ],
-                [
-                    /[A-Z][\w\$]*/,
-                    {
-                        cases: {
-                            '@typeKeywords': 'keyword',
-                            '@default': 'type.identifier',
-                        },
-                    },
-                ],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [
-                    /@symbols/,
-                    { cases: { '@operators': 'operator', '@default': '' } },
-                ],
-                // @ annotations.
-                // As an example, we emit a debugging log message on these tokens.
-                // Note: message are supressed during the first load -- change some lines to see them.
-                [
-                    /@\s*[a-zA-Z_\$][\w\$]*/,
-                    { token: 'annotation', log: 'annotation token: $0' },
-                ],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F]+/, 'number.hex'],
-                [/\d+/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                [/"""/,
-                    { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }
-                ],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, { token: 'string.quote', bracket: '@open', next: '@string' }],
-            ],
-            mlstring: [
-                [/[^"]+/, 'string'],
-                ['"""', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],
-            ],
-            whitespace: [[/[ \t\r\n]+/, ''], [/#.*$/, 'comment']],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/handlebars/handlebars.contribution.js b/node_modules/monaco-languages/release/dev/handlebars/handlebars.contribution.js
deleted file mode 100644
index 4313c5a..0000000
--- a/node_modules/monaco-languages/release/dev/handlebars/handlebars.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'handlebars',
-        extensions: ['.handlebars', '.hbs'],
-        aliases: ['Handlebars', 'handlebars'],
-        mimetypes: ['text/x-handlebars-template'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./handlebars'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/handlebars/handlebars.js b/node_modules/monaco-languages/release/dev/handlebars/handlebars.js
deleted file mode 100644
index be86f30..0000000
--- a/node_modules/monaco-languages/release/dev/handlebars/handlebars.js
+++ /dev/null
@@ -1,196 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    // Allow for running under nodejs/requirejs in tests
-    var _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);
-    var EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
-        comments: {
-            blockComment: ['{{!--', '--}}']
-        },
-        brackets: [
-            ['<!--', '-->'],
-            ['<', '>'],
-            ['{{', '}}'],
-            ['{', '}'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' }
-        ],
-        surroundingPairs: [
-            { open: '<', close: '>' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' }
-        ],
-        onEnterRules: [
-            {
-                beforeText: new RegExp("<(?!(?:" + EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
-                afterText: /^<\/(\w[\w\d]*)\s*>$/i,
-                action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }
-            },
-            {
-                beforeText: new RegExp("<(?!(?:" + EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
-                action: { indentAction: _monaco.languages.IndentAction.Indent }
-            }
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '',
-        // ignoreCase: true,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],
-                [/<!DOCTYPE/, 'metatag.html', '@doctype'],
-                [/<!--/, 'comment.html', '@comment'],
-                [/(<)(\w+)(\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],
-                [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],
-                [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],
-                [/(<)([:\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/(<\/)(\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/</, 'delimiter.html'],
-                [/\{/, 'delimiter.html'],
-                [/[^<{]+/] // text
-            ],
-            doctype: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],
-                [/[^>]+/, 'metatag.content.html'],
-                [/>/, 'metatag.html', '@pop'],
-            ],
-            comment: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],
-                [/-->/, 'comment.html', '@pop'],
-                [/[^-]+/, 'comment.content.html'],
-                [/./, 'comment.content.html']
-            ],
-            otherTag: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.otherTag' }],
-                [/\/?>/, 'delimiter.html', '@pop'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-            ],
-            // -- BEGIN <script> tags handling
-            // After <script
-            script: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.script' }],
-                [/type/, 'attribute.name', '@scriptAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(script\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <script ... type
-            scriptAfterType: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterType' }],
-                [/=/, 'delimiter', '@scriptAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type =
-            scriptAfterTypeEquals: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals' }],
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type = $S2
-            scriptWithCustomType: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            scriptEmbedded: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],
-                [/<\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            // -- END <script> tags handling
-            // -- BEGIN <style> tags handling
-            // After <style
-            style: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.style' }],
-                [/type/, 'attribute.name', '@styleAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(style\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <style ... type
-            styleAfterType: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterType' }],
-                [/=/, 'delimiter', '@styleAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type =
-            styleAfterTypeEquals: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals' }],
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type = $S2
-            styleWithCustomType: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            styleEmbedded: [
-                [/\{\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],
-                [/<\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            // -- END <style> tags handling
-            handlebarsInSimpleState: [
-                [/\{\{\{?/, 'delimiter.handlebars'],
-                [/\}\}\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],
-                { include: 'handlebarsRoot' }
-            ],
-            handlebarsInEmbeddedState: [
-                [/\{\{\{?/, 'delimiter.handlebars'],
-                [/\}\}\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],
-                { include: 'handlebarsRoot' }
-            ],
-            handlebarsRoot: [
-                [/[#/][^\s}]+/, 'keyword.helper.handlebars'],
-                [/else\b/, 'keyword.helper.handlebars'],
-                [/[\s]+/],
-                [/[^}]/, 'variable.parameter.handlebars'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/html/html.contribution.js b/node_modules/monaco-languages/release/dev/html/html.contribution.js
deleted file mode 100644
index 0e2d588..0000000
--- a/node_modules/monaco-languages/release/dev/html/html.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'html',
-        extensions: ['.html', '.htm', '.shtml', '.xhtml', '.mdoc', '.jsp', '.asp', '.aspx', '.jshtm'],
-        aliases: ['HTML', 'htm', 'html', 'xhtml'],
-        mimetypes: ['text/html', 'text/x-jshtm', 'text/template', 'text/ng-template'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./html'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/html/html.js b/node_modules/monaco-languages/release/dev/html/html.js
deleted file mode 100644
index bbaad44..0000000
--- a/node_modules/monaco-languages/release/dev/html/html.js
+++ /dev/null
@@ -1,210 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    // Allow for running under nodejs/requirejs in tests
-    var _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);
-    var EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
-        comments: {
-            blockComment: ['<!--', '-->']
-        },
-        brackets: [
-            ['<!--', '-->'],
-            ['<', '>'],
-            ['{', '}'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' }
-        ],
-        surroundingPairs: [
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>' },
-        ],
-        onEnterRules: [
-            {
-                beforeText: new RegExp("<(?!(?:" + EMPTY_ELEMENTS.join('|') + "))([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
-                afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
-                action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }
-            },
-            {
-                beforeText: new RegExp("<(?!(?:" + EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
-                action: { indentAction: _monaco.languages.IndentAction.Indent }
-            }
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*<!--\\s*#region\\b.*-->"),
-                end: new RegExp("^\\s*<!--\\s*#endregion\\b.*-->")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.html',
-        ignoreCase: true,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                [/<!DOCTYPE/, 'metatag', '@doctype'],
-                [/<!--/, 'comment', '@comment'],
-                [/(<)((?:[\w\-]+:)?[\w\-]+)(\s*)(\/>)/, ['delimiter', 'tag', '', 'delimiter']],
-                [/(<)(script)/, ['delimiter', { token: 'tag', next: '@script' }]],
-                [/(<)(style)/, ['delimiter', { token: 'tag', next: '@style' }]],
-                [/(<)((?:[\w\-]+:)?[\w\-]+)/, ['delimiter', { token: 'tag', next: '@otherTag' }]],
-                [/(<\/)((?:[\w\-]+:)?[\w\-]+)/, ['delimiter', { token: 'tag', next: '@otherTag' }]],
-                [/</, 'delimiter'],
-                [/[^<]+/],
-            ],
-            doctype: [
-                [/[^>]+/, 'metatag.content'],
-                [/>/, 'metatag', '@pop'],
-            ],
-            comment: [
-                [/-->/, 'comment', '@pop'],
-                [/[^-]+/, 'comment.content'],
-                [/./, 'comment.content']
-            ],
-            otherTag: [
-                [/\/?>/, 'delimiter', '@pop'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-            ],
-            // -- BEGIN <script> tags handling
-            // After <script
-            script: [
-                [/type/, 'attribute.name', '@scriptAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(script\s*)(>)/, ['delimiter', 'tag', { token: 'delimiter', next: '@pop' }]]
-            ],
-            // After <script ... type
-            scriptAfterType: [
-                [/=/, 'delimiter', '@scriptAfterTypeEquals'],
-                [/>/, { token: 'delimiter', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type =
-            scriptAfterTypeEquals: [
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/>/, { token: 'delimiter', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type = $S2
-            scriptWithCustomType: [
-                [/>/, { token: 'delimiter', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            scriptEmbedded: [
-                [/<\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
-                [/[^<]+/, '']
-            ],
-            // -- END <script> tags handling
-            // -- BEGIN <style> tags handling
-            // After <style
-            style: [
-                [/type/, 'attribute.name', '@styleAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter', next: '@styleEmbedded', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(style\s*)(>)/, ['delimiter', 'tag', { token: 'delimiter', next: '@pop' }]]
-            ],
-            // After <style ... type
-            styleAfterType: [
-                [/=/, 'delimiter', '@styleAfterTypeEquals'],
-                [/>/, { token: 'delimiter', next: '@styleEmbedded', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type =
-            styleAfterTypeEquals: [
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/>/, { token: 'delimiter', next: '@styleEmbedded', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type = $S2
-            styleWithCustomType: [
-                [/>/, { token: 'delimiter', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            styleEmbedded: [
-                [/<\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
-                [/[^<]+/, '']
-            ],
-        },
-    };
-});
-// TESTED WITH:
-// <!DOCTYPE html>
-// <html>
-// <head>
-//   <title>Monarch Workbench</title>
-//   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
-//   <!----
-//   -- -- -- a comment -- -- --
-//   ---->
-//   <style bah="bah">
-//     body { font-family: Consolas; } /* nice */
-//   </style>
-// </head
-// >
-// a = "asd"
-// <body>
-//   <br/>
-//   <div
-//   class
-//   =
-//   "test"
-//   >
-//     <script>
-//       function() {
-//         alert("hi </ script>"); // javascript
-//       };
-//     </script>
-//     <script
-// 	bah="asdfg"
-// 	type="text/css"
-// 	>
-//   .bar { text-decoration: underline; }
-//     </script>
-//   </div>
-// </body>
-// </html>
diff --git a/node_modules/monaco-languages/release/dev/ini/ini.contribution.js b/node_modules/monaco-languages/release/dev/ini/ini.contribution.js
deleted file mode 100644
index e244cb0..0000000
--- a/node_modules/monaco-languages/release/dev/ini/ini.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'ini',
-        extensions: ['.ini', '.properties', '.gitconfig'],
-        filenames: ['config', '.gitattributes', '.gitconfig', '.editorconfig'],
-        aliases: ['Ini', 'ini'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./ini'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/ini/ini.js b/node_modules/monaco-languages/release/dev/ini/ini.js
deleted file mode 100644
index 11774f5..0000000
--- a/node_modules/monaco-languages/release/dev/ini/ini.js
+++ /dev/null
@@ -1,71 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.ini',
-        // we include these common regular expressions
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // sections
-                [/^\[[^\]]*\]/, 'metatag'],
-                // keys
-                [/(^\w+)(\s*)(\=)/, ['key', '', 'delimiter']],
-                // whitespace
-                { include: '@whitespace' },
-                // numbers
-                [/\d+/, 'number'],
-                // strings: recover on non-terminated strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/'([^'\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string."'],
-                [/'/, 'string', '@string.\''],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/^\s*[#;].*$/, 'comment'],
-            ],
-            string: [
-                [/[^\\"']+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/java/java.contribution.js b/node_modules/monaco-languages/release/dev/java/java.contribution.js
deleted file mode 100644
index 079625f..0000000
--- a/node_modules/monaco-languages/release/dev/java/java.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'java',
-        extensions: ['.java', '.jav'],
-        aliases: ['Java', 'java'],
-        mimetypes: ['text/x-java-source', 'text/x-java'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./java'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/java/java.js b/node_modules/monaco-languages/release/dev/java/java.js
deleted file mode 100644
index f8c23e2..0000000
--- a/node_modules/monaco-languages/release/dev/java/java.js
+++ /dev/null
@@ -1,138 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        // the default separators except `@$`
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '<', close: '>' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*//\\s*(?:(?:#?region\\b)|(?:<editor-fold\\b))"),
-                end: new RegExp("^\\s*//\\s*(?:(?:#?endregion\\b)|(?:</editor-fold>))")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.java',
-        keywords: [
-            'abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default',
-            'goto', 'package', 'synchronized', 'boolean', 'do', 'if', 'private',
-            'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte',
-            'else', 'import', 'public', 'throws', 'case', 'enum', 'instanceof', 'return',
-            'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final',
-            'interface', 'static', 'void', 'class', 'finally', 'long', 'strictfp',
-            'volatile', 'const', 'float', 'native', 'super', 'while', 'true', 'false'
-        ],
-        operators: [
-            '=', '>', '<', '!', '~', '?', ':',
-            '==', '<=', '>=', '!=', '&&', '||', '++', '--',
-            '+', '-', '*', '/', '&', '|', '^', '%', '<<',
-            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',
-            '^=', '%=', '<<=', '>>=', '>>>='
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        digits: /\d+(_+\d+)*/,
-        octaldigits: /[0-7]+(_+[0-7]+)*/,
-        binarydigits: /[0-1]+(_+[0-1]+)*/,
-        hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_$][\w$]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // @ annotations.
-                [/@\s*[a-zA-Z_\$][\w\$]*/, 'annotation'],
-                // numbers
-                [/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/, 'number.float'],
-                [/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/, 'number.float'],
-                [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],
-                [/0(@octaldigits)[Ll]?/, 'number.octal'],
-                [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],
-                [/(@digits)[fFdD]/, 'number.float'],
-                [/(@digits)[lL]?/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@javadoc'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                // [/\/\*/, 'comment', '@push' ],    // nested comment not allowed :-(
-                // [/\/\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            javadoc: [
-                [/[^\/*]+/, 'comment.doc'],
-                // [/\/\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(
-                [/\/\*/, 'comment.doc.invalid'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/javascript/javascript.contribution.js b/node_modules/monaco-languages/release/dev/javascript/javascript.contribution.js
deleted file mode 100644
index f3ff9d9..0000000
--- a/node_modules/monaco-languages/release/dev/javascript/javascript.contribution.js
+++ /dev/null
@@ -1,17 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'javascript',
-        extensions: ['.js', '.es6', '.jsx'],
-        firstLine: '^#!.*\\bnode',
-        filenames: ['jakefile'],
-        aliases: ['JavaScript', 'javascript', 'js'],
-        mimetypes: ['text/javascript'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./javascript'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/javascript/javascript.js b/node_modules/monaco-languages/release/dev/javascript/javascript.js
deleted file mode 100644
index dbedfa3..0000000
--- a/node_modules/monaco-languages/release/dev/javascript/javascript.js
+++ /dev/null
@@ -1,36 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports", "../typescript/typescript"], function (require, exports, typescript_1) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    // Allow for running under nodejs/requirejs in tests
-    var _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);
-    exports.conf = typescript_1.conf;
-    exports.language = {
-        // Set defaultToken to invalid to see what you do not tokenize yet
-        defaultToken: 'invalid',
-        tokenPostfix: '.js',
-        keywords: [
-            'break', 'case', 'catch', 'class', 'continue', 'const',
-            'constructor', 'debugger', 'default', 'delete', 'do', 'else',
-            'export', 'extends', 'false', 'finally', 'for', 'from', 'function',
-            'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null',
-            'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true',
-            'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield',
-            'async', 'await', 'of'
-        ],
-        typeKeywords: [],
-        operators: typescript_1.language.operators,
-        symbols: typescript_1.language.symbols,
-        escapes: typescript_1.language.escapes,
-        digits: typescript_1.language.digits,
-        octaldigits: typescript_1.language.octaldigits,
-        binarydigits: typescript_1.language.binarydigits,
-        hexdigits: typescript_1.language.hexdigits,
-        regexpctl: typescript_1.language.regexpctl,
-        regexpesc: typescript_1.language.regexpesc,
-        tokenizer: typescript_1.language.tokenizer,
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/kotlin/kotlin.contribution.js b/node_modules/monaco-languages/release/dev/kotlin/kotlin.contribution.js
deleted file mode 100644
index 2738899..0000000
--- a/node_modules/monaco-languages/release/dev/kotlin/kotlin.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'kotlin',
-        extensions: ['.kt'],
-        aliases: ['Kotlin', 'kotlin'],
-        mimetypes: ['text/x-kotlin-source', 'text/x-kotlin'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./kotlin'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/kotlin/kotlin.js b/node_modules/monaco-languages/release/dev/kotlin/kotlin.js
deleted file mode 100644
index 7bb87c4..0000000
--- a/node_modules/monaco-languages/release/dev/kotlin/kotlin.js
+++ /dev/null
@@ -1,139 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        // the default separators except `@$`
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '<', close: '>' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*//\\s*(?:(?:#?region\\b)|(?:<editor-fold\\b))"),
-                end: new RegExp("^\\s*//\\s*(?:(?:#?endregion\\b)|(?:</editor-fold>))")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.kt',
-        keywords: [
-            'as', 'as?', 'break', 'class', 'continue', 'do', 'else', 'false', 'for', 'fun', 'if',
-            'in', '!in', 'interface', 'is', '!is', 'null', 'object', 'package', 'return', 'super',
-            'this', 'throw', 'true', 'try', 'typealias', 'val', 'var', 'when', 'while', 'by',
-            'catch', 'constructor', 'delegate', 'dynamic', 'field', 'file', 'finally', 'get',
-            'import', 'init', 'param', 'property', 'receiver', 'set', 'setparam', 'where', 'actual',
-            'abstract', 'annotation', 'companion', 'const', 'crossinline', 'data', 'enum', 'expect',
-            'external', 'final', 'infix', 'inline', 'inner', 'internal', 'lateinit', 'noinline',
-            'open', 'operator', 'out', 'override', 'private', 'protected', 'public', 'reified',
-            'sealed', 'suspend', 'tailrec', 'vararg', 'field', 'it'
-        ],
-        operators: [
-            '+', '-', '*', '/', '%', '=', '+=', '-=', '*=', '/=',
-            '%=', '++', '--', '&&', '||', '!', '==', '!=', '===',
-            '!==', '>', '<', '<=', '>=', '[', ']', '!!', '?.', '?:',
-            '::', '..', ':', '?', '->', '@', ';', '$', '_'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        digits: /\d+(_+\d+)*/,
-        octaldigits: /[0-7]+(_+[0-7]+)*/,
-        binarydigits: /[0-1]+(_+[0-1]+)*/,
-        hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // class name highlighting
-                [/[A-Z][\w\$]*/, 'type.identifier'],
-                // identifiers and keywords
-                [/[a-zA-Z_$][\w$]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // @ annotations.
-                [/@\s*[a-zA-Z_\$][\w\$]*/, 'annotation'],
-                // numbers
-                [/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/, 'number.float'],
-                [/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/, 'number.float'],
-                [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],
-                [/0(@octaldigits)[Ll]?/, 'number.octal'],
-                [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],
-                [/(@digits)[fFdD]/, 'number.float'],
-                [/(@digits)[lL]?/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@javadoc'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            javadoc: [
-                [/[^\/*]+/, 'comment.doc'],
-                // [/\/\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(
-                [/\/\*/, 'comment.doc.invalid'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/less/less.contribution.js b/node_modules/monaco-languages/release/dev/less/less.contribution.js
deleted file mode 100644
index ac180a1..0000000
--- a/node_modules/monaco-languages/release/dev/less/less.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'less',
-        extensions: ['.less'],
-        aliases: ['Less', 'less'],
-        mimetypes: ['text/x-less', 'text/less'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./less'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/less/less.js b/node_modules/monaco-languages/release/dev/less/less.js
deleted file mode 100644
index 4a68ac3..0000000
--- a/node_modules/monaco-languages/release/dev/less/less.js
+++ /dev/null
@@ -1,147 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(#?-?\d*\.\d\w*%?)|([@#!.:]?[\w-?]+%?)|[@#!.]/g,
-        comments: {
-            blockComment: ['/*', '*/'],
-            lineComment: '//'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*\\/\\*\\s*#region\\b\\s*(.*?)\\s*\\*\\/"),
-                end: new RegExp("^\\s*\\/\\*\\s*#endregion\\b.*\\*\\/")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.less',
-        identifier: '-?-?([a-zA-Z]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))([\\w\\-]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))*',
-        identifierPlus: '-?-?([a-zA-Z:.]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))([\\w\\-:.]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))*',
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.bracket' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        tokenizer: {
-            root: [
-                { include: '@nestedJSBegin' },
-                ['[ \\t\\r\\n]+', ''],
-                { include: '@comments' },
-                { include: '@keyword' },
-                { include: '@strings' },
-                { include: '@numbers' },
-                ['[*_]?[a-zA-Z\\-\\s]+(?=:.*(;|(\\\\$)))', 'attribute.name', '@attribute'],
-                ['url(\\-prefix)?\\(', { token: 'tag', next: '@urldeclaration' }],
-                ['[{}()\\[\\]]', '@brackets'],
-                ['[,:;]', 'delimiter'],
-                ['#@identifierPlus', 'tag.id'],
-                ['&', 'tag'],
-                ['\\.@identifierPlus(?=\\()', 'tag.class', '@attribute'],
-                ['\\.@identifierPlus', 'tag.class'],
-                ['@identifierPlus', 'tag'],
-                { include: '@operators' },
-                ['@(@identifier(?=[:,\\)]))', 'variable', '@attribute'],
-                ['@(@identifier)', 'variable'],
-                ['@', 'key', '@atRules']
-            ],
-            nestedJSBegin: [
-                ['``', 'delimiter.backtick'],
-                ['`', { token: 'delimiter.backtick', next: '@nestedJSEnd', nextEmbedded: 'text/javascript' }],
-            ],
-            nestedJSEnd: [
-                ['`', { token: 'delimiter.backtick', next: '@pop', nextEmbedded: '@pop' }],
-            ],
-            operators: [
-                ['[<>=\\+\\-\\*\\/\\^\\|\\~]', 'operator']
-            ],
-            keyword: [
-                ['(@[\\s]*import|![\\s]*important|true|false|when|iscolor|isnumber|isstring|iskeyword|isurl|ispixel|ispercentage|isem|hue|saturation|lightness|alpha|lighten|darken|saturate|desaturate|fadein|fadeout|fade|spin|mix|round|ceil|floor|percentage)\\b', 'keyword']
-            ],
-            urldeclaration: [
-                { include: '@strings' },
-                ['[^)\r\n]+', 'string'],
-                ['\\)', { token: 'tag', next: '@pop' }],
-            ],
-            attribute: [
-                { include: '@nestedJSBegin' },
-                { include: '@comments' },
-                { include: '@strings' },
-                { include: '@numbers' },
-                { include: '@keyword' },
-                ['[a-zA-Z\\-]+(?=\\()', 'attribute.value', '@attribute'],
-                ['>', 'operator', '@pop'],
-                ['@identifier', 'attribute.value'],
-                { include: '@operators' },
-                ['@(@identifier)', 'variable'],
-                ['[)\\}]', '@brackets', '@pop'],
-                ['[{}()\\[\\]>]', '@brackets'],
-                ['[;]', 'delimiter', '@pop'],
-                ['[,=:]', 'delimiter'],
-                ['\\s', ''],
-                ['.', 'attribute.value']
-            ],
-            comments: [
-                ['\\/\\*', 'comment', '@comment'],
-                ['\\/\\/+.*', 'comment'],
-            ],
-            comment: [
-                ['\\*\\/', 'comment', '@pop'],
-                ['.', 'comment'],
-            ],
-            numbers: [
-                ['(\\d*\\.)?\\d+([eE][\\-+]?\\d+)?', { token: 'attribute.value.number', next: '@units' }],
-                ['#[0-9a-fA-F_]+(?!\\w)', 'attribute.value.hex']
-            ],
-            units: [
-                ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']
-            ],
-            strings: [
-                ['~?"', { token: 'string.delimiter', next: '@stringsEndDoubleQuote' }],
-                ['~?\'', { token: 'string.delimiter', next: '@stringsEndQuote' }]
-            ],
-            stringsEndDoubleQuote: [
-                ['\\\\"', 'string'],
-                ['"', { token: 'string.delimiter', next: '@popall' }],
-                ['.', 'string']
-            ],
-            stringsEndQuote: [
-                ['\\\\\'', 'string'],
-                ['\'', { token: 'string.delimiter', next: '@popall' }],
-                ['.', 'string']
-            ],
-            atRules: [
-                { include: '@comments' },
-                { include: '@strings' },
-                ['[()]', 'delimiter'],
-                ['[\\{;]', 'delimiter', '@pop'],
-                ['.', 'key']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/lua/lua.contribution.js b/node_modules/monaco-languages/release/dev/lua/lua.contribution.js
deleted file mode 100644
index f043ef1..0000000
--- a/node_modules/monaco-languages/release/dev/lua/lua.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'lua',
-        extensions: ['.lua'],
-        aliases: ['Lua', 'lua'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./lua'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/lua/lua.js b/node_modules/monaco-languages/release/dev/lua/lua.js
deleted file mode 100644
index fde4b1a..0000000
--- a/node_modules/monaco-languages/release/dev/lua/lua.js
+++ /dev/null
@@ -1,118 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '--',
-            blockComment: ['--[[', ']]'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.lua',
-        keywords: [
-            'and', 'break', 'do', 'else', 'elseif',
-            'end', 'false', 'for', 'function', 'goto', 'if',
-            'in', 'local', 'nil', 'not', 'or',
-            'repeat', 'return', 'then', 'true', 'until',
-            'while'
-        ],
-        brackets: [
-            { token: 'delimiter.bracket', open: '{', close: '}' },
-            { token: 'delimiter.array', open: '[', close: ']' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' }
-        ],
-        operators: [
-            '+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=',
-            ';', ':', ',', '.', '..', '...'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // keys
-                [/(,)(\s*)([a-zA-Z_]\w*)(\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],
-                [/({)(\s*)([a-zA-Z_]\w*)(\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
-                [/\d+?/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings: recover on non-terminated strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/'([^'\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string."'],
-                [/'/, 'string', '@string.\''],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/--\[([=]*)\[/, 'comment', '@comment.$1'],
-                [/--.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\]]+/, 'comment'],
-                [/\]([=]*)\]/, {
-                        cases: {
-                            '$1==$S2': { token: 'comment', next: '@pop' },
-                            '@default': 'comment'
-                        }
-                    }],
-                [/./, 'comment']
-            ],
-            string: [
-                [/[^\\"']+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/markdown/markdown.contribution.js b/node_modules/monaco-languages/release/dev/markdown/markdown.contribution.js
deleted file mode 100644
index 682577b..0000000
--- a/node_modules/monaco-languages/release/dev/markdown/markdown.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'markdown',
-        extensions: ['.md', '.markdown', '.mdown', '.mkdn', '.mkd', '.mdwn', '.mdtxt', '.mdtext'],
-        aliases: ['Markdown', 'markdown'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./markdown'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/markdown/markdown.js b/node_modules/monaco-languages/release/dev/markdown/markdown.js
deleted file mode 100644
index 320d7fe..0000000
--- a/node_modules/monaco-languages/release/dev/markdown/markdown.js
+++ /dev/null
@@ -1,159 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            blockComment: ['<!--', '-->',]
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>', notIn: ['string'] }
-        ],
-        surroundingPairs: [
-            { open: '(', close: ')' },
-            { open: '[', close: ']' },
-            { open: '`', close: '`' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*<!--\\s*#?region\\b.*-->"),
-                end: new RegExp("^\\s*<!--\\s*#?endregion\\b.*-->")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.md',
-        // escape codes
-        control: /[\\`*_\[\]{}()#+\-\.!]/,
-        noncontrol: /[^\\`*_\[\]{}()#+\-\.!]/,
-        escapes: /\\(?:@control)/,
-        // escape codes for javascript/CSS strings
-        jsescapes: /\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,
-        // non matched elements
-        empty: [
-            'area', 'base', 'basefont', 'br', 'col', 'frame',
-            'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'
-        ],
-        tokenizer: {
-            root: [
-                // headers (with #)
-                [/^(\s{0,3})(#+)((?:[^\\#]|@escapes)+)((?:#+)?)/, ['white', 'keyword', 'keyword', 'keyword']],
-                // headers (with =)
-                [/^\s*(=+|\-+)\s*$/, 'keyword'],
-                // headers (with ***)
-                [/^\s*((\*[ ]?)+)\s*$/, 'meta.separator'],
-                // quote
-                [/^\s*>+/, 'comment'],
-                // list (starting with * or number)
-                [/^\s*([\*\-+:]|\d+\.)\s/, 'keyword'],
-                // code block (4 spaces indent)
-                [/^(\t|[ ]{4})[^ ].*$/, 'string'],
-                // code block (3 tilde)
-                [/^\s*~~~\s*((?:\w|[\/\-#])+)?\s*$/, { token: 'string', next: '@codeblock' }],
-                // github style code blocks (with backticks and language)
-                [/^\s*```\s*((?:\w|[\/\-#])+).*$/, { token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }],
-                // github style code blocks (with backticks but no language)
-                [/^\s*```\s*$/, { token: 'string', next: '@codeblock' }],
-                // markup within lines
-                { include: '@linecontent' },
-            ],
-            codeblock: [
-                [/^\s*~~~\s*$/, { token: 'string', next: '@pop' }],
-                [/^\s*```\s*$/, { token: 'string', next: '@pop' }],
-                [/.*$/, 'variable.source'],
-            ],
-            // github style code blocks
-            codeblockgh: [
-                [/```\s*$/, { token: 'variable.source', next: '@pop', nextEmbedded: '@pop' }],
-                [/[^`]+/, 'variable.source'],
-            ],
-            linecontent: [
-                // escapes
-                [/&\w+;/, 'string.escape'],
-                [/@escapes/, 'escape'],
-                // various markup
-                [/\b__([^\\_]|@escapes|_(?!_))+__\b/, 'strong'],
-                [/\*\*([^\\*]|@escapes|\*(?!\*))+\*\*/, 'strong'],
-                [/\b_[^_]+_\b/, 'emphasis'],
-                [/\*([^\\*]|@escapes)+\*/, 'emphasis'],
-                [/`([^\\`]|@escapes)+`/, 'variable'],
-                // links
-                [/\{+[^}]+\}+/, 'string.target'],
-                [/(!?\[)((?:[^\]\\]|@escapes)*)(\]\([^\)]+\))/, ['string.link', '', 'string.link']],
-                [/(!?\[)((?:[^\]\\]|@escapes)*)(\])/, 'string.link'],
-                // or html
-                { include: 'html' },
-            ],
-            // Note: it is tempting to rather switch to the real HTML mode instead of building our own here
-            // but currently there is a limitation in Monarch that prevents us from doing it: The opening
-            // '<' would start the HTML mode, however there is no way to jump 1 character back to let the
-            // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,
-            // we cannot correctly tokenize it in that mode yet.
-            html: [
-                // html tags
-                [/<(\w+)\/>/, 'tag'],
-                [/<(\w+)/, {
-                        cases: {
-                            '@empty': { token: 'tag', next: '@tag.$1' },
-                            '@default': { token: 'tag', next: '@tag.$1' }
-                        }
-                    }],
-                [/<\/(\w+)\s*>/, { token: 'tag' }],
-                [/<!--/, 'comment', '@comment']
-            ],
-            comment: [
-                [/[^<\-]+/, 'comment.content'],
-                [/-->/, 'comment', '@pop'],
-                [/<!--/, 'comment.content.invalid'],
-                [/[<\-]/, 'comment.content']
-            ],
-            // Almost full HTML tag matching, complete with embedded scripts & styles
-            tag: [
-                [/[ \t\r\n]+/, 'white'],
-                [/(type)(\s*=\s*)(")([^"]+)(")/, ['attribute.name.html', 'delimiter.html', 'string.html',
-                        { token: 'string.html', switchTo: '@tag.$S2.$4' },
-                        'string.html']],
-                [/(type)(\s*=\s*)(')([^']+)(')/, ['attribute.name.html', 'delimiter.html', 'string.html',
-                        { token: 'string.html', switchTo: '@tag.$S2.$4' },
-                        'string.html']],
-                [/(\w+)(\s*=\s*)("[^"]*"|'[^']*')/, ['attribute.name.html', 'delimiter.html', 'string.html']],
-                [/\w+/, 'attribute.name.html'],
-                [/\/>/, 'tag', '@pop'],
-                [/>/, {
-                        cases: {
-                            '$S2==style': { token: 'tag', switchTo: 'embeddedStyle', nextEmbedded: 'text/css' },
-                            '$S2==script': {
-                                cases: {
-                                    '$S3': { token: 'tag', switchTo: 'embeddedScript', nextEmbedded: '$S3' },
-                                    '@default': { token: 'tag', switchTo: 'embeddedScript', nextEmbedded: 'text/javascript' }
-                                }
-                            },
-                            '@default': { token: 'tag', next: '@pop' }
-                        }
-                    }],
-            ],
-            embeddedStyle: [
-                [/[^<]+/, ''],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
-                [/</, '']
-            ],
-            embeddedScript: [
-                [/[^<]+/, ''],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
-                [/</, '']
-            ],
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/mips/mips.contribution.js b/node_modules/monaco-languages/release/dev/mips/mips.contribution.js
deleted file mode 100644
index 457d629..0000000
--- a/node_modules/monaco-languages/release/dev/mips/mips.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'mips',
-        extensions: ['.s'],
-        aliases: ['MIPS', 'MIPS-V'],
-        mimetypes: ['text/x-mips', 'text/mips', 'text/plaintext'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./mips'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/mips/mips.js b/node_modules/monaco-languages/release/dev/mips/mips.js
deleted file mode 100644
index 9494d35..0000000
--- a/node_modules/monaco-languages/release/dev/mips/mips.js
+++ /dev/null
@@ -1,133 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#%\^\&\*\(\)\=\$\-\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            blockComment: ['###', '###'],
-            lineComment: '#'
-        },
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#region\\b"),
-                end: new RegExp("^\\s*#endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: false,
-        tokenPostfix: '.mips',
-        regEx: /\/(?!\/\/)(?:[^\/\\]|\\.)*\/[igm]*/,
-        keywords: [
-            '.data', '.text', 'syscall', 'trap',
-            'add', 'addu', 'addi', 'addiu', 'and', 'andi',
-            'div', 'divu', 'mult', 'multu', 'nor', 'or', 'ori',
-            'sll', 'slv', 'sra', 'srav', 'srl', 'srlv',
-            'sub', 'subu', 'xor', 'xori', 'lhi', 'lho',
-            'lhi', 'llo', 'slt', 'slti', 'sltu', 'sltiu',
-            'beq', 'bgtz', 'blez', 'bne', 'j', 'jal', 'jalr', 'jr',
-            'lb', 'lbu', 'lh', 'lhu', 'lw', 'li', 'la',
-            'sb', 'sh', 'sw', 'mfhi', 'mflo', 'mthi', 'mtlo', 'move',
-        ],
-        // we include these common regular expressions
-        symbols: /[\.,\:]+/,
-        escapes: /\\(?:[abfnrtv\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/\$[a-zA-Z_]\w*/, 'variable.predefined'],
-                [/[.a-zA-Z_]\w*/, {
-                        cases: {
-                            'this': 'variable.predefined',
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': ''
-                        }
-                    }],
-                // whitespace
-                [/[ \t\r\n]+/, ''],
-                // Comments
-                [/#.*$/, 'comment'],
-                // regular expressions
-                ['///', { token: 'regexp', next: '@hereregexp' }],
-                [/^(\s*)(@regEx)/, ['', 'regexp']],
-                [/(\,)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                [/(\:)(\s*)(@regEx)/, ['delimiter', '', 'regexp']],
-                // delimiters
-                [/@symbols/, 'delimiter'],
-                // numbers
-                [/\d+[eE]([\-+]?\d+)?/, 'number.float'],
-                [/\d+\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F]+/, 'number.hex'],
-                [/0[0-7]+(?!\d)/, 'number.octal'],
-                [/\d+/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[,.]/, 'delimiter'],
-                // strings:
-                [/"""/, 'string', '@herestring."""'],
-                [/'''/, 'string', '@herestring.\'\'\''],
-                [/"/, {
-                        cases: {
-                            '@eos': 'string',
-                            '@default': { token: 'string', next: '@string."' }
-                        }
-                    }],
-                [/'/, {
-                        cases: {
-                            '@eos': 'string',
-                            '@default': { token: 'string', next: '@string.\'' }
-                        }
-                    }],
-            ],
-            string: [
-                [/[^"'\#\\]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\./, 'string.escape.invalid'],
-                [/\./, 'string.escape.invalid'],
-                [/#{/, {
-                        cases: {
-                            '$S2=="': { token: 'string', next: 'root.interpolatedstring' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/#/, 'string']
-            ],
-            herestring: [
-                [/("""|''')/, {
-                        cases: {
-                            '$1==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/[^#\\'"]+/, 'string'],
-                [/['"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\./, 'string.escape.invalid'],
-                [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],
-                [/#/, 'string']
-            ],
-            comment: [
-                [/[^#]+/, 'comment',],
-                [/#/, 'comment'],
-            ],
-            hereregexp: [
-                [/[^\\\/#]+/, 'regexp'],
-                [/\\./, 'regexp'],
-                [/#.*$/, 'comment'],
-                ['///[igm]*', { token: 'regexp', next: '@pop' }],
-                [/\//, 'regexp'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/monaco.contribution.js b/node_modules/monaco-languages/release/dev/monaco.contribution.js
index f52f53d..c160a0b 100644
--- a/node_modules/monaco-languages/release/dev/monaco.contribution.js
+++ b/node_modules/monaco-languages/release/dev/monaco.contribution.js
@@ -1,4 +1,4 @@
-define(["require", "exports", "./abap/abap.contribution", "./bat/bat.contribution", "./coffee/coffee.contribution", "./cpp/cpp.contribution", "./csharp/csharp.contribution", "./csp/csp.contribution", "./css/css.contribution", "./dockerfile/dockerfile.contribution", "./fsharp/fsharp.contribution", "./go/go.contribution", "./handlebars/handlebars.contribution", "./html/html.contribution", "./ini/ini.contribution", "./java/java.contribution", "./javascript/javascript.contribution", "./kotlin/kotlin.contribution", "./less/less.contribution", "./lua/lua.contribution", "./markdown/markdown.contribution", "./mips/mips.contribution", "./msdax/msdax.contribution", "./mysql/mysql.contribution", "./objective-c/objective-c.contribution", "./pascal/pascal.contribution", "./pascaligo/pascaligo.contribution", "./pgsql/pgsql.contribution", "./php/php.contribution", "./postiats/postiats.contribution", "./powerquery/powerquery.contribution", "./powershell/powershell.contribution", "./pug/pug.contribution", "./python/python.contribution", "./r/r.contribution", "./razor/razor.contribution", "./redis/redis.contribution", "./redshift/redshift.contribution", "./ruby/ruby.contribution", "./rust/rust.contribution", "./sb/sb.contribution", "./scss/scss.contribution", "./sophia/sophia.contribution", "./solidity/solidity.contribution", "./sql/sql.contribution", "./st/st.contribution", "./swift/swift.contribution", "./tcl/tcl.contribution", "./twig/twig.contribution", "./typescript/typescript.contribution", "./vb/vb.contribution", "./xml/xml.contribution", "./yaml/yaml.contribution", "./scheme/scheme.contribution", "./clojure/clojure.contribution", "./shell/shell.contribution", "./perl/perl.contribution", "./azcli/azcli.contribution", "./apex/apex.contribution", "./graphql/graphql.contribution"], function (require, exports) {
+define(["require", "exports", "./reactscript/reactscript.contribution"], function (require, exports) {
     /*---------------------------------------------------------------------------------------------
      *  Copyright (c) Microsoft Corporation. All rights reserved.
      *  Licensed under the MIT License. See License.txt in the project root for license information.
diff --git a/node_modules/monaco-languages/release/dev/msdax/msdax.contribution.js b/node_modules/monaco-languages/release/dev/msdax/msdax.contribution.js
deleted file mode 100644
index 3e9b407..0000000
--- a/node_modules/monaco-languages/release/dev/msdax/msdax.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'msdax',
-        extensions: ['.dax', '.msdax'],
-        aliases: ['DAX', 'MSDAX'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./msdax'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/msdax/msdax.js b/node_modules/monaco-languages/release/dev/msdax/msdax.js
deleted file mode 100644
index 844857d..0000000
--- a/node_modules/monaco-languages/release/dev/msdax/msdax.js
+++ /dev/null
@@ -1,171 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [['[', ']'], ['(', ')'], ['{', '}']],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.msdax',
-        ignoreCase: true,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '{', close: '}', token: 'delimiter.brackets' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        keywords: [
-            // Query keywords
-            'VAR',
-            'RETURN',
-            'NOT',
-            'EVALUATE',
-            'DATATABLE',
-            'ORDER',
-            'BY',
-            'START',
-            'AT',
-            'DEFINE',
-            'MEASURE',
-            'ASC',
-            'DESC',
-            'IN',
-            // Datatable types
-            'BOOLEAN',
-            'DOUBLE',
-            'INTEGER',
-            'DATETIME',
-            'CURRENCY',
-            'STRING'
-        ],
-        functions: [
-            // Relational
-            'CLOSINGBALANCEMONTH', 'CLOSINGBALANCEQUARTER', 'CLOSINGBALANCEYEAR', 'DATEADD', 'DATESBETWEEN',
-            'DATESINPERIOD', 'DATESMTD', 'DATESQTD', 'DATESYTD', 'ENDOFMONTH',
-            'ENDOFQUARTER', 'ENDOFYEAR', 'FIRSTDATE', 'FIRSTNONBLANK', 'LASTDATE',
-            'LASTNONBLANK', 'NEXTDAY', 'NEXTMONTH', 'NEXTQUARTER', 'NEXTYEAR',
-            'OPENINGBALANCEMONTH', 'OPENINGBALANCEQUARTER', 'OPENINGBALANCEYEAR', 'PARALLELPERIOD', 'PREVIOUSDAY',
-            'PREVIOUSMONTH', 'PREVIOUSQUARTER', 'PREVIOUSYEAR', 'SAMEPERIODLASTYEAR', 'STARTOFMONTH',
-            'STARTOFQUARTER', 'STARTOFYEAR', 'TOTALMTD', 'TOTALQTD', 'TOTALYTD',
-            'ADDCOLUMNS', 'ADDMISSINGITEMS', 'ALL', 'ALLEXCEPT', 'ALLNOBLANKROW',
-            'ALLSELECTED', 'CALCULATE', 'CALCULATETABLE', 'CALENDAR', 'CALENDARAUTO',
-            'CROSSFILTER', 'CROSSJOIN', 'CURRENTGROUP', 'DATATABLE', 'DETAILROWS',
-            'DISTINCT', 'EARLIER', 'EARLIEST', 'EXCEPT', 'FILTER',
-            'FILTERS', 'GENERATE', 'GENERATEALL', 'GROUPBY', 'IGNORE',
-            'INTERSECT', 'ISONORAFTER', 'KEEPFILTERS', 'LOOKUPVALUE', 'NATURALINNERJOIN',
-            'NATURALLEFTOUTERJOIN', 'RELATED', 'RELATEDTABLE', 'ROLLUP', 'ROLLUPADDISSUBTOTAL',
-            'ROLLUPGROUP', 'ROLLUPISSUBTOTAL', 'ROW', 'SAMPLE', 'SELECTCOLUMNS',
-            'SUBSTITUTEWITHINDEX', 'SUMMARIZE', 'SUMMARIZECOLUMNS', 'TOPN', 'TREATAS',
-            'UNION', 'USERELATIONSHIP', 'VALUES', 'SUM', 'SUMX',
-            'PATH', 'PATHCONTAINS', 'PATHITEM', 'PATHITEMREVERSE', 'PATHLENGTH',
-            'AVERAGE', 'AVERAGEA', 'AVERAGEX', 'COUNT', 'COUNTA',
-            'COUNTAX', 'COUNTBLANK', 'COUNTROWS', 'COUNTX', 'DISTINCTCOUNT',
-            'DIVIDE', 'GEOMEAN', 'GEOMEANX', 'MAX', 'MAXA',
-            'MAXX', 'MEDIAN', 'MEDIANX', 'MIN', 'MINA',
-            'MINX', 'PERCENTILE.EXC', 'PERCENTILE.INC', 'PERCENTILEX.EXC', 'PERCENTILEX.INC',
-            'PRODUCT', 'PRODUCTX', 'RANK.EQ', 'RANKX', 'STDEV.P',
-            'STDEV.S', 'STDEVX.P', 'STDEVX.S', 'VAR.P', 'VAR.S',
-            'VARX.P', 'VARX.S', 'XIRR', 'XNPV',
-            // Scalar
-            'DATE', 'DATEDIFF', 'DATEVALUE', 'DAY', 'EDATE',
-            'EOMONTH', 'HOUR', 'MINUTE', 'MONTH', 'NOW',
-            'SECOND', 'TIME', 'TIMEVALUE', 'TODAY', 'WEEKDAY',
-            'WEEKNUM', 'YEAR', 'YEARFRAC', 'CONTAINS', 'CONTAINSROW',
-            'CUSTOMDATA', 'ERROR', 'HASONEFILTER', 'HASONEVALUE', 'ISBLANK',
-            'ISCROSSFILTERED', 'ISEMPTY', 'ISERROR', 'ISEVEN', 'ISFILTERED',
-            'ISLOGICAL', 'ISNONTEXT', 'ISNUMBER', 'ISODD', 'ISSUBTOTAL',
-            'ISTEXT', 'USERNAME', 'USERPRINCIPALNAME', 'AND', 'FALSE',
-            'IF', 'IFERROR', 'NOT', 'OR', 'SWITCH',
-            'TRUE', 'ABS', 'ACOS', 'ACOSH', 'ACOT',
-            'ACOTH', 'ASIN', 'ASINH', 'ATAN', 'ATANH',
-            'BETA.DIST', 'BETA.INV', 'CEILING', 'CHISQ.DIST', 'CHISQ.DIST.RT',
-            'CHISQ.INV', 'CHISQ.INV.RT', 'COMBIN', 'COMBINA', 'CONFIDENCE.NORM',
-            'CONFIDENCE.T', 'COS', 'COSH', 'COT', 'COTH',
-            'CURRENCY', 'DEGREES', 'EVEN', 'EXP', 'EXPON.DIST',
-            'FACT', 'FLOOR', 'GCD', 'INT', 'ISO.CEILING',
-            'LCM', 'LN', 'LOG', 'LOG10', 'MOD',
-            'MROUND', 'ODD', 'PERMUT', 'PI', 'POISSON.DIST',
-            'POWER', 'QUOTIENT', 'RADIANS', 'RAND', 'RANDBETWEEN',
-            'ROUND', 'ROUNDDOWN', 'ROUNDUP', 'SIGN', 'SIN',
-            'SINH', 'SQRT', 'SQRTPI', 'TAN', 'TANH',
-            'TRUNC', 'BLANK', 'CONCATENATE', 'CONCATENATEX', 'EXACT',
-            'FIND', 'FIXED', 'FORMAT', 'LEFT', 'LEN',
-            'LOWER', 'MID', 'REPLACE', 'REPT', 'RIGHT',
-            'SEARCH', 'SUBSTITUTE', 'TRIM', 'UNICHAR', 'UNICODE',
-            'UPPER', 'VALUE'
-        ],
-        tokenizer: {
-            root: [
-                { include: '@comments' },
-                { include: '@whitespace' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@complexIdentifiers' },
-                [/[;,.]/, 'delimiter'],
-                [/[({})]/, '@brackets'],
-                [/[a-z_][a-zA-Z0-9_]*/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@functions': 'keyword',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=!%&+\-*/|~^]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white']
-            ],
-            comments: [
-                [/\/\/+.*/, 'comment'],
-                [/\/\*/, { token: 'comment.quote', next: '@comment' }]
-            ],
-            comment: [
-                [/[^*/]+/, 'comment'],
-                [/\*\//, { token: 'comment.quote', next: '@pop' }],
-                [/./, 'comment']
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*/, 'number'],
-                [/[$][+-]*\d*(\.\d*)?/, 'number'],
-                [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number']
-            ],
-            strings: [
-                [/N"/, { token: 'string', next: '@string' }],
-                [/"/, { token: 'string', next: '@string' }]
-            ],
-            string: [
-                [/[^"]+/, 'string'],
-                [/""/, 'string'],
-                [/"/, { token: 'string', next: '@pop' }]
-            ],
-            complexIdentifiers: [
-                [/\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],
-                [/'/, { token: 'identifier.quote', next: '@quotedIdentifier' }]
-            ],
-            bracketedIdentifier: [
-                [/[^\]]+/, 'identifier'],
-                [/]]/, 'identifier'],
-                [/]/, { token: 'identifier.quote', next: '@pop' }]
-            ],
-            quotedIdentifier: [
-                [/[^']+/, 'identifier'],
-                [/''/, 'identifier'],
-                [/'/, { token: 'identifier.quote', next: '@pop' }]
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/mysql/mysql.contribution.js b/node_modules/monaco-languages/release/dev/mysql/mysql.contribution.js
deleted file mode 100644
index 0da71bd..0000000
--- a/node_modules/monaco-languages/release/dev/mysql/mysql.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'mysql',
-        extensions: [],
-        aliases: ['MySQL', 'mysql'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./mysql'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/mysql/mysql.js b/node_modules/monaco-languages/release/dev/mysql/mysql.js
deleted file mode 100644
index 239adf8..0000000
--- a/node_modules/monaco-languages/release/dev/mysql/mysql.js
+++ /dev/null
@@ -1,216 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '--',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.sql',
-        ignoreCase: true,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        keywords: [
-            "ACCESSIBLE", "ACCOUNT", "ACTION", "ADD", "AFTER", "AGAINST", "AGGREGATE", "ALGORITHM", "ALL", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE",
-            "AND", "ANY", "AS", "ASC", "ASCII", "ASENSITIVE", "AT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG", "AVG_ROW_LENGTH", "BACKUP", "BEFORE",
-            "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BINLOG", "BIT", "BLOB", "BLOCK", "BOOL", "BOOLEAN", "BOTH", "BTREE", "BY", "BYTE", "CACHE", "CALL",
-            "CASCADE", "CASCADED", "CASE", "CATALOG_NAME", "CHAIN", "CHANGE", "CHANGED", "CHANNEL", "CHAR", "CHARACTER", "CHARSET", "CHECK", "CHECKSUM",
-            "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME",
-            "COMMENT", "COMMIT", "COMMITTED", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONDITION", "CONNECTION", "CONSISTENT",
-            "CONSTRAINT", "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONTAINS", "CONTEXT", "CONTINUE", "CONVERT", "CPU", "CREATE",
-            "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CURSOR_NAME", "DATA", "DATABASE",
-            "DATABASES", "DATAFILE", "DATE", "DATETIME", "DAY", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEALLOCATE", "DEC", "DECIMAL",
-            "DECLARE", "DEFAULT", "DEFAULT_AUTH", "DEFINER", "DELAYED", "DELAY_KEY_WRITE", "DELETE", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC",
-            "DIAGNOSTICS", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DISTINCT", "DISTINCTROW", "DIV", "DO", "DOUBLE", "DROP", "DUAL", "DUMPFILE",
-            "DUPLICATE", "DYNAMIC", "EACH", "ELSE", "ELSEIF", "ENABLE", "ENCLOSED", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ENUM", "ERROR",
-            "ERRORS", "ESCAPE", "ESCAPED", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXECUTE", "EXISTS", "EXIT", "EXPANSION", "EXPIRE", "EXPLAIN", "EXPORT",
-            "EXTENDED", "EXTENT_SIZE", "FALSE", "FAST", "FAULTS", "FETCH", "FIELDS", "FILE", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLOAT", "FLOAT4",
-            "FLOAT8", "FLUSH", "FOLLOWS", "FOR", "FORCE", "FOREIGN", "FORMAT", "FOUND", "FROM", "FULL", "FULLTEXT", "FUNCTION", "GENERAL", "GENERATED",
-            "GEOMETRY", "GEOMETRYCOLLECTION", "GET", "GET_FORMAT", "GLOBAL", "GRANT", "GRANTS", "GROUP", "GROUP_REPLICATION", "HANDLER", "HASH", "HAVING",
-            "HELP", "HIGH_PRIORITY", "HOST", "HOSTS", "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IDENTIFIED", "IF", "IGNORE", "IGNORE_SERVER_IDS",
-            "IMPORT", "INDEX", "INDEXES", "INFILE", "INITIAL_SIZE", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INSERT_METHOD", "INSTALL", "INSTANCE",
-            "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTERVAL", "INTO", "INVOKER", "IO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_THREAD",
-            "IPC", "ISOLATION", "ISSUER", "ITERATE", "JOIN", "JSON", "KEY", "KEYS", "KEY_BLOCK_SIZE", "KILL", "LANGUAGE", "LAST", "LEADING", "LEAVE",
-            "LEAVES", "LEFT", "LESS", "LEVEL", "LIKE", "LIMIT", "LINEAR", "LINES", "LINESTRING", "LIST", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCK",
-            "LOCKS", "LOGFILE", "LOGS", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER", "MASTER_AUTO_POSITION", "MASTER_BIND", "MASTER_CONNECT_RETRY",
-            "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT",
-            "MASTER_SERVER_ID", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH",
-            "MASTER_SSL_KEY", "MASTER_SSL_VERIFY_SERVER_CERT", "MASTER_TLS_VERSION", "MASTER_USER", "MATCH", "MAXVALUE", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR",
-            "MAX_ROWS", "MAX_SIZE", "MAX_STATEMENT_TIME", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEMORY",
-            "MERGE", "MESSAGE_TEXT", "MICROSECOND", "MIDDLEINT", "MIGRATE", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", "MOD", "MODE", "MODIFIES",
-            "MODIFY", "MONTH", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "MUTEX", "MYSQL_ERRNO", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NDB",
-            "NDBCLUSTER", "NEVER", "NEW", "NEXT", "NO", "NODEGROUP", "NONBLOCKING", "NONE", "NO_WAIT", "NO_WRITE_TO_BINLOG", "NUMBER", "NUMERIC",
-            "NVARCHAR", "OFFSET", "OLD_PASSWORD", "ON", "ONE", "ONLY", "OPEN", "OPTIMIZE", "OPTIMIZER_COSTS", "OPTION", "OPTIONALLY", "OPTIONS", "OR", "ORDER",
-            "OUT", "OUTER", "OUTFILE", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARSE_GCOL_EXPR", "PARTIAL", "PARTITION", "PARTITIONING", "PARTITIONS", "PASSWORD",
-            "PHASE", "PLUGIN", "PLUGINS", "PLUGIN_DIR", "POINT", "POLYGON", "PORT", "PRECEDES", "PRECISION", "PREPARE", "PRESERVE", "PREV", "PRIMARY", "PRIVILEGES",
-            "PROCEDURE", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "PURGE", "QUARTER", "QUERY", "QUICK", "RANGE", "READ", "READS", "READ_ONLY", "READ_WRITE",
-            "REAL", "REBUILD", "RECOVER", "REDOFILE", "REDO_BUFFER_SIZE", "REDUNDANT", "REFERENCES", "REGEXP", "RELAY", "RELAYLOG", "RELAY_LOG_FILE", "RELAY_LOG_POS",
-            "RELAY_THREAD", "RELEASE", "RELOAD", "REMOVE", "RENAME", "REORGANIZE", "REPAIR", "REPEAT", "REPEATABLE", "REPLACE", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE",
-            "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "REQUIRE",
-            "RESET", "RESIGNAL", "RESTORE", "RESTRICT", "RESUME", "RETURN", "RETURNED_SQLSTATE", "RETURNS", "REVERSE", "REVOKE", "RIGHT", "RLIKE", "ROLLBACK", "ROLLUP",
-            "ROTATE", "ROUTINE", "ROW", "ROWS", "ROW_COUNT", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SCHEMA", "SCHEMAS", "SCHEMA_NAME", "SECOND", "SECOND_MICROSECOND",
-            "SECURITY", "SELECT", "SENSITIVE", "SEPARATOR", "SERIAL", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SHARE", "SHOW", "SHUTDOWN", "SIGNAL", "SIGNED", "SIMPLE",
-            "SLAVE", "SLOW", "SMALLINT", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING",
-            "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE",
-            "SQL_SMALL_RESULT", "SQL_THREAD", "SQL_TSI_DAY", "SQL_TSI_HOUR", "SQL_TSI_MINUTE", "SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_SECOND", "SQL_TSI_WEEK",
-            "SQL_TSI_YEAR", "SSL", "STACKED", "START", "STARTING", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE",
-            "STORED", "STRAIGHT_JOIN", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUPER", "SUSPEND", "SWAPS", "SWITCHES", "TABLE", "TABLES",
-            "TABLESPACE", "TABLE_CHECKSUM", "TABLE_NAME", "TEMPORARY", "TEMPTABLE", "TERMINATED", "TEXT", "THAN", "THEN", "TIME", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF",
-            "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TRAILING", "TRANSACTION", "TRIGGER", "TRIGGERS", "TRUE", "TRUNCATE", "TYPE", "TYPES", "UNCOMMITTED", "UNDEFINED", "UNDO",
-            "UNDOFILE", "UNDO_BUFFER_SIZE", "UNICODE", "UNINSTALL", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSIGNED", "UNTIL", "UPDATE", "UPGRADE", "USAGE", "USE", "USER",
-            "USER_RESOURCES", "USE_FRM", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALIDATION", "VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARIABLES",
-            "VARYING", "VIEW", "VIRTUAL", "WAIT", "WARNINGS", "WEEK", "WEIGHT_STRING", "WHEN", "WHERE", "WHILE", "WITH", "WITHOUT", "WORK", "WRAPPER", "WRITE", "X509", "XA",
-            "XID", "XML", "XOR", "YEAR", "YEAR_MONTH", "ZEROFILL"
-        ],
-        operators: [
-            "AND", "BETWEEN", "IN", "LIKE", "NOT", "OR", "IS", "NULL", "INTERSECT", "UNION", "INNER", "JOIN", "LEFT", "OUTER", "RIGHT"
-        ],
-        builtinFunctions: [
-            "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "ANY_VALUE", "Area", "AsBinary", "AsWKB", "ASCII", "ASIN",
-            "AsText", "AsWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY",
-            "ATAN", "ATAN2", "ATAN", "AVG", "BENCHMARK", "BIN", "BIT_AND", "BIT_COUNT", "BIT_LENGTH", "BIT_OR", "BIT_XOR", "Buffer", "CAST",
-            "CEIL", "CEILING", "Centroid", "CHAR", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARSET", "COALESCE", "COERCIBILITY", "COLLATION",
-            "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "Contains", "CONV", "CONVERT", "CONVERT_TZ", "ConvexHull", "COS", "COT",
-            "COUNT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "Crosses",
-            "CURDATE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURTIME", "DATABASE", "DATE", "DATE_ADD",
-            "DATE_FORMAT", "DATE_SUB", "DATEDIFF", "DAY", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEFAULT", "DEGREES",
-            "DES_DECRYPT", "DES_ENCRYPT", "Dimension", "Disjoint", "Distance", "ELT", "ENCODE", "ENCRYPT", "EndPoint", "Envelope", "Equals",
-            "EXP", "EXPORT_SET", "ExteriorRing", "EXTRACT", "ExtractValue", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64",
-            "FROM_DAYS", "FROM_UNIXTIME", "GeomCollFromText", "GeometryCollectionFromText", "GeomCollFromWKB", "GeometryCollectionFromWKB",
-            "GeometryCollection", "GeometryN", "GeometryType", "GeomFromText", "GeometryFromText", "GeomFromWKB", "GeometryFromWKB", "GET_FORMAT",
-            "GET_LOCK", "GLength", "GREATEST", "GROUP_CONCAT", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "HOUR", "IF", "IFNULL", "INET_ATON",
-            "INET_NTOA", "INET6_ATON", "INET6_NTOA", "INSERT", "INSTR", "InteriorRingN", "Intersects", "INTERVAL", "IS_FREE_LOCK", "IS_IPV4",
-            "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", "IsClosed", "IsEmpty", "ISNULL", "IsSimple", "JSON_APPEND", "JSON_ARRAY",
-            "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS",
-            "JSON_LENGTH", "JSON_MERGE", "JSON_MERGE_PRESERVE", "JSON_OBJECT", "JSON_QUOTE", "JSON_REMOVE", "JSON_REPLACE", "JSON_SEARCH", "JSON_SET",
-            "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "LAST_INSERT_ID", "LCASE", "LEAST", "LEFT", "LENGTH", "LineFromText", "LineStringFromText",
-            "LineFromWKB", "LineStringFromWKB", "LineString", "LN", "LOAD_FILE", "LOCALTIME", "LOCALTIMESTAMP", "LOCATE", "LOG", "LOG10", "LOG2",
-            "LOWER", "LPAD", "LTRIM", "MAKE_SET", "MAKEDATE", "MAKETIME", "MASTER_POS_WAIT", "MAX", "MBRContains", "MBRCoveredBy", "MBRCovers",
-            "MBRDisjoint", "MBREqual", "MBREquals", "MBRIntersects", "MBROverlaps", "MBRTouches", "MBRWithin", "MD5", "MICROSECOND", "MID",
-            "MIN", "MINUTE", "MLineFromText", "MultiLineStringFromText", "MLineFromWKB", "MultiLineStringFromWKB", "MOD", "MONTH", "MONTHNAME",
-            "MPointFromText", "MultiPointFromText", "MPointFromWKB", "MultiPointFromWKB", "MPolyFromText", "MultiPolygonFromText", "MPolyFromWKB",
-            "MultiPolygonFromWKB", "MultiLineString", "MultiPoint", "MultiPolygon", "NAME_CONST", "NOT IN", "NOW", "NULLIF", "NumGeometries",
-            "NumInteriorRings", "NumPoints", "OCT", "OCTET_LENGTH", "OLD_PASSWORD", "ORD", "Overlaps", "PASSWORD", "PERIOD_ADD", "PERIOD_DIFF",
-            "PI", "Point", "PointFromText", "PointFromWKB", "PointN", "PolyFromText", "PolygonFromText", "PolyFromWKB", "PolygonFromWKB", "Polygon",
-            "POSITION", "POW", "POWER", "PROCEDURE ANALYSE", "QUARTER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", "RELEASE_ALL_LOCKS", "RELEASE_LOCK",
-            "REPEAT", "REPLACE", "REVERSE", "RIGHT", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SCHEMA", "SEC_TO_TIME", "SECOND", "SESSION_USER", "SHA1",
-            "SHA", "SHA2", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SPACE", "SQRT", "SRID", "ST_Area", "ST_AsBinary", "ST_AsWKB", "ST_AsGeoJSON", "ST_AsText",
-            "ST_AsWKT", "ST_Buffer", "ST_Buffer_Strategy", "ST_Centroid", "ST_Contains", "ST_ConvexHull", "ST_Crosses", "ST_Difference", "ST_Dimension",
-            "ST_Disjoint", "ST_Distance", "ST_Distance_Sphere", "ST_EndPoint", "ST_Envelope", "ST_Equals", "ST_ExteriorRing", "ST_GeoHash",
-            "ST_GeomCollFromText", "ST_GeometryCollectionFromText", "ST_GeomCollFromTxt", "ST_GeomCollFromWKB", "ST_GeometryCollectionFromWKB",
-            "ST_GeometryN", "ST_GeometryType", "ST_GeomFromGeoJSON", "ST_GeomFromText", "ST_GeometryFromText", "ST_GeomFromWKB", "ST_GeometryFromWKB",
-            "ST_InteriorRingN", "ST_Intersection", "ST_Intersects", "ST_IsClosed", "ST_IsEmpty", "ST_IsSimple", "ST_IsValid", "ST_LatFromGeoHash",
-            "ST_Length", "ST_LineFromText", "ST_LineStringFromText", "ST_LineFromWKB", "ST_LineStringFromWKB", "ST_LongFromGeoHash", "ST_MakeEnvelope",
-            "ST_MLineFromText", "ST_MultiLineStringFromText", "ST_MLineFromWKB", "ST_MultiLineStringFromWKB", "ST_MPointFromText", "ST_MultiPointFromText",
-            "ST_MPointFromWKB", "ST_MultiPointFromWKB", "ST_MPolyFromText", "ST_MultiPolygonFromText", "ST_MPolyFromWKB", "ST_MultiPolygonFromWKB",
-            "ST_NumGeometries", "ST_NumInteriorRing", "ST_NumInteriorRings", "ST_NumPoints", "ST_Overlaps", "ST_PointFromGeoHash", "ST_PointFromText",
-            "ST_PointFromWKB", "ST_PointN", "ST_PolyFromText", "ST_PolygonFromText", "ST_PolyFromWKB", "ST_PolygonFromWKB", "ST_Simplify", "ST_SRID",
-            "ST_StartPoint", "ST_SymDifference", "ST_Touches", "ST_Union", "ST_Validate", "ST_Within", "ST_X", "ST_Y", "StartPoint", "STD", "STDDEV",
-            "STDDEV_POP", "STDDEV_SAMP", "STR_TO_DATE", "STRCMP", "SUBDATE", "SUBSTR", "SUBSTRING", "SUBSTRING_INDEX", "SUBTIME", "SUM", "SYSDATE",
-            "SYSTEM_USER", "TAN", "TIME", "TIME_FORMAT", "TIME_TO_SEC", "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", "TO_BASE64", "TO_DAYS",
-            "TO_SECONDS", "Touches", "TRIM", "TRUNCATE", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UpdateXML", "UPPER",
-            "USER", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VALUES", "VAR_POP", "VAR_SAMP", "VARIANCE",
-            "VERSION", "WAIT_FOR_EXECUTED_GTID_SET", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "Within",
-            "X", "Y", "YEAR", "YEARWEEK"
-        ],
-        builtinVariables: [
-        // NOT SUPPORTED
-        ],
-        tokenizer: {
-            root: [
-                { include: '@comments' },
-                { include: '@whitespace' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@complexIdentifiers' },
-                { include: '@scopes' },
-                [/[;,.]/, 'delimiter'],
-                [/[()]/, '@brackets'],
-                [/[\w@]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@operators': 'operator',
-                            '@builtinVariables': 'predefined',
-                            '@builtinFunctions': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=!%&+\-*/|~^]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white']
-            ],
-            comments: [
-                [/--+.*/, 'comment'],
-                [/#+.*/, 'comment'],
-                [/\/\*/, { token: 'comment.quote', next: '@comment' }]
-            ],
-            comment: [
-                [/[^*/]+/, 'comment'],
-                // Not supporting nested comments, as nested comments seem to not be standard?
-                // i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic
-                // [/\/\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(
-                [/\*\//, { token: 'comment.quote', next: '@pop' }],
-                [/./, 'comment']
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*/, 'number'],
-                [/[$][+-]*\d*(\.\d*)?/, 'number'],
-                [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number']
-            ],
-            strings: [
-                [/'/, { token: 'string', next: '@string' }],
-                [/"/, { token: 'string.double', next: '@stringDouble' }]
-            ],
-            string: [
-                [/[^']+/, 'string'],
-                [/''/, 'string'],
-                [/'/, { token: 'string', next: '@pop' }],
-            ],
-            stringDouble: [
-                [/[^"]+/, 'string.double'],
-                [/""/, 'string.double'],
-                [/"/, { token: 'string.double', next: '@pop' }]
-            ],
-            complexIdentifiers: [
-                [/`/, { token: 'identifier.quote', next: '@quotedIdentifier' }]
-            ],
-            quotedIdentifier: [
-                [/[^`]+/, 'identifier'],
-                [/``/, 'identifier'],
-                [/`/, { token: 'identifier.quote', next: '@pop' }]
-            ],
-            scopes: [
-            // NOT SUPPORTED
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/objective-c/objective-c.contribution.js b/node_modules/monaco-languages/release/dev/objective-c/objective-c.contribution.js
deleted file mode 100644
index 7f5f813..0000000
--- a/node_modules/monaco-languages/release/dev/objective-c/objective-c.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'objective-c',
-        extensions: ['.m'],
-        aliases: ['Objective-C'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./objective-c'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/objective-c/objective-c.js b/node_modules/monaco-languages/release/dev/objective-c/objective-c.js
deleted file mode 100644
index a71d471..0000000
--- a/node_modules/monaco-languages/release/dev/objective-c/objective-c.js
+++ /dev/null
@@ -1,184 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.objective-c',
-        keywords: [
-            '#import',
-            '#include',
-            '#define',
-            '#else',
-            '#endif',
-            '#if',
-            '#ifdef',
-            '#ifndef',
-            '#ident',
-            '#undef',
-            '@class',
-            '@defs',
-            '@dynamic',
-            '@encode',
-            '@end',
-            '@implementation',
-            '@interface',
-            '@package',
-            '@private',
-            '@protected',
-            '@property',
-            '@protocol',
-            '@public',
-            '@selector',
-            '@synthesize',
-            '__declspec',
-            'assign',
-            'auto',
-            'BOOL',
-            'break',
-            'bycopy',
-            'byref',
-            'case',
-            'char',
-            'Class',
-            'const',
-            'copy',
-            'continue',
-            'default',
-            'do',
-            'double',
-            'else',
-            'enum',
-            'extern',
-            'FALSE',
-            'false',
-            'float',
-            'for',
-            'goto',
-            'if',
-            'in',
-            'int',
-            'id',
-            'inout',
-            'IMP',
-            'long',
-            'nil',
-            'nonatomic',
-            'NULL',
-            'oneway',
-            'out',
-            'private',
-            'public',
-            'protected',
-            'readwrite',
-            'readonly',
-            'register',
-            'return',
-            'SEL',
-            'self',
-            'short',
-            'signed',
-            'sizeof',
-            'static',
-            'struct',
-            'super',
-            'switch',
-            'typedef',
-            'TRUE',
-            'true',
-            'union',
-            'unsigned',
-            'volatile',
-            'void',
-            'while',
-        ],
-        decpart: /\d(_?\d)*/,
-        decimal: /0|@decpart/,
-        tokenizer: {
-            root: [
-                { include: '@comments' },
-                { include: '@whitespace' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                [/[,:;]/, 'delimiter'],
-                [/[{}\[\]()<>]/, '@brackets'],
-                [/[a-zA-Z@#]\w*/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=\\+\\-\\*\\/\\^\\|\\~,]|and\\b|or\\b|not\\b]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white'],
-            ],
-            comments: [
-                ['\\/\\*', 'comment', '@comment'],
-                ['\\/\\/+.*', 'comment'],
-            ],
-            comment: [
-                ['\\*\\/', 'comment', '@pop'],
-                ['.', 'comment',],
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*(_?[0-9a-fA-F])*/, 'number.hex'],
-                [/@decimal((\.@decpart)?([eE][\-+]?@decpart)?)[fF]*/, {
-                        cases: {
-                            '(\\d)*': 'number',
-                            '$0': 'number.float'
-                        }
-                    }]
-            ],
-            // Recognize strings, including those broken across lines with \ (but not without)
-            strings: [
-                [/'$/, 'string.escape', '@popall'],
-                [/'/, 'string.escape', '@stringBody'],
-                [/"$/, 'string.escape', '@popall'],
-                [/"/, 'string.escape', '@dblStringBody']
-            ],
-            stringBody: [
-                [/[^\\']+$/, 'string', '@popall'],
-                [/[^\\']+/, 'string'],
-                [/\\./, 'string'],
-                [/'/, 'string.escape', '@popall'],
-                [/\\$/, 'string']
-            ],
-            dblStringBody: [
-                [/[^\\"]+$/, 'string', '@popall'],
-                [/[^\\"]+/, 'string'],
-                [/\\./, 'string'],
-                [/"/, 'string.escape', '@popall'],
-                [/\\$/, 'string']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/pascal/pascal.contribution.js b/node_modules/monaco-languages/release/dev/pascal/pascal.contribution.js
deleted file mode 100644
index 26c9d84..0000000
--- a/node_modules/monaco-languages/release/dev/pascal/pascal.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'pascal',
-        extensions: ['.pas', '.p', '.pp'],
-        aliases: ['Pascal', 'pas'],
-        mimetypes: ['text/x-pascal-source', 'text/x-pascal'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./pascal'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/pascal/pascal.js b/node_modules/monaco-languages/release/dev/pascal/pascal.js
deleted file mode 100644
index ac623e5..0000000
--- a/node_modules/monaco-languages/release/dev/pascal/pascal.js
+++ /dev/null
@@ -1,134 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        // the default separators except `@$`
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '//',
-            blockComment: ['{', '}'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-            ['<', '>'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*\\{\\$REGION(\\s\\'.*\\')?\\}"),
-                end: new RegExp("^\\s*\\{\\$ENDREGION\\}")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.pascal',
-        ignoreCase: true,
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        keywords: [
-            'absolute', 'abstract', 'all', 'and_then', 'array', 'as', 'asm',
-            'attribute', 'begin', 'bindable', 'case', 'class', 'const',
-            'contains', 'default', 'div', 'else', 'end', 'except',
-            'exports', 'external', 'far', 'file', 'finalization', 'finally',
-            'forward', 'generic', 'goto', 'if', 'implements', 'import', 'in',
-            'index', 'inherited', 'initialization', 'interrupt', 'is', 'label',
-            'library', 'mod', 'module', 'name', 'near', 'not', 'object', 'of',
-            'on', 'only', 'operator', 'or_else', 'otherwise', 'override',
-            'package', 'packed', 'pow', 'private', 'program', 'protected',
-            'public', 'published', 'interface', 'implementation', 'qualified',
-            'read', 'record', 'resident', 'requires', 'resourcestring',
-            'restricted', 'segment', 'set', 'shl', 'shr', 'specialize', 'stored',
-            'then', 'threadvar', 'to', 'try', 'type', 'unit', 'uses', 'var',
-            'view', 'virtual', 'dynamic', 'overload', 'reintroduce', 'with',
-            'write', 'xor', 'true', 'false', 'procedure', 'function',
-            'constructor', 'destructor', 'property', 'break', 'continue', 'exit',
-            'abort', 'while', 'do', 'for', 'raise', 'repeat', 'until'
-        ],
-        typeKeywords: [
-            'boolean', 'double', 'byte', 'integer', 'shortint', 'char',
-            'longint', 'float', 'string'
-        ],
-        operators: [
-            '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'or',
-            '+', '-', '*', '/', '@', '&', '^', '%'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><:@\^&|+\-*\/\^%]+/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_][\w]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/\$[0-9a-fA-F]{1,16}/, 'number.hex'],
-                [/\d+/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/'([^'\\]|\\.)*$/, 'string.invalid'],
-                [/'/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/'/, 'string.invalid'],
-                [/\#\d+/, 'string']
-            ],
-            comment: [
-                [/[^\*\}]+/, 'comment'],
-                //[/\(\*/,    'comment', '@push' ],    // nested comment  not allowed :-(
-                [/\}/, 'comment', '@pop'],
-                [/[\{]/, 'comment']
-            ],
-            string: [
-                [/[^\\']+/, 'string'],
-                [/\\./, 'string.escape.invalid'],
-                [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white'],
-                [/\{/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/pascaligo/pascaligo.contribution.js b/node_modules/monaco-languages/release/dev/pascaligo/pascaligo.contribution.js
deleted file mode 100644
index 3315e11..0000000
--- a/node_modules/monaco-languages/release/dev/pascaligo/pascaligo.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'pascaligo',
-        extensions: ['.ligo'],
-        aliases: ['Pascaligo', 'ligo'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./pascaligo'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/pascaligo/pascaligo.js b/node_modules/monaco-languages/release/dev/pascaligo/pascaligo.js
deleted file mode 100644
index 11baced..0000000
--- a/node_modules/monaco-languages/release/dev/pascaligo/pascaligo.js
+++ /dev/null
@@ -1,114 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['(*', '*)'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-            ['<', '>'],
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.pascaligo',
-        ignoreCase: true,
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        keywords: [
-            'begin', 'block', 'case', 'const', 'else', 'end',
-            'fail', 'for', 'from', 'function', 'if', 'is', 'nil',
-            'of', 'remove', 'return', 'skip', 'then', 'type', 'var',
-            'while', 'with', 'option', 'None', 'transaction'
-        ],
-        typeKeywords: [
-            'bool', 'int', 'list', 'map', 'nat', 'record',
-            'string', 'unit', 'address', 'map', 'mtz', 'xtz'
-        ],
-        operators: [
-            '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or',
-            '+', '-', '*', '/', '@', '&', '^', '%'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><:@\^&|+\-*\/\^%]+/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_][\w]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/\$[0-9a-fA-F]{1,16}/, 'number.hex'],
-                [/\d+/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/'([^'\\]|\\.)*$/, 'string.invalid'],
-                [/'/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/'/, 'string.invalid'],
-                [/\#\d+/, 'string']
-            ],
-            /* */
-            comment: [
-                [/[^\(\*]+/, 'comment'],
-                //[/\(\*/,    'comment', '@push' ],    // nested comment  not allowed :-(
-                [/\*\)/, 'comment', '@pop'],
-                [/\(\*/, 'comment']
-            ],
-            string: [
-                [/[^\\']+/, 'string'],
-                [/\\./, 'string.escape.invalid'],
-                [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white'],
-                [/\(\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/perl/perl.contribution.js b/node_modules/monaco-languages/release/dev/perl/perl.contribution.js
deleted file mode 100644
index 286c0b1..0000000
--- a/node_modules/monaco-languages/release/dev/perl/perl.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-    *  Copyright (c) Microsoft Corporation. All rights reserved.
-    *  Licensed under the MIT License. See License.txt in the project root for license information.
-    *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'perl',
-        extensions: ['.pl'],
-        aliases: ['Perl', 'pl'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./perl'], resolve_1, reject_1); }); },
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/perl/perl.js b/node_modules/monaco-languages/release/dev/perl/perl.js
deleted file mode 100644
index 198c05a..0000000
--- a/node_modules/monaco-languages/release/dev/perl/perl.js
+++ /dev/null
@@ -1,616 +0,0 @@
-/*---------------------------------------------------------------------------------------------
-*  Copyright (c) Microsoft Corporation. All rights reserved.
-*  Licensed under the MIT License. See License.txt in the project root for license information.
-*--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#',
-        },
-        brackets: [['{', '}'], ['[', ']'], ['(', ')']],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: "'", close: "'" },
-            { open: '`', close: '`' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: "'", close: "'" },
-            { open: '`', close: '`' },
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.perl',
-        brackets: [
-            { token: 'delimiter.bracket', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' },
-        ],
-        // https://learn.perl.org/docs/keywords.html
-        // Perl syntax
-        keywords: [
-            '__DATA__',
-            'else',
-            'lock',
-            '__END__',
-            'elsif',
-            'lt',
-            '__FILE__',
-            'eq',
-            '__LINE__',
-            'exp',
-            'ne',
-            'sub',
-            '__PACKAGE__',
-            'for',
-            'no',
-            'and',
-            'foreach',
-            'or',
-            'unless',
-            'cmp',
-            'ge',
-            'package',
-            'until',
-            'continue',
-            'gt',
-            'while',
-            'CORE',
-            'if',
-            'xor',
-            'do',
-            'le',
-            '__DIE__',
-            '__WARN__',
-        ],
-        // Perl functions
-        builtinFunctions: [
-            '-A',
-            'END',
-            'length',
-            'setpgrp',
-            '-B',
-            'endgrent',
-            'link',
-            'setpriority',
-            '-b',
-            'endhostent',
-            'listen',
-            'setprotoent',
-            '-C',
-            'endnetent',
-            'local',
-            'setpwent',
-            '-c',
-            'endprotoent',
-            'localtime',
-            'setservent',
-            '-d',
-            'endpwent',
-            'log',
-            'setsockopt',
-            '-e',
-            'endservent',
-            'lstat',
-            'shift',
-            '-f',
-            'eof',
-            'map',
-            'shmctl',
-            '-g',
-            'eval',
-            'mkdir',
-            'shmget',
-            '-k',
-            'exec',
-            'msgctl',
-            'shmread',
-            '-l',
-            'exists',
-            'msgget',
-            'shmwrite',
-            '-M',
-            'exit',
-            'msgrcv',
-            'shutdown',
-            '-O',
-            'fcntl',
-            'msgsnd',
-            'sin',
-            '-o',
-            'fileno',
-            'my',
-            'sleep',
-            '-p',
-            'flock',
-            'next',
-            'socket',
-            '-r',
-            'fork',
-            'not',
-            'socketpair',
-            '-R',
-            'format',
-            'oct',
-            'sort',
-            '-S',
-            'formline',
-            'open',
-            'splice',
-            '-s',
-            'getc',
-            'opendir',
-            'split',
-            '-T',
-            'getgrent',
-            'ord',
-            'sprintf',
-            '-t',
-            'getgrgid',
-            'our',
-            'sqrt',
-            '-u',
-            'getgrnam',
-            'pack',
-            'srand',
-            '-w',
-            'gethostbyaddr',
-            'pipe',
-            'stat',
-            '-W',
-            'gethostbyname',
-            'pop',
-            'state',
-            '-X',
-            'gethostent',
-            'pos',
-            'study',
-            '-x',
-            'getlogin',
-            'print',
-            'substr',
-            '-z',
-            'getnetbyaddr',
-            'printf',
-            'symlink',
-            'abs',
-            'getnetbyname',
-            'prototype',
-            'syscall',
-            'accept',
-            'getnetent',
-            'push',
-            'sysopen',
-            'alarm',
-            'getpeername',
-            'quotemeta',
-            'sysread',
-            'atan2',
-            'getpgrp',
-            'rand',
-            'sysseek',
-            'AUTOLOAD',
-            'getppid',
-            'read',
-            'system',
-            'BEGIN',
-            'getpriority',
-            'readdir',
-            'syswrite',
-            'bind',
-            'getprotobyname',
-            'readline',
-            'tell',
-            'binmode',
-            'getprotobynumber',
-            'readlink',
-            'telldir',
-            'bless',
-            'getprotoent',
-            'readpipe',
-            'tie',
-            'break',
-            'getpwent',
-            'recv',
-            'tied',
-            'caller',
-            'getpwnam',
-            'redo',
-            'time',
-            'chdir',
-            'getpwuid',
-            'ref',
-            'times',
-            'CHECK',
-            'getservbyname',
-            'rename',
-            'truncate',
-            'chmod',
-            'getservbyport',
-            'require',
-            'uc',
-            'chomp',
-            'getservent',
-            'reset',
-            'ucfirst',
-            'chop',
-            'getsockname',
-            'return',
-            'umask',
-            'chown',
-            'getsockopt',
-            'reverse',
-            'undef',
-            'chr',
-            'glob',
-            'rewinddir',
-            'UNITCHECK',
-            'chroot',
-            'gmtime',
-            'rindex',
-            'unlink',
-            'close',
-            'goto',
-            'rmdir',
-            'unpack',
-            'closedir',
-            'grep',
-            'say',
-            'unshift',
-            'connect',
-            'hex',
-            'scalar',
-            'untie',
-            'cos',
-            'index',
-            'seek',
-            'use',
-            'crypt',
-            'INIT',
-            'seekdir',
-            'utime',
-            'dbmclose',
-            'int',
-            'select',
-            'values',
-            'dbmopen',
-            'ioctl',
-            'semctl',
-            'vec',
-            'defined',
-            'join',
-            'semget',
-            'wait',
-            'delete',
-            'keys',
-            'semop',
-            'waitpid',
-            'DESTROY',
-            'kill',
-            'send',
-            'wantarray',
-            'die',
-            'last',
-            'setgrent',
-            'warn',
-            'dump',
-            'lc',
-            'sethostent',
-            'write',
-            'each',
-            'lcfirst',
-            'setnetent',
-        ],
-        // File handlers
-        builtinFileHandlers: ['ARGV', 'STDERR', 'STDOUT', 'ARGVOUT', 'STDIN', 'ENV'],
-        // Perl variables
-        builtinVariables: [
-            '$!',
-            '$^RE_TRIE_MAXBUF',
-            '$LAST_REGEXP_CODE_RESULT',
-            '$"',
-            '$^S',
-            '$LIST_SEPARATOR',
-            '$#',
-            '$^T',
-            '$MATCH',
-            '$$',
-            '$^TAINT',
-            '$MULTILINE_MATCHING',
-            '$%',
-            '$^UNICODE',
-            '$NR',
-            '$&',
-            '$^UTF8LOCALE',
-            '$OFMT',
-            "$'",
-            '$^V',
-            '$OFS',
-            '$(',
-            '$^W',
-            '$ORS',
-            '$)',
-            '$^WARNING_BITS',
-            '$OS_ERROR',
-            '$*',
-            '$^WIDE_SYSTEM_CALLS',
-            '$OSNAME',
-            '$+',
-            '$^X',
-            '$OUTPUT_AUTO_FLUSH',
-            '$,',
-            '$_',
-            '$OUTPUT_FIELD_SEPARATOR',
-            '$-',
-            '$`',
-            '$OUTPUT_RECORD_SEPARATOR',
-            '$.',
-            '$a',
-            '$PERL_VERSION',
-            '$/',
-            '$ACCUMULATOR',
-            '$PERLDB',
-            '$0',
-            '$ARG',
-            '$PID',
-            '$:',
-            '$ARGV',
-            '$POSTMATCH',
-            '$;',
-            '$b',
-            '$PREMATCH',
-            '$<',
-            '$BASETIME',
-            '$PROCESS_ID',
-            '$=',
-            '$CHILD_ERROR',
-            '$PROGRAM_NAME',
-            '$>',
-            '$COMPILING',
-            '$REAL_GROUP_ID',
-            '$?',
-            '$DEBUGGING',
-            '$REAL_USER_ID',
-            '$@',
-            '$EFFECTIVE_GROUP_ID',
-            '$RS',
-            '$[',
-            '$EFFECTIVE_USER_ID',
-            '$SUBSCRIPT_SEPARATOR',
-            '$\\',
-            '$EGID',
-            '$SUBSEP',
-            '$]',
-            '$ERRNO',
-            '$SYSTEM_FD_MAX',
-            '$^',
-            '$EUID',
-            '$UID',
-            '$^A',
-            '$EVAL_ERROR',
-            '$WARNING',
-            '$^C',
-            '$EXCEPTIONS_BEING_CAUGHT',
-            '$|',
-            '$^CHILD_ERROR_NATIVE',
-            '$EXECUTABLE_NAME',
-            '$~',
-            '$^D',
-            '$EXTENDED_OS_ERROR',
-            '%!',
-            '$^E',
-            '$FORMAT_FORMFEED',
-            '%^H',
-            '$^ENCODING',
-            '$FORMAT_LINE_BREAK_CHARACTERS',
-            '%ENV',
-            '$^F',
-            '$FORMAT_LINES_LEFT',
-            '%INC',
-            '$^H',
-            '$FORMAT_LINES_PER_PAGE',
-            '%OVERLOAD',
-            '$^I',
-            '$FORMAT_NAME',
-            '%SIG',
-            '$^L',
-            '$FORMAT_PAGE_NUMBER',
-            '@+',
-            '$^M',
-            '$FORMAT_TOP_NAME',
-            '@-',
-            '$^N',
-            '$GID',
-            '@_',
-            '$^O',
-            '$INPLACE_EDIT',
-            '@ARGV',
-            '$^OPEN',
-            '$INPUT_LINE_NUMBER',
-            '@INC',
-            '$^P',
-            '$INPUT_RECORD_SEPARATOR',
-            '@LAST_MATCH_START',
-            '$^R',
-            '$LAST_MATCH_END',
-            '$^RE_DEBUG_FLAGS',
-            '$LAST_PAREN_MATCH',
-        ],
-        // operators
-        symbols: /[:+\-\^*$&%@=<>!?|\/~\.]/,
-        quoteLikeOps: ['qr', 'm', 's', 'q', 'qq', 'qx', 'qw', 'tr', 'y'],
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                { include: '@whitespace' },
-                [
-                    /[a-zA-Z\-_][\w\-_]*/,
-                    {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@builtinFunctions': 'type.identifier',
-                            '@builtinFileHandlers': 'variable.predefined',
-                            '@quoteLikeOps': { token: '@rematch', next: 'quotedConstructs' },
-                            '@default': '',
-                        },
-                    },
-                ],
-                // Perl variables
-                [
-                    /[\$@%][*@#?\+\-\$!\w\\\^><~:;\.]+/,
-                    {
-                        cases: {
-                            '@builtinVariables': 'variable.predefined',
-                            '@default': 'variable',
-                        },
-                    },
-                ],
-                { include: '@strings' },
-                { include: '@dblStrings' },
-                // Perl Doc
-                { include: '@perldoc' },
-                // Here Doc
-                { include: '@heredoc' },
-                [/[{}\[\]()]/, '@brackets'],
-                // RegExp
-                [
-                    /[\/](?:(?:\[(?:\\]|[^\]])+\])|(?:\\\/|[^\]\/]))*[\/]\w*\s*(?=[).,;]|$)/,
-                    'regexp',
-                ],
-                [/@symbols/, 'operators'],
-                { include: '@numbers' },
-                [/[,;]/, 'delimiter'],
-            ],
-            whitespace: [
-                [/\s+/, 'white'],
-                [/(^#!.*$)/, 'metatag'],
-                [/(^#.*$)/, 'comment'],
-            ],
-            numbers: [
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
-                [/\d+/, 'number'],
-            ],
-            // Single quote string
-            strings: [[/'/, 'string', '@stringBody']],
-            stringBody: [
-                [/'/, 'string', '@popall'],
-                [/\\'/, 'string.escape'],
-                [/./, 'string'],
-            ],
-            // Double quote string
-            dblStrings: [[/"/, 'string', '@dblStringBody']],
-            dblStringBody: [
-                [/"/, 'string', '@popall'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                { include: '@variables' },
-                [/./, 'string'],
-            ],
-            // Quoted constructs
-            // Percent strings in Ruby are similar to quote-like operators in Perl.
-            // This is adapted from pstrings in ../ruby/ruby.ts.
-            quotedConstructs: [
-                [/(q|qw|tr|y)\s*\(/, { token: 'string.delim', switchTo: '@qstring.(.)' }],
-                [/(q|qw|tr|y)\s*\[/, { token: 'string.delim', switchTo: '@qstring.[.]' }],
-                [/(q|qw|tr|y)\s*\{/, { token: 'string.delim', switchTo: '@qstring.{.}' }],
-                [/(q|qw|tr|y)\s*</, { token: 'string.delim', switchTo: '@qstring.<.>' }],
-                [/(q|qw|tr|y)#/, { token: 'string.delim', switchTo: '@qstring.#.#' }],
-                [/(q|qw|tr|y)\s*([^A-Za-z0-9#\s])/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],
-                [/(q|qw|tr|y)\s+(\w)/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],
-                [/(qr|m|s)\s*\(/, { token: 'regexp.delim', switchTo: '@qregexp.(.)' }],
-                [/(qr|m|s)\s*\[/, { token: 'regexp.delim', switchTo: '@qregexp.[.]' }],
-                [/(qr|m|s)\s*\{/, { token: 'regexp.delim', switchTo: '@qregexp.{.}' }],
-                [/(qr|m|s)\s*</, { token: 'regexp.delim', switchTo: '@qregexp.<.>' }],
-                [/(qr|m|s)#/, { token: 'regexp.delim', switchTo: '@qregexp.#.#' }],
-                [/(qr|m|s)\s*([^A-Za-z0-9_#\s])/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],
-                [/(qr|m|s)\s+(\w)/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],
-                [/(qq|qx)\s*\(/, { token: 'string.delim', switchTo: '@qqstring.(.)' }],
-                [/(qq|qx)\s*\[/, { token: 'string.delim', switchTo: '@qqstring.[.]' }],
-                [/(qq|qx)\s*\{/, { token: 'string.delim', switchTo: '@qqstring.{.}' }],
-                [/(qq|qx)\s*</, { token: 'string.delim', switchTo: '@qqstring.<.>' }],
-                [/(qq|qx)#/, { token: 'string.delim', switchTo: '@qqstring.#.#' }],
-                [/(qq|qx)\s*([^A-Za-z0-9#\s])/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }],
-                [/(qq|qx)\s+(\w)/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }],
-            ],
-            // Non-expanded quoted string
-            // qstring<open>.<close>
-            //  open = open delimiter
-            //  close = close delimiter
-            qstring: [
-                [/\\./, 'string.escape'],
-                [/./, {
-                        cases: {
-                            '$#==$S3': { token: 'string.delim', next: '@pop' },
-                            '$#==$S2': { token: 'string.delim', next: '@push' },
-                            '@default': 'string'
-                        }
-                    }],
-            ],
-            // Quoted regexp
-            // qregexp.<open>.<close>
-            //  open = open delimiter
-            //  close = close delimiter
-            qregexp: [
-                { include: '@variables' },
-                [/\\./, 'regexp.escape'],
-                [/./, {
-                        cases: {
-                            '$#==$S3': { token: 'regexp.delim', next: '@regexpModifiers' },
-                            '$#==$S2': { token: 'regexp.delim', next: '@push' },
-                            '@default': 'regexp'
-                        }
-                    }],
-            ],
-            regexpModifiers: [
-                [/[msixpodualngcer]+/, { token: 'regexp.modifier', next: '@popall' }],
-            ],
-            // Expanded quoted string
-            // qqstring.<open>.<close>
-            //  open = open delimiter
-            //  close = close delimiter
-            qqstring: [
-                { include: '@variables' },
-                { include: '@qstring' },
-            ],
-            heredoc: [
-                [
-                    /<<\s*['"`]?([\w\-]+)['"`]?/,
-                    { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' },
-                ],
-            ],
-            heredocBody: [
-                [
-                    /^([\w\-]+)$/,
-                    {
-                        cases: {
-                            '$1==$S2': [{ token: 'string.heredoc.delimiter', next: '@popall' }],
-                            '@default': 'string.heredoc',
-                        },
-                    },
-                ],
-                [/./, 'string.heredoc'],
-            ],
-            perldoc: [[/^=\w/, 'comment.doc', '@perldocBody']],
-            perldocBody: [
-                [/^=cut\b/, 'type.identifier', '@popall'],
-                [/./, 'comment.doc'],
-            ],
-            variables: [
-                [/\$\w+/, 'variable'],
-                [/@\w+/, 'variable'],
-                [/%\w+/, 'variable'],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/pgsql/pgsql.contribution.js b/node_modules/monaco-languages/release/dev/pgsql/pgsql.contribution.js
deleted file mode 100644
index ec4b76a..0000000
--- a/node_modules/monaco-languages/release/dev/pgsql/pgsql.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'pgsql',
-        extensions: [],
-        aliases: ['PostgreSQL', 'postgres', 'pg', 'postgre'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./pgsql'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/pgsql/pgsql.js b/node_modules/monaco-languages/release/dev/pgsql/pgsql.js
deleted file mode 100644
index d7f8cde..0000000
--- a/node_modules/monaco-languages/release/dev/pgsql/pgsql.js
+++ /dev/null
@@ -1,252 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '--',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.sql',
-        ignoreCase: true,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        keywords: [
-            "A", "ABORT", "ABS", "ABSENT", "ABSOLUTE", "ACCESS", "ACCORDING", "ACTION", "ADA", "ADD", "ADMIN", "AFTER", "AGGREGATE", "ALL",
-            "ALLOCATE", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARE", "ARRAY", "ARRAY_AGG", "ARRAY_MAX_CARDINALITY",
-            "AS", "ASC", "ASENSITIVE", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTE", "ATTRIBUTES", "AUTHORIZATION",
-            "AVG", "BACKWARD", "BASE64", "BEFORE", "BEGIN", "BEGIN_FRAME", "BEGIN_PARTITION", "BERNOULLI", "BETWEEN", "BIGINT", "BINARY",
-            "BIT", "BIT_LENGTH", "BLOB", "BLOCKED", "BOM", "BOOLEAN", "BOTH", "BREADTH", "BY", "C", "CACHE", "CALL", "CALLED", "CARDINALITY",
-            "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CATALOG_NAME", "CEIL", "CEILING", "CHAIN", "CHAR", "CHARACTER",
-            "CHARACTERISTICS", "CHARACTERS", "CHARACTER_LENGTH", "CHARACTER_SET_CATALOG", "CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA",
-            "CHAR_LENGTH", "CHECK", "CHECKPOINT", "CLASS", "CLASS_ORIGIN", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COBOL", "COLLATE",
-            "COLLATION", "COLLATION_CATALOG", "COLLATION_NAME", "COLLATION_SCHEMA", "COLLECT", "COLUMN", "COLUMNS", "COLUMN_NAME",
-            "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONDITION",
-            "CONDITION_NUMBER", "CONFIGURATION", "CONFLICT", "CONNECT", "CONNECTION", "CONNECTION_NAME", "CONSTRAINT", "CONSTRAINTS",
-            "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONSTRUCTOR", "CONTAINS", "CONTENT", "CONTINUE", "CONTROL",
-            "CONVERSION", "CONVERT", "COPY", "CORR", "CORRESPONDING", "COST", "COUNT", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CSV",
-            "CUBE", "CUME_DIST", "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH",
-            "CURRENT_ROLE", "CURRENT_ROW", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE",
-            "CURRENT_USER", "CURSOR", "CURSOR_NAME", "CYCLE", "DATA", "DATABASE", "DATALINK", "DATE", "DATETIME_INTERVAL_CODE",
-            "DATETIME_INTERVAL_PRECISION", "DAY", "DB", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
-            "DEFERRED", "DEFINED", "DEFINER", "DEGREE", "DELETE", "DELIMITER", "DELIMITERS", "DENSE_RANK", "DEPENDS", "DEPTH", "DEREF",
-            "DERIVED", "DESC", "DESCRIBE", "DESCRIPTOR", "DETERMINISTIC", "DIAGNOSTICS", "DICTIONARY", "DISABLE", "DISCARD", "DISCONNECT",
-            "DISPATCH", "DISTINCT", "DLNEWCOPY", "DLPREVIOUSCOPY", "DLURLCOMPLETE", "DLURLCOMPLETEONLY", "DLURLCOMPLETEWRITE", "DLURLPATH",
-            "DLURLPATHONLY", "DLURLPATHWRITE", "DLURLSCHEME", "DLURLSERVER", "DLVALUE", "DO", "DOCUMENT", "DOMAIN", "DOUBLE", "DROP",
-            "DYNAMIC", "DYNAMIC_FUNCTION", "DYNAMIC_FUNCTION_CODE", "EACH", "ELEMENT", "ELSE", "EMPTY", "ENABLE", "ENCODING", "ENCRYPTED",
-            "END", "END-EXEC", "END_FRAME", "END_PARTITION", "ENFORCED", "ENUM", "EQUALS", "ESCAPE", "EVENT", "EVERY", "EXCEPT", "EXCEPTION",
-            "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXEC", "EXECUTE", "EXISTS", "EXP", "EXPLAIN", "EXPRESSION", "EXTENSION", "EXTERNAL",
-            "EXTRACT", "FALSE", "FAMILY", "FETCH", "FILE", "FILTER", "FINAL", "FIRST", "FIRST_VALUE", "FLAG", "FLOAT", "FLOOR", "FOLLOWING",
-            "FOR", "FORCE", "FOREIGN", "FORTRAN", "FORWARD", "FOUND", "FRAME_ROW", "FREE", "FREEZE", "FROM", "FS", "FULL", "FUNCTION",
-            "FUNCTIONS", "FUSION", "G", "GENERAL", "GENERATED", "GET", "GLOBAL", "GO", "GOTO", "GRANT", "GRANTED", "GREATEST", "GROUP",
-            "GROUPING", "GROUPS", "HANDLER", "HAVING", "HEADER", "HEX", "HIERARCHY", "HOLD", "HOUR", "ID", "IDENTITY", "IF", "IGNORE",
-            "ILIKE", "IMMEDIATE", "IMMEDIATELY", "IMMUTABLE", "IMPLEMENTATION", "IMPLICIT", "IMPORT", "IN", "INCLUDING", "INCREMENT",
-            "INDENT", "INDEX", "INDEXES", "INDICATOR", "INHERIT", "INHERITS", "INITIALLY", "INLINE", "INNER", "INOUT", "INPUT",
-            "INSENSITIVE", "INSERT", "INSTANCE", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTEGRITY", "INTERSECT", "INTERSECTION",
-            "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "K", "KEY", "KEY_MEMBER", "KEY_TYPE", "LABEL", "LAG",
-            "LANGUAGE", "LARGE", "LAST", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", "LEAKPROOF", "LEAST", "LEFT", "LENGTH", "LEVEL",
-            "LIBRARY", "LIKE", "LIKE_REGEX", "LIMIT", "LINK", "LISTEN", "LN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
-            "LOCATOR", "LOCK", "LOCKED", "LOGGED", "LOWER", "M", "MAP", "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAX", "MAXVALUE",
-            "MAX_CARDINALITY", "MEMBER", "MERGE", "MESSAGE_LENGTH", "MESSAGE_OCTET_LENGTH", "MESSAGE_TEXT", "METHOD", "MIN", "MINUTE",
-            "MINVALUE", "MOD", "MODE", "MODIFIES", "MODULE", "MONTH", "MORE", "MOVE", "MULTISET", "MUMPS", "NAME", "NAMES", "NAMESPACE",
-            "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NESTING", "NEW", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NIL", "NO", "NONE",
-            "NORMALIZE", "NORMALIZED", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NTH_VALUE", "NTILE", "NULL", "NULLABLE", "NULLIF",
-            "NULLS", "NUMBER", "NUMERIC", "OBJECT", "OCCURRENCES_REGEX", "OCTETS", "OCTET_LENGTH", "OF", "OFF", "OFFSET", "OIDS", "OLD",
-            "ON", "ONLY", "OPEN", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDERING", "ORDINALITY", "OTHERS", "OUT", "OUTER",
-            "OUTPUT", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "P", "PAD", "PARALLEL", "PARAMETER", "PARAMETER_MODE",
-            "PARAMETER_NAME", "PARAMETER_ORDINAL_POSITION", "PARAMETER_SPECIFIC_CATALOG", "PARAMETER_SPECIFIC_NAME",
-            "PARAMETER_SPECIFIC_SCHEMA", "PARSER", "PARTIAL", "PARTITION", "PASCAL", "PASSING", "PASSTHROUGH", "PASSWORD", "PATH",
-            "PERCENT", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "PERIOD", "PERMISSION", "PLACING", "PLANS", "PLI", "POLICY",
-            "PORTION", "POSITION", "POSITION_REGEX", "POWER", "PRECEDES", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
-            "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLIC", "QUOTE", "RANGE", "RANK", "READ", "READS",
-            "REAL", "REASSIGN", "RECHECK", "RECOVERY", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REGR_AVGX", "REGR_AVGY",
-            "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "REINDEX", "RELATIVE", "RELEASE",
-            "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "REQUIRING", "RESET", "RESPECT", "RESTART", "RESTORE", "RESTRICT", "RESULT",
-            "RETURN", "RETURNED_CARDINALITY", "RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", "RETURNED_SQLSTATE", "RETURNING", "RETURNS",
-            "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINE_CATALOG", "ROUTINE_NAME", "ROUTINE_SCHEMA", "ROW", "ROWS",
-            "ROW_COUNT", "ROW_NUMBER", "RULE", "SAVEPOINT", "SCALE", "SCHEMA", "SCHEMA_NAME", "SCOPE", "SCOPE_CATALOG", "SCOPE_NAME",
-            "SCOPE_SCHEMA", "SCROLL", "SEARCH", "SECOND", "SECTION", "SECURITY", "SELECT", "SELECTIVE", "SELF", "SENSITIVE", "SEQUENCE",
-            "SEQUENCES", "SERIALIZABLE", "SERVER", "SERVER_NAME", "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW",
-            "SIMILAR", "SIMPLE", "SIZE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SPACE", "SPECIFIC", "SPECIFICTYPE",
-            "SPECIFIC_NAME", "SQL", "SQLCODE", "SQLERROR", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "STABLE", "STANDALONE",
-            "START", "STATE", "STATEMENT", "STATIC", "STATISTICS", "STDDEV_POP", "STDDEV_SAMP", "STDIN", "STDOUT", "STORAGE", "STRICT",
-            "STRIP", "STRUCTURE", "STYLE", "SUBCLASS_ORIGIN", "SUBMULTISET", "SUBSTRING", "SUBSTRING_REGEX", "SUCCEEDS", "SUM", "SYMMETRIC",
-            "SYSID", "SYSTEM", "SYSTEM_TIME", "SYSTEM_USER", "T", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TABLE_NAME", "TEMP",
-            "TEMPLATE", "TEMPORARY", "TEXT", "THEN", "TIES", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TOKEN",
-            "TOP_LEVEL_COUNT", "TRAILING", "TRANSACTION", "TRANSACTIONS_COMMITTED", "TRANSACTIONS_ROLLED_BACK", "TRANSACTION_ACTIVE",
-            "TRANSFORM", "TRANSFORMS", "TRANSLATE", "TRANSLATE_REGEX", "TRANSLATION", "TREAT", "TRIGGER", "TRIGGER_CATALOG", "TRIGGER_NAME",
-            "TRIGGER_SCHEMA", "TRIM", "TRIM_ARRAY", "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UESCAPE", "UNBOUNDED", "UNCOMMITTED",
-            "UNDER", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLINK", "UNLISTEN", "UNLOGGED", "UNNAMED", "UNNEST", "UNTIL", "UNTYPED",
-            "UPDATE", "UPPER", "URI", "USAGE", "USER", "USER_DEFINED_TYPE_CATALOG", "USER_DEFINED_TYPE_CODE", "USER_DEFINED_TYPE_NAME",
-            "USER_DEFINED_TYPE_SCHEMA", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES", "VALUE_OF", "VARBINARY",
-            "VARCHAR", "VARIADIC", "VARYING", "VAR_POP", "VAR_SAMP", "VERBOSE", "VERSION", "VERSIONING", "VIEW", "VIEWS", "VOLATILE",
-            "WHEN", "WHENEVER", "WHERE", "WHITESPACE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE",
-            "XML", "XMLAGG", "XMLATTRIBUTES", "XMLBINARY", "XMLCAST", "XMLCOMMENT", "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT",
-            "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLITERATE", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSCHEMA",
-            "XMLSERIALIZE", "XMLTABLE", "XMLTEXT", "XMLVALIDATE", "YEAR", "YES", "ZONE"
-        ],
-        operators: [
-            "AND", "BETWEEN", "IN", "LIKE", "NOT", "OR", "IS", "NULL", "INTERSECT", "UNION", "INNER", "JOIN", "LEFT", "OUTER", "RIGHT"
-        ],
-        builtinFunctions: [
-            "abbrev", "abs", "acos", "acosd", "age", "any", "area", "array_agg", "array_append", "array_cat", "array_dims", "array_fill",
-            "array_length", "array_lower", "array_ndims", "array_position", "array_positions", "array_prepend", "array_remove", "array_replace",
-            "array_to_json", "array_to_string", "array_to_tsvector", "array_upper", "ascii", "asin", "asind", "atan", "atan2", "atan2d", "atand",
-            "avg", "bit", "bit_and", "bit_length", "bit_or", "bool_and", "bool_or", "bound_box", "box", "brin_summarize_new_values", "broadcast",
-            "btrim", "cardinality", "cbrt", "ceil", "ceiling", "center", "char_length", "character_length", "chr", "circle", "clock_timestamp",
-            "coalesce", "col_description", "concat", "concat_ws", "convert", "convert_from", "convert_to", "corr", "cos", "cosd", "cot", "cotd",
-            "count", "covar_pop", "covar_samp", "cume_dist", "current_catalog", "current_database", "current_date", "current_query", "current_role",
-            "current_schema", "current_schemas", "current_setting", "current_time", "current_timestamp", "current_user", "currval", "cursor_to_xml",
-            "date_part", "date_trunc", "decode", "degrees", "dense_rank", "diameter", "div", "encode", "enum_first", "enum_last", "enum_range", "every",
-            "exp", "extract", "family", "first_value", "floor", "format", "format_type", "generate_series", "generate_subscripts", "get_bit", "get_byte",
-            "get_current_ts_config", "gin_clean_pending_list", "greatest", "grouping", "has_any_column_privilege", "has_column_privilege",
-            "has_database_privilege", "has_foreign_data_wrapper_privilege", "has_function_privilege", "has_language_privilege", "has_schema_privilege",
-            "has_sequence_privilege", "has_server_privilege", "has_table_privilege", "has_tablespace_privilege", "has_type_privilege", "height", "host",
-            "hostmask", "inet_client_addr", "inet_client_port", "inet_merge", "inet_same_family", "inet_server_addr", "inet_server_port", "initcap",
-            "isclosed", "isempty", "isfinite", "isopen", "json_agg", "json_object", "json_object_agg", "json_populate_record", "json_populate_recordset",
-            "json_to_record", "json_to_recordset", "jsonb_agg", "jsonb_object_agg", "justify_days", "justify_hours", "justify_interval", "lag",
-            "last_value", "lastval", "lead", "least", "left", "length", "line", "ln", "localtime", "localtimestamp", "log", "lower", "lower_inc",
-            "lower_inf", "lpad", "lseg", "ltrim", "make_date", "make_interval", "make_time", "make_timestamp", "make_timestamptz", "masklen", "max",
-            "md5", "min", "mod", "mode", "netmask", "network", "nextval", "now", "npoints", "nth_value", "ntile", "nullif", "num_nonnulls", "num_nulls",
-            "numnode", "obj_description", "octet_length", "overlay", "parse_ident", "path", "pclose", "percent_rank", "percentile_cont", "percentile_disc",
-            "pg_advisory_lock", "pg_advisory_lock_shared", "pg_advisory_unlock", "pg_advisory_unlock_all", "pg_advisory_unlock_shared", "pg_advisory_xact_lock",
-            "pg_advisory_xact_lock_shared", "pg_backend_pid", "pg_backup_start_time", "pg_blocking_pids", "pg_cancel_backend", "pg_client_encoding",
-            "pg_collation_is_visible", "pg_column_size", "pg_conf_load_time", "pg_control_checkpoint", "pg_control_init", "pg_control_recovery",
-            "pg_control_system", "pg_conversion_is_visible", "pg_create_logical_replication_slot", "pg_create_physical_replication_slot", "pg_create_restore_point",
-            "pg_current_xlog_flush_location", "pg_current_xlog_insert_location", "pg_current_xlog_location", "pg_database_size", "pg_describe_object",
-            "pg_drop_replication_slot", "pg_export_snapshot", "pg_filenode_relation", "pg_function_is_visible", "pg_get_constraintdef", "pg_get_expr",
-            "pg_get_function_arguments", "pg_get_function_identity_arguments", "pg_get_function_result", "pg_get_functiondef", "pg_get_indexdef", "pg_get_keywords",
-            "pg_get_object_address", "pg_get_owned_sequence", "pg_get_ruledef", "pg_get_serial_sequence", "pg_get_triggerdef", "pg_get_userbyid", "pg_get_viewdef",
-            "pg_has_role", "pg_identify_object", "pg_identify_object_as_address", "pg_index_column_has_property", "pg_index_has_property", "pg_indexam_has_property",
-            "pg_indexes_size", "pg_is_in_backup", "pg_is_in_recovery", "pg_is_other_temp_schema", "pg_is_xlog_replay_paused", "pg_last_committed_xact",
-            "pg_last_xact_replay_timestamp", "pg_last_xlog_receive_location", "pg_last_xlog_replay_location", "pg_listening_channels", "pg_logical_emit_message",
-            "pg_logical_slot_get_binary_changes", "pg_logical_slot_get_changes", "pg_logical_slot_peek_binary_changes", "pg_logical_slot_peek_changes", "pg_ls_dir",
-            "pg_my_temp_schema", "pg_notification_queue_usage", "pg_opclass_is_visible", "pg_operator_is_visible", "pg_opfamily_is_visible", "pg_options_to_table",
-            "pg_postmaster_start_time", "pg_read_binary_file", "pg_read_file", "pg_relation_filenode", "pg_relation_filepath", "pg_relation_size", "pg_reload_conf",
-            "pg_replication_origin_create", "pg_replication_origin_drop", "pg_replication_origin_oid", "pg_replication_origin_progress", "pg_replication_origin_session_is_setup",
-            "pg_replication_origin_session_progress", "pg_replication_origin_session_reset", "pg_replication_origin_session_setup", "pg_replication_origin_xact_reset",
-            "pg_replication_origin_xact_setup", "pg_rotate_logfile", "pg_size_bytes", "pg_size_pretty", "pg_sleep", "pg_sleep_for", "pg_sleep_until", "pg_start_backup",
-            "pg_stat_file", "pg_stop_backup", "pg_switch_xlog", "pg_table_is_visible", "pg_table_size", "pg_tablespace_databases", "pg_tablespace_location",
-            "pg_tablespace_size", "pg_terminate_backend", "pg_total_relation_size", "pg_trigger_depth", "pg_try_advisory_lock", "pg_try_advisory_lock_shared",
-            "pg_try_advisory_xact_lock", "pg_try_advisory_xact_lock_shared", "pg_ts_config_is_visible", "pg_ts_dict_is_visible", "pg_ts_parser_is_visible",
-            "pg_ts_template_is_visible", "pg_type_is_visible", "pg_typeof", "pg_xact_commit_timestamp", "pg_xlog_location_diff", "pg_xlog_replay_pause",
-            "pg_xlog_replay_resume", "pg_xlogfile_name", "pg_xlogfile_name_offset", "phraseto_tsquery", "pi", "plainto_tsquery", "point", "polygon", "popen", "position",
-            "power", "pqserverversion", "query_to_xml", "querytree", "quote_ident", "quote_literal", "quote_nullable", "radians", "radius", "random", "range_merge",
-            "rank", "regexp_matches", "regexp_replace", "regexp_split_to_array", "regexp_split_to_table", "regr_avgx", "regr_avgy", "regr_count", "regr_intercept",
-            "regr_r2", "regr_slope", "regr_sxx", "regr_sxy", "regr_syy", "repeat", "replace", "reverse", "right", "round", "row_number", "row_security_active",
-            "row_to_json", "rpad", "rtrim", "scale", "session_user", "set_bit", "set_byte", "set_config", "set_masklen", "setseed", "setval", "setweight",
-            "shobj_description", "sign", "sin", "sind", "split_part", "sprintf", "sqrt", "statement_timestamp", "stddev", "stddev_pop", "stddev_samp", "string_agg",
-            "string_to_array", "strip", "strpos", "substr", "substring", "sum", "table_to_xml", "table_to_xml_and_xmlschema", "tan", "tand", "text", "timeofday",
-            "timezone", "to_ascii", "to_char", "to_date", "to_hex", "to_json", "to_number", "to_regclass", "to_regnamespace", "to_regoper", "to_regoperator", "to_regproc",
-            "to_regprocedure", "to_regrole", "to_regtype", "to_timestamp", "to_tsquery", "to_tsvector", "transaction_timestamp", "translate", "trim", "trunc", "ts_debug",
-            "ts_delete", "ts_filter", "ts_headline", "ts_lexize", "ts_parse", "ts_rank", "ts_rank_cd", "ts_rewrite", "ts_stat", "ts_token_type", "tsquery_phrase",
-            "tsvector_to_array", "tsvector_update_trigger", "tsvector_update_trigger_column", "txid_current", "txid_current_snapshot", "txid_snapshot_xip", "txid_snapshot_xmax",
-            "txid_snapshot_xmin", "txid_visible_in_snapshot", "unnest", "upper", "upper_inc", "upper_inf", "user", "var_pop", "var_samp", "variance", "version", "width",
-            "width_bucket", "xml_is_well_formed", "xml_is_well_formed_content", "xml_is_well_formed_document", "xmlagg", "xmlcomment", "xmlconcat", "xmlelement", "xmlexists",
-            "xmlforest", "xmlparse", "xmlpi", "xmlroot", "xmlserialize", "xpath", "xpath_exists"
-        ],
-        builtinVariables: [
-        // NOT SUPPORTED
-        ],
-        pseudoColumns: [
-        // NOT SUPPORTED
-        ],
-        tokenizer: {
-            root: [
-                { include: '@comments' },
-                { include: '@whitespace' },
-                { include: '@pseudoColumns' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@complexIdentifiers' },
-                { include: '@scopes' },
-                [/[;,.]/, 'delimiter'],
-                [/[()]/, '@brackets'],
-                [/[\w@#$]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@operators': 'operator',
-                            '@builtinVariables': 'predefined',
-                            '@builtinFunctions': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=!%&+\-*/|~^]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white']
-            ],
-            comments: [
-                [/--+.*/, 'comment'],
-                [/\/\*/, { token: 'comment.quote', next: '@comment' }]
-            ],
-            comment: [
-                [/[^*/]+/, 'comment'],
-                // Not supporting nested comments, as nested comments seem to not be standard?
-                // i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic
-                // [/\/\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(
-                [/\*\//, { token: 'comment.quote', next: '@pop' }],
-                [/./, 'comment']
-            ],
-            pseudoColumns: [
-                [/[$][A-Za-z_][\w@#$]*/, {
-                        cases: {
-                            '@pseudoColumns': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*/, 'number'],
-                [/[$][+-]*\d*(\.\d*)?/, 'number'],
-                [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number']
-            ],
-            strings: [
-                [/'/, { token: 'string', next: '@string' }],
-            ],
-            string: [
-                [/[^']+/, 'string'],
-                [/''/, 'string'],
-                [/'/, { token: 'string', next: '@pop' }]
-            ],
-            complexIdentifiers: [
-                [/"/, { token: 'identifier.quote', next: '@quotedIdentifier' }]
-            ],
-            quotedIdentifier: [
-                [/[^"]+/, 'identifier'],
-                [/""/, 'identifier'],
-                [/"/, { token: 'identifier.quote', next: '@pop' }]
-            ],
-            scopes: [
-            // NOT SUPPORTED
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/php/php.contribution.js b/node_modules/monaco-languages/release/dev/php/php.contribution.js
deleted file mode 100644
index ca55123..0000000
--- a/node_modules/monaco-languages/release/dev/php/php.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'php',
-        extensions: ['.php', '.php4', '.php5', '.phtml', '.ctp'],
-        aliases: ['PHP', 'php'],
-        mimetypes: ['application/x-php'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./php'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/php/php.js b/node_modules/monaco-languages/release/dev/php/php.js
deleted file mode 100644
index 1db860c..0000000
--- a/node_modules/monaco-languages/release/dev/php/php.js
+++ /dev/null
@@ -1,367 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/']
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}', notIn: ['string'] },
-            { open: '[', close: ']', notIn: ['string'] },
-            { open: '(', close: ')', notIn: ['string'] },
-            { open: '"', close: '"', notIn: ['string'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] }
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*(#|\/\/)region\\b"),
-                end: new RegExp("^\\s*(#|\/\/)endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '',
-        // ignoreCase: true,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.root' }],
-                [/<!DOCTYPE/, 'metatag.html', '@doctype'],
-                [/<!--/, 'comment.html', '@comment'],
-                [/(<)(\w+)(\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],
-                [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],
-                [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],
-                [/(<)([:\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/(<\/)(\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/</, 'delimiter.html'],
-                [/[^<]+/] // text
-            ],
-            doctype: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.comment' }],
-                [/[^>]+/, 'metatag.content.html'],
-                [/>/, 'metatag.html', '@pop'],
-            ],
-            comment: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.comment' }],
-                [/-->/, 'comment.html', '@pop'],
-                [/[^-]+/, 'comment.content.html'],
-                [/./, 'comment.content.html']
-            ],
-            otherTag: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.otherTag' }],
-                [/\/?>/, 'delimiter.html', '@pop'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-            ],
-            // -- BEGIN <script> tags handling
-            // After <script
-            script: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.script' }],
-                [/type/, 'attribute.name', '@scriptAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(script\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <script ... type
-            scriptAfterType: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.scriptAfterType' }],
-                [/=/, 'delimiter', '@scriptAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type =
-            scriptAfterTypeEquals: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.scriptAfterTypeEquals' }],
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type = $S2
-            scriptWithCustomType: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.scriptWithCustomType.$S2' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            scriptEmbedded: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],
-                [/<\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            // -- END <script> tags handling
-            // -- BEGIN <style> tags handling
-            // After <style
-            style: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.style' }],
-                [/type/, 'attribute.name', '@styleAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(style\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <style ... type
-            styleAfterType: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.styleAfterType' }],
-                [/=/, 'delimiter', '@styleAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type =
-            styleAfterTypeEquals: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.styleAfterTypeEquals' }],
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type = $S2
-            styleWithCustomType: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.styleWithCustomType.$S2' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            styleEmbedded: [
-                [/<\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],
-                [/<\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            // -- END <style> tags handling
-            phpInSimpleState: [
-                [/<\?((php)|=)?/, 'metatag.php'],
-                [/\?>/, { token: 'metatag.php', switchTo: '@$S2.$S3' }],
-                { include: 'phpRoot' }
-            ],
-            phpInEmbeddedState: [
-                [/<\?((php)|=)?/, 'metatag.php'],
-                [/\?>/, { token: 'metatag.php', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],
-                { include: 'phpRoot' }
-            ],
-            phpRoot: [
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@phpKeywords': { token: 'keyword.php' },
-                            '@phpCompileTimeConstants': { token: 'constant.php' },
-                            '@default': 'identifier.php'
-                        }
-                    }],
-                [/[$a-zA-Z_]\w*/, {
-                        cases: {
-                            '@phpPreDefinedVariables': { token: 'variable.predefined.php' },
-                            '@default': 'variable.php'
-                        }
-                    }],
-                // brackets
-                [/[{}]/, 'delimiter.bracket.php'],
-                [/[\[\]]/, 'delimiter.array.php'],
-                [/[()]/, 'delimiter.parenthesis.php'],
-                // whitespace
-                [/[ \t\r\n]+/],
-                // comments
-                [/(#|\/\/)$/, 'comment.php'],
-                [/(#|\/\/)/, 'comment.php', '@phpLineComment'],
-                // block comments
-                [/\/\*/, 'comment.php', '@phpComment'],
-                // strings
-                [/"/, 'string.php', '@phpDoubleQuoteString'],
-                [/'/, 'string.php', '@phpSingleQuoteString'],
-                // delimiters
-                [/[\+\-\*\%\&\|\^\~\!\=\<\>\/\?\;\:\.\,\@]/, 'delimiter.php'],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?/, 'number.float.php'],
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float.php'],
-                [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.php'],
-                [/0[0-7']*[0-7]/, 'number.octal.php'],
-                [/0[bB][0-1']*[0-1]/, 'number.binary.php'],
-                [/\d[\d']*/, 'number.php'],
-                [/\d/, 'number.php'],
-            ],
-            phpComment: [
-                [/\*\//, 'comment.php', '@pop'],
-                [/[^*]+/, 'comment.php'],
-                [/./, 'comment.php']
-            ],
-            phpLineComment: [
-                [/\?>/, { token: '@rematch', next: '@pop' }],
-                [/.$/, 'comment.php', '@pop'],
-                [/[^?]+$/, 'comment.php', '@pop'],
-                [/[^?]+/, 'comment.php'],
-                [/./, 'comment.php']
-            ],
-            phpDoubleQuoteString: [
-                [/[^\\"]+/, 'string.php'],
-                [/@escapes/, 'string.escape.php'],
-                [/\\./, 'string.escape.invalid.php'],
-                [/"/, 'string.php', '@pop']
-            ],
-            phpSingleQuoteString: [
-                [/[^\\']+/, 'string.php'],
-                [/@escapes/, 'string.escape.php'],
-                [/\\./, 'string.escape.invalid.php'],
-                [/'/, 'string.php', '@pop']
-            ],
-        },
-        phpKeywords: [
-            'abstract', 'and', 'array', 'as', 'break',
-            'callable', 'case', 'catch', 'cfunction', 'class', 'clone',
-            'const', 'continue', 'declare', 'default', 'do',
-            'else', 'elseif', 'enddeclare', 'endfor', 'endforeach',
-            'endif', 'endswitch', 'endwhile', 'extends', 'false', 'final',
-            'for', 'foreach', 'function', 'global', 'goto',
-            'if', 'implements', 'interface', 'instanceof', 'insteadof',
-            'namespace', 'new', 'null', 'object', 'old_function', 'or', 'private',
-            'protected', 'public', 'resource', 'static', 'switch', 'throw', 'trait',
-            'try', 'true', 'use', 'var', 'while', 'xor',
-            'die', 'echo', 'empty', 'exit', 'eval',
-            'include', 'include_once', 'isset', 'list', 'require',
-            'require_once', 'return', 'print', 'unset', 'yield',
-            '__construct'
-        ],
-        phpCompileTimeConstants: [
-            '__CLASS__',
-            '__DIR__',
-            '__FILE__',
-            '__LINE__',
-            '__NAMESPACE__',
-            '__METHOD__',
-            '__FUNCTION__',
-            '__TRAIT__'
-        ],
-        phpPreDefinedVariables: [
-            '$GLOBALS',
-            '$_SERVER',
-            '$_GET',
-            '$_POST',
-            '$_FILES',
-            '$_REQUEST',
-            '$_SESSION',
-            '$_ENV',
-            '$_COOKIE',
-            '$php_errormsg',
-            '$HTTP_RAW_POST_DATA',
-            '$http_response_header',
-            '$argc',
-            '$argv'
-        ],
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-    };
-});
-// TESTED WITH
-// <style type="text/css" >
-//   .boo { background: blue;
-//   <?=''?>
-//   }
-//   .boo { background: blue;  <?=''?>  }
-// </style>
-// <!--
-// <?= '' ?>
-// -->
-// <?php
-// // The next line contains a syntax error:
-// __construct
-// if () {
-// 	return "The parser recovers from this type of syntax error";
-// }
-// ?>
-// <html>
-// <head>
-// 	<title <?=''?>>Example page</title>
-//   <style <?=''?>>
-//     .boo { background: blue; <?=''?> }
-//   </style>
-// </head>
-// <body>
-// <script <?=''?> type<?=''?>=<?=''?>"text/javascript"<?=''?>>
-// 	// Some PHP embedded inside JS
-// 	// Generated <?=date('l, F jS, Y')?>
-// 	var server_token = <?=rand(5, 10000)?>
-// 	if (typeof server_token === 'number') {
-// 		alert('token: ' + server_token);
-// 	}
-// </script>
-// <div>
-// Hello
-// <? if (isset($user)) { ?>
-// 	<b><?=$user?></b>
-// <? } else { ?>
-// 	<i>guest</i>
-// <? } ?>
-// !
-// </div>
-// <?php
-// 	/* Example PHP file
-// 	multiline comment
-// 	*/
-//  # Another single line comment
-// 	$cards = array("ah", "ac", "ad", "as",
-// 		"2h", "2c", "2d", "2s",
-// 		"3h", "3c", "3d", "3s",
-// 		"4h", "4c", "4d", "4s",
-// 		"5h", "5c", "5d", "5s",
-// 		"6h", "6c", "6d", "6s",
-// 		"7h", "7c", "7d", "7s",
-// 		"8h", "8c", "8d", "8s",
-// 		"9h", "9c", "9d", "9s",
-// 		"th", "tc", "td", "ts",
-// 		"jh", "jc", "jd", "js",
-// 		"qh", "qc", "qd", "qs",
-// 		"kh", "kc", "kd", "ks");
-// 	srand(time());
-// 	for($i = 0; $i < 52; $i++) {
-// 		$count = count($cards);
-// 		$random = (rand()%$count);
-// 		if($cards[$random] == "") {
-// 			$i--;
-// 		} else {
-// 			$deck[] = $cards[$random];
-// 			$cards[$random] = "";
-// 		}
-// 	}
-// $_GET
-// __CLASS__
-// 	srand(time());
-// 	$starting_point = (rand()%51);
-// 	print("Starting point for cut cards is: $starting_point<p>");
-// 	// display shuffled cards (EXAMPLE ONLY)
-// 	for ($index = 0; $index < 52; $index++) {
-// 		if ($starting_point == 52) { $starting_point = 0; }
-// 		print("Uncut Point: <strong>$deck[$index]</strong> ");
-// 		print("Starting Point: <strong>$deck[$starting_point]</strong><br>");
-// 		$starting_point++;
-// 	}
-// ?>
-// </body>
-// </html>
diff --git a/node_modules/monaco-languages/release/dev/postiats/postiats.contribution.js b/node_modules/monaco-languages/release/dev/postiats/postiats.contribution.js
deleted file mode 100644
index 4258a31..0000000
--- a/node_modules/monaco-languages/release/dev/postiats/postiats.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'postiats',
-        extensions: ['.dats', '.sats', '.hats'],
-        aliases: ['ATS', 'ATS/Postiats'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./postiats'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/postiats/postiats.js b/node_modules/monaco-languages/release/dev/postiats/postiats.js
deleted file mode 100644
index ec0ae87..0000000
--- a/node_modules/monaco-languages/release/dev/postiats/postiats.js
+++ /dev/null
@@ -1,615 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Artyom Shalkhakov. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *
- *  Based on the ATS/Postiats lexer by Hongwei Xi.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['(*', '*)'],
-        },
-        brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-        ]
-    };
-    exports.language = {
-        tokenPostfix: '.pats',
-        // TODO: staload and dynload are followed by a special kind of string literals
-        // with {$IDENTIFER} variables, and it also may make sense to highlight
-        // the punctuation (. and / and \) differently.
-        // Set defaultToken to invalid to see what you do not tokenize yet
-        defaultToken: 'invalid',
-        // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats
-        keywords: [
-            //
-            "abstype",
-            "abst0ype",
-            "absprop",
-            "absview",
-            "absvtype",
-            "absviewtype",
-            "absvt0ype",
-            "absviewt0ype",
-            //
-            "as",
-            //
-            "and",
-            //
-            "assume",
-            //
-            "begin",
-            //
-            /*
-                    "case", // CASE
-            */
-            //
-            "classdec",
-            //
-            "datasort",
-            //
-            "datatype",
-            "dataprop",
-            "dataview",
-            "datavtype",
-            "dataviewtype",
-            //
-            "do",
-            //
-            "end",
-            //
-            "extern",
-            "extype",
-            "extvar",
-            //
-            "exception",
-            //
-            "fn",
-            "fnx",
-            "fun",
-            //
-            "prfn",
-            "prfun",
-            //
-            "praxi",
-            "castfn",
-            //
-            "if",
-            "then",
-            "else",
-            //
-            "ifcase",
-            //
-            "in",
-            //
-            "infix",
-            "infixl",
-            "infixr",
-            "prefix",
-            "postfix",
-            //
-            "implmnt",
-            "implement",
-            //
-            "primplmnt",
-            "primplement",
-            //
-            "import",
-            //
-            /*
-                    "lam", // LAM
-                    "llam", // LLAM
-                    "fix", // FIX
-            */
-            //
-            "let",
-            //
-            "local",
-            //
-            "macdef",
-            "macrodef",
-            //
-            "nonfix",
-            //
-            "symelim",
-            "symintr",
-            "overload",
-            //
-            "of",
-            "op",
-            //
-            "rec",
-            //
-            "sif",
-            "scase",
-            //
-            "sortdef",
-            /*
-            // HX: [sta] is now deprecated
-            */
-            "sta",
-            "stacst",
-            "stadef",
-            "static",
-            /*
-                    "stavar", // T_STAVAR
-            */
-            //
-            "staload",
-            "dynload",
-            //
-            "try",
-            //
-            "tkindef",
-            //
-            /*
-                    "type", // TYPE
-            */
-            "typedef",
-            "propdef",
-            "viewdef",
-            "vtypedef",
-            "viewtypedef",
-            //
-            /*
-                    "val", // VAL
-            */
-            "prval",
-            //
-            "var",
-            "prvar",
-            //
-            "when",
-            "where",
-            //
-            /*
-                    "for", // T_FOR
-                    "while", // T_WHILE
-            */
-            //
-            "with",
-            //
-            "withtype",
-            "withprop",
-            "withview",
-            "withvtype",
-            "withviewtype",
-        ],
-        keywords_dlr: [
-            "$delay",
-            "$ldelay",
-            //
-            "$arrpsz",
-            "$arrptrsize",
-            //
-            "$d2ctype",
-            //
-            "$effmask",
-            "$effmask_ntm",
-            "$effmask_exn",
-            "$effmask_ref",
-            "$effmask_wrt",
-            "$effmask_all",
-            //
-            "$extern",
-            "$extkind",
-            "$extype",
-            "$extype_struct",
-            //
-            "$extval",
-            "$extfcall",
-            "$extmcall",
-            //
-            "$literal",
-            //
-            "$myfilename",
-            "$mylocation",
-            "$myfunction",
-            //
-            "$lst",
-            "$lst_t",
-            "$lst_vt",
-            "$list",
-            "$list_t",
-            "$list_vt",
-            //
-            "$rec",
-            "$rec_t",
-            "$rec_vt",
-            "$record",
-            "$record_t",
-            "$record_vt",
-            //
-            "$tup",
-            "$tup_t",
-            "$tup_vt",
-            "$tuple",
-            "$tuple_t",
-            "$tuple_vt",
-            //
-            "$break",
-            "$continue",
-            //
-            "$raise",
-            //
-            "$showtype",
-            //
-            "$vcopyenv_v",
-            "$vcopyenv_vt",
-            //
-            "$tempenver",
-            //
-            "$solver_assert",
-            "$solver_verify",
-        ],
-        keywords_srp: [
-            //
-            "#if",
-            "#ifdef",
-            "#ifndef",
-            //
-            "#then",
-            //
-            "#elif",
-            "#elifdef",
-            "#elifndef",
-            //
-            "#else",
-            "#endif",
-            //
-            "#error",
-            //
-            "#prerr",
-            "#print",
-            //
-            "#assert",
-            //
-            "#undef",
-            "#define",
-            //
-            "#include",
-            "#require",
-            //
-            "#pragma",
-            "#codegen2",
-            "#codegen3",
-        ],
-        irregular_keyword_list: [
-            "val+",
-            "val-",
-            "val",
-            "case+",
-            "case-",
-            "case",
-            "addr@",
-            "addr",
-            "fold@",
-            "free@",
-            "fix@",
-            "fix",
-            "lam@",
-            "lam",
-            "llam@",
-            "llam",
-            "viewt@ype+",
-            "viewt@ype-",
-            "viewt@ype",
-            "viewtype+",
-            "viewtype-",
-            "viewtype",
-            "view+",
-            "view-",
-            "view@",
-            "view",
-            "type+",
-            "type-",
-            "type",
-            "vtype+",
-            "vtype-",
-            "vtype",
-            "vt@ype+",
-            "vt@ype-",
-            "vt@ype",
-            "viewt@ype+",
-            "viewt@ype-",
-            "viewt@ype",
-            "viewtype+",
-            "viewtype-",
-            "viewtype",
-            "prop+",
-            "prop-",
-            "prop",
-            "type+",
-            "type-",
-            "type",
-            "t@ype",
-            "t@ype+",
-            "t@ype-",
-            "abst@ype",
-            "abstype",
-            "absviewt@ype",
-            "absvt@ype",
-            "for*",
-            "for",
-            "while*",
-            "while"
-        ],
-        keywords_types: [
-            'bool',
-            'double',
-            'byte',
-            'int',
-            'short',
-            'char',
-            'void',
-            'unit',
-            'long',
-            'float',
-            'string',
-            'strptr'
-        ],
-        // TODO: reference for this?
-        keywords_effects: [
-            "0",
-            "fun",
-            "clo",
-            "prf",
-            "funclo",
-            "cloptr",
-            "cloref",
-            "ref",
-            "ntm",
-            "1" // all effects
-        ],
-        operators: [
-            "@",
-            "!",
-            "|",
-            "`",
-            ":",
-            "$",
-            ".",
-            "=",
-            "#",
-            "~",
-            //
-            "..",
-            "...",
-            //
-            "=>",
-            // "=<", // T_EQLT
-            "=<>",
-            "=/=>",
-            "=>>",
-            "=/=>>",
-            //
-            "<",
-            ">",
-            //
-            "><",
-            //
-            ".<",
-            ">.",
-            //
-            ".<>.",
-            //
-            "->",
-            //"-<", // T_MINUSLT
-            "-<>",
-        ],
-        brackets: [
-            { open: ',(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '`(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '%(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '\'(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '\'{', close: '}', token: 'delimiter.parenthesis' },
-            { open: '@(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '@{', close: '}', token: 'delimiter.brace' },
-            { open: '@[', close: ']', token: 'delimiter.square' },
-            { open: '#[', close: ']', token: 'delimiter.square' },
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        IDENTFST: /[a-zA-Z_]/,
-        IDENTRST: /[a-zA-Z0-9_'$]/,
-        symbolic: /[%&+-./:=@~`^|*!$#?<>]/,
-        digit: /[0-9]/,
-        digitseq0: /@digit*/,
-        xdigit: /[0-9A-Za-z]/,
-        xdigitseq0: /@xdigit*/,
-        INTSP: /[lLuU]/,
-        FLOATSP: /[fFlL]/,
-        fexponent: /[eE][+-]?[0-9]+/,
-        fexponent_bin: /[pP][+-]?[0-9]+/,
-        deciexp: /\.[0-9]*@fexponent?/,
-        hexiexp: /\.[0-9a-zA-Z]*@fexponent_bin?/,
-        irregular_keywords: /val[+-]?|case[+-]?|addr\@?|fold\@|free\@|fix\@?|lam\@?|llam\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\*?|while\*?/,
-        ESCHAR: /[ntvbrfa\\\?'"\(\[\{]/,
-        start: 'root',
-        // The main tokenizer for ATS/Postiats
-        // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats
-        tokenizer: {
-            root: [
-                // lexing_blankseq0
-                { regex: /[ \t\r\n]+/, action: { token: '' } },
-                // NOTE: (*) is an invalid ML-like comment!
-                { regex: /\(\*\)/, action: { token: 'invalid' } },
-                { regex: /\(\*/, action: { token: 'comment', next: 'lexing_COMMENT_block_ml' } },
-                { regex: /\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },
-                { regex: /\)/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },
-                { regex: /\[/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },
-                { regex: /\]/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },
-                { regex: /\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },
-                { regex: /\}/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },
-                // lexing_COMMA
-                { regex: /,\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },
-                { regex: /,/, action: { token: 'delimiter.comma' } },
-                { regex: /;/, action: { token: 'delimiter.semicolon' } },
-                // lexing_AT
-                { regex: /@\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },
-                { regex: /@\[/, action: '@brackets' /* { token: 'delimiter.bracket' }*/ },
-                { regex: /@\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },
-                // lexing_COLON
-                { regex: /:</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },
-                /*
-                lexing_DOT:
-    
-                . // SYMBOLIC => lexing_IDENT_sym
-                . FLOATDOT => lexing_FLOAT_deciexp
-                . DIGIT => T_DOTINT
-                */
-                { regex: /\.@symbolic+/, action: { token: 'identifier.sym' } },
-                // FLOATDOT case
-                { regex: /\.@digit*@fexponent@FLOATSP*/, action: { token: 'number.float' } },
-                { regex: /\.@digit+/, action: { token: 'number.float' } },
-                // lexing_DOLLAR:
-                // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym
-                {
-                    regex: /\$@IDENTFST@IDENTRST*/,
-                    action: {
-                        cases: {
-                            '@keywords_dlr': { token: 'keyword.dlr' },
-                            '@default': { token: 'namespace' },
-                        }
-                    }
-                },
-                // lexing_SHARP:
-                // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym
-                {
-                    regex: /\#@IDENTFST@IDENTRST*/,
-                    action: {
-                        cases: {
-                            '@keywords_srp': { token: 'keyword.srp' },
-                            '@default': { token: 'identifier' },
-                        }
-                    }
-                },
-                // lexing_PERCENT:
-                { regex: /%\(/, action: { token: 'delimiter.parenthesis' } },
-                { regex: /^%{(#|\^|\$)?/, action: { token: 'keyword', next: '@lexing_EXTCODE', nextEmbedded: 'text/javascript' } },
-                { regex: /^%}/, action: { token: 'keyword' } },
-                // lexing_QUOTE
-                { regex: /'\(/, action: { token: 'delimiter.parenthesis' } },
-                { regex: /'\[/, action: { token: 'delimiter.bracket' } },
-                { regex: /'\{/, action: { token: 'delimiter.brace' } },
-                [/(')(\\@ESCHAR|\\[xX]@xdigit+|\\@digit+)(')/, ['string', 'string.escape', 'string']],
-                [/'[^\\']'/, 'string'],
-                // lexing_DQUOTE
-                [/"/, 'string.quote', '@lexing_DQUOTE'],
-                // lexing_BQUOTE
-                { regex: /`\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },
-                // TODO: otherwise, try lexing_IDENT_sym
-                { regex: /\\/, action: { token: 'punctuation' } },
-                // lexing_IDENT_alp:
-                // NOTE: (?!regex) is syntax for "not-followed-by" regex
-                // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!
-                { regex: /@irregular_keywords(?!@IDENTRST)/, action: { token: 'keyword' } },
-                {
-                    regex: /@IDENTFST@IDENTRST*[<!\[]?/,
-                    action: {
-                        cases: {
-                            // TODO: dynload and staload should be specially parsed
-                            // dynload whitespace+ "special_string"
-                            // this special string is really:
-                            //  '/' '\\' '.' => punctuation
-                            // ({\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation
-                            // [^"] => identifier/literal
-                            '@keywords': { token: 'keyword' },
-                            '@keywords_types': { token: 'type' },
-                            '@default': { token: 'identifier' }
-                        }
-                    }
-                },
-                // lexing_IDENT_sym:
-                { regex: /\/\/\/\//, action: { token: 'comment', next: '@lexing_COMMENT_rest' } },
-                { regex: /\/\/.*$/, action: { token: 'comment' } },
-                { regex: /\/\*/, action: { token: 'comment', next: '@lexing_COMMENT_block_c' } },
-                // AS-20160627: specifically for effect annotations
-                { regex: /-<|=</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },
-                {
-                    regex: /@symbolic+/,
-                    action: {
-                        cases: {
-                            '@operators': 'keyword',
-                            '@default': 'operator'
-                        }
-                    }
-                },
-                // lexing_ZERO:
-                // FIXME: this one is quite messy/unfinished yet
-                // TODO: lexing_INT_hex
-                // - testing_hexiexp => lexing_FLOAT_hexiexp
-                // - testing_fexponent_bin => lexing_FLOAT_hexiexp
-                // - testing_intspseq0 => T_INT_hex
-                // lexing_INT_hex:
-                { regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/, action: { token: 'number.float' } },
-                { regex: /0[xX]@xdigit+@INTSP*/, action: { token: 'number.hex' } },
-                { regex: /0[0-7]+(?![0-9])@INTSP*/, action: { token: 'number.octal' } },
-                //{regex: /0/, action: { token: 'number' } }, // INTZERO
-                // lexing_INT_dec:
-                // - testing_deciexp => lexing_FLOAT_deciexp
-                // - testing_fexponent => lexing_FLOAT_deciexp
-                // - otherwise => intspseq0 ([0-9]*[lLuU]?)
-                { regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/, action: { token: 'number.float' } },
-                { regex: /@digit@digitseq0@INTSP*/, action: { token: 'number.decimal' } },
-                // DIGIT, if followed by digitseq0, is lexing_INT_dec
-                { regex: /@digit+@INTSP*/, action: { token: 'number' } },
-            ],
-            lexing_COMMENT_block_ml: [
-                [/[^\(\*]+/, 'comment'],
-                [/\(\*/, 'comment', '@push'],
-                [/\(\*/, 'comment.invalid'],
-                [/\*\)/, 'comment', '@pop'],
-                [/\*/, 'comment']
-            ],
-            lexing_COMMENT_block_c: [
-                [/[^\/*]+/, 'comment'],
-                // [/\/\*/, 'comment', '@push' ],    // nested C-style block comments not allowed
-                // [/\/\*/,    'comment.invalid' ],	// NOTE: this breaks block comments in the shape of /* //*/
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            lexing_COMMENT_rest: [
-                [/$/, 'comment', '@pop'],
-                [/.*/, 'comment']
-            ],
-            // NOTE: added by AS, specifically for highlighting
-            lexing_EFFECT_commaseq0: [
-                {
-                    regex: /@IDENTFST@IDENTRST+|@digit+/,
-                    action: {
-                        cases: {
-                            '@keywords_effects': { token: 'type.effect' },
-                            '@default': { token: 'identifier' }
-                        }
-                    }
-                },
-                { regex: /,/, action: { token: 'punctuation' } },
-                { regex: />/, action: { token: '@rematch', next: '@pop' } },
-            ],
-            lexing_EXTCODE: [
-                { regex: /^%}/, action: { token: '@rematch', next: '@pop', nextEmbedded: '@pop' } },
-                { regex: /[^%]+/, action: '' },
-            ],
-            lexing_DQUOTE: [
-                { regex: /"/, action: { token: 'string.quote', next: '@pop' } },
-                // AS-20160628: additional hi-lighting for variables in staload/dynload strings
-                { regex: /(\{\$)(@IDENTFST@IDENTRST*)(\})/, action: [{ token: 'string.escape' }, { token: 'identifier' }, { token: 'string.escape' }] },
-                { regex: /\\$/, action: { token: 'string.escape' } },
-                { regex: /\\(@ESCHAR|[xX]@xdigit+|@digit+)/, action: { token: 'string.escape' } },
-                { regex: /[^\\"]+/, action: { token: 'string' } }
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/powerquery/powerquery.contribution.js b/node_modules/monaco-languages/release/dev/powerquery/powerquery.contribution.js
deleted file mode 100644
index e0a33e3..0000000
--- a/node_modules/monaco-languages/release/dev/powerquery/powerquery.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'powerquery',
-        extensions: ['.pq', '.pqm'],
-        aliases: ['PQ', 'M', 'Power Query', 'Power Query M'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./powerquery'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/powerquery/powerquery.js b/node_modules/monaco-languages/release/dev/powerquery/powerquery.js
deleted file mode 100644
index 664a2f7..0000000
--- a/node_modules/monaco-languages/release/dev/powerquery/powerquery.js
+++ /dev/null
@@ -1,909 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [['[', ']'], ['(', ')'], ['{', '}']],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment', 'identifier'] },
-            { open: '[', close: ']', notIn: ['string', 'comment', 'identifier'] },
-            { open: '(', close: ')', notIn: ['string', 'comment', 'identifier'] },
-            { open: '{', close: '}', notIn: ['string', 'comment', 'identifier'] },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.pq',
-        ignoreCase: false,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '{', close: '}', token: 'delimiter.brackets' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        operatorKeywords: [
-            "and",
-            "not",
-            "or"
-        ],
-        keywords: [
-            "as",
-            "each",
-            "else",
-            "error",
-            "false",
-            "if",
-            "in",
-            "is",
-            "let",
-            "meta",
-            "otherwise",
-            "section",
-            "shared",
-            "then",
-            "true",
-            "try",
-            "type"
-        ],
-        constructors: [
-            "#binary",
-            "#date",
-            "#datetime",
-            "#datetimezone",
-            "#duration",
-            "#table",
-            "#time"
-        ],
-        constants: [
-            "#infinity",
-            "#nan",
-            "#sections",
-            "#shared"
-        ],
-        typeKeywords: [
-            "action",
-            "any",
-            "anynonnull",
-            "none",
-            "null",
-            "logical",
-            "number",
-            "time",
-            "date",
-            "datetime",
-            "datetimezone",
-            "duration",
-            "text",
-            "binary",
-            "list",
-            "record",
-            "table",
-            "function"
-        ],
-        builtinFunctions: [
-            "Access.Database",
-            "Action.Return",
-            "Action.Sequence",
-            "Action.Try",
-            "ActiveDirectory.Domains",
-            "AdoDotNet.DataSource",
-            "AdoDotNet.Query",
-            "AdobeAnalytics.Cubes",
-            "AnalysisServices.Database",
-            "AnalysisServices.Databases",
-            "AzureStorage.BlobContents",
-            "AzureStorage.Blobs",
-            "AzureStorage.Tables",
-            "Binary.Buffer",
-            "Binary.Combine",
-            "Binary.Compress",
-            "Binary.Decompress",
-            "Binary.End",
-            "Binary.From",
-            "Binary.FromList",
-            "Binary.FromText",
-            "Binary.InferContentType",
-            "Binary.Length",
-            "Binary.ToList",
-            "Binary.ToText",
-            "BinaryFormat.7BitEncodedSignedInteger",
-            "BinaryFormat.7BitEncodedUnsignedInteger",
-            "BinaryFormat.Binary",
-            "BinaryFormat.Byte",
-            "BinaryFormat.ByteOrder",
-            "BinaryFormat.Choice",
-            "BinaryFormat.Decimal",
-            "BinaryFormat.Double",
-            "BinaryFormat.Group",
-            "BinaryFormat.Length",
-            "BinaryFormat.List",
-            "BinaryFormat.Null",
-            "BinaryFormat.Record",
-            "BinaryFormat.SignedInteger16",
-            "BinaryFormat.SignedInteger32",
-            "BinaryFormat.SignedInteger64",
-            "BinaryFormat.Single",
-            "BinaryFormat.Text",
-            "BinaryFormat.Transform",
-            "BinaryFormat.UnsignedInteger16",
-            "BinaryFormat.UnsignedInteger32",
-            "BinaryFormat.UnsignedInteger64",
-            "Byte.From",
-            "Character.FromNumber",
-            "Character.ToNumber",
-            "Combiner.CombineTextByDelimiter",
-            "Combiner.CombineTextByEachDelimiter",
-            "Combiner.CombineTextByLengths",
-            "Combiner.CombineTextByPositions",
-            "Combiner.CombineTextByRanges",
-            "Comparer.Equals",
-            "Comparer.FromCulture",
-            "Comparer.Ordinal",
-            "Comparer.OrdinalIgnoreCase",
-            "Csv.Document",
-            "Cube.AddAndExpandDimensionColumn",
-            "Cube.AddMeasureColumn",
-            "Cube.ApplyParameter",
-            "Cube.AttributeMemberId",
-            "Cube.AttributeMemberProperty",
-            "Cube.CollapseAndRemoveColumns",
-            "Cube.Dimensions",
-            "Cube.DisplayFolders",
-            "Cube.Measures",
-            "Cube.Parameters",
-            "Cube.Properties",
-            "Cube.PropertyKey",
-            "Cube.ReplaceDimensions",
-            "Cube.Transform",
-            "Currency.From",
-            "DB2.Database",
-            "Date.AddDays",
-            "Date.AddMonths",
-            "Date.AddQuarters",
-            "Date.AddWeeks",
-            "Date.AddYears",
-            "Date.Day",
-            "Date.DayOfWeek",
-            "Date.DayOfWeekName",
-            "Date.DayOfYear",
-            "Date.DaysInMonth",
-            "Date.EndOfDay",
-            "Date.EndOfMonth",
-            "Date.EndOfQuarter",
-            "Date.EndOfWeek",
-            "Date.EndOfYear",
-            "Date.From",
-            "Date.FromText",
-            "Date.IsInCurrentDay",
-            "Date.IsInCurrentMonth",
-            "Date.IsInCurrentQuarter",
-            "Date.IsInCurrentWeek",
-            "Date.IsInCurrentYear",
-            "Date.IsInNextDay",
-            "Date.IsInNextMonth",
-            "Date.IsInNextNDays",
-            "Date.IsInNextNMonths",
-            "Date.IsInNextNQuarters",
-            "Date.IsInNextNWeeks",
-            "Date.IsInNextNYears",
-            "Date.IsInNextQuarter",
-            "Date.IsInNextWeek",
-            "Date.IsInNextYear",
-            "Date.IsInPreviousDay",
-            "Date.IsInPreviousMonth",
-            "Date.IsInPreviousNDays",
-            "Date.IsInPreviousNMonths",
-            "Date.IsInPreviousNQuarters",
-            "Date.IsInPreviousNWeeks",
-            "Date.IsInPreviousNYears",
-            "Date.IsInPreviousQuarter",
-            "Date.IsInPreviousWeek",
-            "Date.IsInPreviousYear",
-            "Date.IsInYearToDate",
-            "Date.IsLeapYear",
-            "Date.Month",
-            "Date.MonthName",
-            "Date.QuarterOfYear",
-            "Date.StartOfDay",
-            "Date.StartOfMonth",
-            "Date.StartOfQuarter",
-            "Date.StartOfWeek",
-            "Date.StartOfYear",
-            "Date.ToRecord",
-            "Date.ToText",
-            "Date.WeekOfMonth",
-            "Date.WeekOfYear",
-            "Date.Year",
-            "DateTime.AddZone",
-            "DateTime.Date",
-            "DateTime.FixedLocalNow",
-            "DateTime.From",
-            "DateTime.FromFileTime",
-            "DateTime.FromText",
-            "DateTime.IsInCurrentHour",
-            "DateTime.IsInCurrentMinute",
-            "DateTime.IsInCurrentSecond",
-            "DateTime.IsInNextHour",
-            "DateTime.IsInNextMinute",
-            "DateTime.IsInNextNHours",
-            "DateTime.IsInNextNMinutes",
-            "DateTime.IsInNextNSeconds",
-            "DateTime.IsInNextSecond",
-            "DateTime.IsInPreviousHour",
-            "DateTime.IsInPreviousMinute",
-            "DateTime.IsInPreviousNHours",
-            "DateTime.IsInPreviousNMinutes",
-            "DateTime.IsInPreviousNSeconds",
-            "DateTime.IsInPreviousSecond",
-            "DateTime.LocalNow",
-            "DateTime.Time",
-            "DateTime.ToRecord",
-            "DateTime.ToText",
-            "DateTimeZone.FixedLocalNow",
-            "DateTimeZone.FixedUtcNow",
-            "DateTimeZone.From",
-            "DateTimeZone.FromFileTime",
-            "DateTimeZone.FromText",
-            "DateTimeZone.LocalNow",
-            "DateTimeZone.RemoveZone",
-            "DateTimeZone.SwitchZone",
-            "DateTimeZone.ToLocal",
-            "DateTimeZone.ToRecord",
-            "DateTimeZone.ToText",
-            "DateTimeZone.ToUtc",
-            "DateTimeZone.UtcNow",
-            "DateTimeZone.ZoneHours",
-            "DateTimeZone.ZoneMinutes",
-            "Decimal.From",
-            "Diagnostics.ActivityId",
-            "Diagnostics.Trace",
-            "DirectQueryCapabilities.From",
-            "Double.From",
-            "Duration.Days",
-            "Duration.From",
-            "Duration.FromText",
-            "Duration.Hours",
-            "Duration.Minutes",
-            "Duration.Seconds",
-            "Duration.ToRecord",
-            "Duration.ToText",
-            "Duration.TotalDays",
-            "Duration.TotalHours",
-            "Duration.TotalMinutes",
-            "Duration.TotalSeconds",
-            "Embedded.Value",
-            "Error.Record",
-            "Excel.CurrentWorkbook",
-            "Excel.Workbook",
-            "Exchange.Contents",
-            "Expression.Constant",
-            "Expression.Evaluate",
-            "Expression.Identifier",
-            "Facebook.Graph",
-            "File.Contents",
-            "Folder.Contents",
-            "Folder.Files",
-            "Function.From",
-            "Function.Invoke",
-            "Function.InvokeAfter",
-            "Function.IsDataSource",
-            "GoogleAnalytics.Accounts",
-            "Guid.From",
-            "HdInsight.Containers",
-            "HdInsight.Contents",
-            "HdInsight.Files",
-            "Hdfs.Contents",
-            "Hdfs.Files",
-            "Informix.Database",
-            "Int16.From",
-            "Int32.From",
-            "Int64.From",
-            "Int8.From",
-            "ItemExpression.From",
-            "Json.Document",
-            "Json.FromValue",
-            "Lines.FromBinary",
-            "Lines.FromText",
-            "Lines.ToBinary",
-            "Lines.ToText",
-            "List.Accumulate",
-            "List.AllTrue",
-            "List.Alternate",
-            "List.AnyTrue",
-            "List.Average",
-            "List.Buffer",
-            "List.Combine",
-            "List.Contains",
-            "List.ContainsAll",
-            "List.ContainsAny",
-            "List.Count",
-            "List.Covariance",
-            "List.DateTimeZones",
-            "List.DateTimes",
-            "List.Dates",
-            "List.Difference",
-            "List.Distinct",
-            "List.Durations",
-            "List.FindText",
-            "List.First",
-            "List.FirstN",
-            "List.Generate",
-            "List.InsertRange",
-            "List.Intersect",
-            "List.IsDistinct",
-            "List.IsEmpty",
-            "List.Last",
-            "List.LastN",
-            "List.MatchesAll",
-            "List.MatchesAny",
-            "List.Max",
-            "List.MaxN",
-            "List.Median",
-            "List.Min",
-            "List.MinN",
-            "List.Mode",
-            "List.Modes",
-            "List.NonNullCount",
-            "List.Numbers",
-            "List.PositionOf",
-            "List.PositionOfAny",
-            "List.Positions",
-            "List.Product",
-            "List.Random",
-            "List.Range",
-            "List.RemoveFirstN",
-            "List.RemoveItems",
-            "List.RemoveLastN",
-            "List.RemoveMatchingItems",
-            "List.RemoveNulls",
-            "List.RemoveRange",
-            "List.Repeat",
-            "List.ReplaceMatchingItems",
-            "List.ReplaceRange",
-            "List.ReplaceValue",
-            "List.Reverse",
-            "List.Select",
-            "List.Single",
-            "List.SingleOrDefault",
-            "List.Skip",
-            "List.Sort",
-            "List.StandardDeviation",
-            "List.Sum",
-            "List.Times",
-            "List.Transform",
-            "List.TransformMany",
-            "List.Union",
-            "List.Zip",
-            "Logical.From",
-            "Logical.FromText",
-            "Logical.ToText",
-            "MQ.Queue",
-            "MySQL.Database",
-            "Number.Abs",
-            "Number.Acos",
-            "Number.Asin",
-            "Number.Atan",
-            "Number.Atan2",
-            "Number.BitwiseAnd",
-            "Number.BitwiseNot",
-            "Number.BitwiseOr",
-            "Number.BitwiseShiftLeft",
-            "Number.BitwiseShiftRight",
-            "Number.BitwiseXor",
-            "Number.Combinations",
-            "Number.Cos",
-            "Number.Cosh",
-            "Number.Exp",
-            "Number.Factorial",
-            "Number.From",
-            "Number.FromText",
-            "Number.IntegerDivide",
-            "Number.IsEven",
-            "Number.IsNaN",
-            "Number.IsOdd",
-            "Number.Ln",
-            "Number.Log",
-            "Number.Log10",
-            "Number.Mod",
-            "Number.Permutations",
-            "Number.Power",
-            "Number.Random",
-            "Number.RandomBetween",
-            "Number.Round",
-            "Number.RoundAwayFromZero",
-            "Number.RoundDown",
-            "Number.RoundTowardZero",
-            "Number.RoundUp",
-            "Number.Sign",
-            "Number.Sin",
-            "Number.Sinh",
-            "Number.Sqrt",
-            "Number.Tan",
-            "Number.Tanh",
-            "Number.ToText",
-            "OData.Feed",
-            "Odbc.DataSource",
-            "Odbc.Query",
-            "OleDb.DataSource",
-            "OleDb.Query",
-            "Oracle.Database",
-            "Percentage.From",
-            "PostgreSQL.Database",
-            "RData.FromBinary",
-            "Record.AddField",
-            "Record.Combine",
-            "Record.Field",
-            "Record.FieldCount",
-            "Record.FieldNames",
-            "Record.FieldOrDefault",
-            "Record.FieldValues",
-            "Record.FromList",
-            "Record.FromTable",
-            "Record.HasFields",
-            "Record.RemoveFields",
-            "Record.RenameFields",
-            "Record.ReorderFields",
-            "Record.SelectFields",
-            "Record.ToList",
-            "Record.ToTable",
-            "Record.TransformFields",
-            "Replacer.ReplaceText",
-            "Replacer.ReplaceValue",
-            "RowExpression.Column",
-            "RowExpression.From",
-            "Salesforce.Data",
-            "Salesforce.Reports",
-            "SapBusinessWarehouse.Cubes",
-            "SapHana.Database",
-            "SharePoint.Contents",
-            "SharePoint.Files",
-            "SharePoint.Tables",
-            "Single.From",
-            "Soda.Feed",
-            "Splitter.SplitByNothing",
-            "Splitter.SplitTextByAnyDelimiter",
-            "Splitter.SplitTextByDelimiter",
-            "Splitter.SplitTextByEachDelimiter",
-            "Splitter.SplitTextByLengths",
-            "Splitter.SplitTextByPositions",
-            "Splitter.SplitTextByRanges",
-            "Splitter.SplitTextByRepeatedLengths",
-            "Splitter.SplitTextByWhitespace",
-            "Sql.Database",
-            "Sql.Databases",
-            "SqlExpression.SchemaFrom",
-            "SqlExpression.ToExpression",
-            "Sybase.Database",
-            "Table.AddColumn",
-            "Table.AddIndexColumn",
-            "Table.AddJoinColumn",
-            "Table.AddKey",
-            "Table.AggregateTableColumn",
-            "Table.AlternateRows",
-            "Table.Buffer",
-            "Table.Column",
-            "Table.ColumnCount",
-            "Table.ColumnNames",
-            "Table.ColumnsOfType",
-            "Table.Combine",
-            "Table.CombineColumns",
-            "Table.Contains",
-            "Table.ContainsAll",
-            "Table.ContainsAny",
-            "Table.DemoteHeaders",
-            "Table.Distinct",
-            "Table.DuplicateColumn",
-            "Table.ExpandListColumn",
-            "Table.ExpandRecordColumn",
-            "Table.ExpandTableColumn",
-            "Table.FillDown",
-            "Table.FillUp",
-            "Table.FilterWithDataTable",
-            "Table.FindText",
-            "Table.First",
-            "Table.FirstN",
-            "Table.FirstValue",
-            "Table.FromColumns",
-            "Table.FromList",
-            "Table.FromPartitions",
-            "Table.FromRecords",
-            "Table.FromRows",
-            "Table.FromValue",
-            "Table.Group",
-            "Table.HasColumns",
-            "Table.InsertRows",
-            "Table.IsDistinct",
-            "Table.IsEmpty",
-            "Table.Join",
-            "Table.Keys",
-            "Table.Last",
-            "Table.LastN",
-            "Table.MatchesAllRows",
-            "Table.MatchesAnyRows",
-            "Table.Max",
-            "Table.MaxN",
-            "Table.Min",
-            "Table.MinN",
-            "Table.NestedJoin",
-            "Table.Partition",
-            "Table.PartitionValues",
-            "Table.Pivot",
-            "Table.PositionOf",
-            "Table.PositionOfAny",
-            "Table.PrefixColumns",
-            "Table.Profile",
-            "Table.PromoteHeaders",
-            "Table.Range",
-            "Table.RemoveColumns",
-            "Table.RemoveFirstN",
-            "Table.RemoveLastN",
-            "Table.RemoveMatchingRows",
-            "Table.RemoveRows",
-            "Table.RemoveRowsWithErrors",
-            "Table.RenameColumns",
-            "Table.ReorderColumns",
-            "Table.Repeat",
-            "Table.ReplaceErrorValues",
-            "Table.ReplaceKeys",
-            "Table.ReplaceMatchingRows",
-            "Table.ReplaceRelationshipIdentity",
-            "Table.ReplaceRows",
-            "Table.ReplaceValue",
-            "Table.ReverseRows",
-            "Table.RowCount",
-            "Table.Schema",
-            "Table.SelectColumns",
-            "Table.SelectRows",
-            "Table.SelectRowsWithErrors",
-            "Table.SingleRow",
-            "Table.Skip",
-            "Table.Sort",
-            "Table.SplitColumn",
-            "Table.ToColumns",
-            "Table.ToList",
-            "Table.ToRecords",
-            "Table.ToRows",
-            "Table.TransformColumnNames",
-            "Table.TransformColumnTypes",
-            "Table.TransformColumns",
-            "Table.TransformRows",
-            "Table.Transpose",
-            "Table.Unpivot",
-            "Table.UnpivotOtherColumns",
-            "Table.View",
-            "Table.ViewFunction",
-            "TableAction.DeleteRows",
-            "TableAction.InsertRows",
-            "TableAction.UpdateRows",
-            "Tables.GetRelationships",
-            "Teradata.Database",
-            "Text.AfterDelimiter",
-            "Text.At",
-            "Text.BeforeDelimiter",
-            "Text.BetweenDelimiters",
-            "Text.Clean",
-            "Text.Combine",
-            "Text.Contains",
-            "Text.End",
-            "Text.EndsWith",
-            "Text.Format",
-            "Text.From",
-            "Text.FromBinary",
-            "Text.Insert",
-            "Text.Length",
-            "Text.Lower",
-            "Text.Middle",
-            "Text.NewGuid",
-            "Text.PadEnd",
-            "Text.PadStart",
-            "Text.PositionOf",
-            "Text.PositionOfAny",
-            "Text.Proper",
-            "Text.Range",
-            "Text.Remove",
-            "Text.RemoveRange",
-            "Text.Repeat",
-            "Text.Replace",
-            "Text.ReplaceRange",
-            "Text.Select",
-            "Text.Split",
-            "Text.SplitAny",
-            "Text.Start",
-            "Text.StartsWith",
-            "Text.ToBinary",
-            "Text.ToList",
-            "Text.Trim",
-            "Text.TrimEnd",
-            "Text.TrimStart",
-            "Text.Upper",
-            "Time.EndOfHour",
-            "Time.From",
-            "Time.FromText",
-            "Time.Hour",
-            "Time.Minute",
-            "Time.Second",
-            "Time.StartOfHour",
-            "Time.ToRecord",
-            "Time.ToText",
-            "Type.AddTableKey",
-            "Type.ClosedRecord",
-            "Type.Facets",
-            "Type.ForFunction",
-            "Type.ForRecord",
-            "Type.FunctionParameters",
-            "Type.FunctionRequiredParameters",
-            "Type.FunctionReturn",
-            "Type.Is",
-            "Type.IsNullable",
-            "Type.IsOpenRecord",
-            "Type.ListItem",
-            "Type.NonNullable",
-            "Type.OpenRecord",
-            "Type.RecordFields",
-            "Type.ReplaceFacets",
-            "Type.ReplaceTableKeys",
-            "Type.TableColumn",
-            "Type.TableKeys",
-            "Type.TableRow",
-            "Type.TableSchema",
-            "Type.Union",
-            "Uri.BuildQueryString",
-            "Uri.Combine",
-            "Uri.EscapeDataString",
-            "Uri.Parts",
-            "Value.Add",
-            "Value.As",
-            "Value.Compare",
-            "Value.Divide",
-            "Value.Equals",
-            "Value.Firewall",
-            "Value.FromText",
-            "Value.Is",
-            "Value.Metadata",
-            "Value.Multiply",
-            "Value.NativeQuery",
-            "Value.NullableEquals",
-            "Value.RemoveMetadata",
-            "Value.ReplaceMetadata",
-            "Value.ReplaceType",
-            "Value.Subtract",
-            "Value.Type",
-            "ValueAction.NativeStatement",
-            "ValueAction.Replace",
-            "Variable.Value",
-            "Web.Contents",
-            "Web.Page",
-            "WebAction.Request",
-            "Xml.Document",
-            "Xml.Tables"
-        ],
-        builtinConstants: [
-            "BinaryEncoding.Base64",
-            "BinaryEncoding.Hex",
-            "BinaryOccurrence.Optional",
-            "BinaryOccurrence.Repeating",
-            "BinaryOccurrence.Required",
-            "ByteOrder.BigEndian",
-            "ByteOrder.LittleEndian",
-            "Compression.Deflate",
-            "Compression.GZip",
-            "CsvStyle.QuoteAfterDelimiter",
-            "CsvStyle.QuoteAlways",
-            "Culture.Current",
-            "Day.Friday",
-            "Day.Monday",
-            "Day.Saturday",
-            "Day.Sunday",
-            "Day.Thursday",
-            "Day.Tuesday",
-            "Day.Wednesday",
-            "ExtraValues.Error",
-            "ExtraValues.Ignore",
-            "ExtraValues.List",
-            "GroupKind.Global",
-            "GroupKind.Local",
-            "JoinAlgorithm.Dynamic",
-            "JoinAlgorithm.LeftHash",
-            "JoinAlgorithm.LeftIndex",
-            "JoinAlgorithm.PairwiseHash",
-            "JoinAlgorithm.RightHash",
-            "JoinAlgorithm.RightIndex",
-            "JoinAlgorithm.SortMerge",
-            "JoinKind.FullOuter",
-            "JoinKind.Inner",
-            "JoinKind.LeftAnti",
-            "JoinKind.LeftOuter",
-            "JoinKind.RightAnti",
-            "JoinKind.RightOuter",
-            "JoinSide.Left",
-            "JoinSide.Right",
-            "MissingField.Error",
-            "MissingField.Ignore",
-            "MissingField.UseNull",
-            "Number.E",
-            "Number.Epsilon",
-            "Number.NaN",
-            "Number.NegativeInfinity",
-            "Number.PI",
-            "Number.PositiveInfinity",
-            "Occurrence.All",
-            "Occurrence.First",
-            "Occurrence.Last",
-            "Occurrence.Optional",
-            "Occurrence.Repeating",
-            "Occurrence.Required",
-            "Order.Ascending",
-            "Order.Descending",
-            "Precision.Decimal",
-            "Precision.Double",
-            "QuoteStyle.Csv",
-            "QuoteStyle.None",
-            "RelativePosition.FromEnd",
-            "RelativePosition.FromStart",
-            "RoundingMode.AwayFromZero",
-            "RoundingMode.Down",
-            "RoundingMode.ToEven",
-            "RoundingMode.TowardZero",
-            "RoundingMode.Up",
-            "SapHanaDistribution.All",
-            "SapHanaDistribution.Connection",
-            "SapHanaDistribution.Off",
-            "SapHanaDistribution.Statement",
-            "SapHanaRangeOperator.Equals",
-            "SapHanaRangeOperator.GreaterThan",
-            "SapHanaRangeOperator.GreaterThanOrEquals",
-            "SapHanaRangeOperator.LessThan",
-            "SapHanaRangeOperator.LessThanOrEquals",
-            "SapHanaRangeOperator.NotEquals",
-            "TextEncoding.Ascii",
-            "TextEncoding.BigEndianUnicode",
-            "TextEncoding.Unicode",
-            "TextEncoding.Utf16",
-            "TextEncoding.Utf8",
-            "TextEncoding.Windows",
-            "TraceLevel.Critical",
-            "TraceLevel.Error",
-            "TraceLevel.Information",
-            "TraceLevel.Verbose",
-            "TraceLevel.Warning",
-            "WebMethod.Delete",
-            "WebMethod.Get",
-            "WebMethod.Head",
-            "WebMethod.Patch",
-            "WebMethod.Post",
-            "WebMethod.Put"
-        ],
-        builtinTypes: [
-            "Action.Type",
-            "Any.Type",
-            "Binary.Type",
-            "BinaryEncoding.Type",
-            "BinaryOccurrence.Type",
-            "Byte.Type",
-            "ByteOrder.Type",
-            "Character.Type",
-            "Compression.Type",
-            "CsvStyle.Type",
-            "Currency.Type",
-            "Date.Type",
-            "DateTime.Type",
-            "DateTimeZone.Type",
-            "Day.Type",
-            "Decimal.Type",
-            "Double.Type",
-            "Duration.Type",
-            "ExtraValues.Type",
-            "Function.Type",
-            "GroupKind.Type",
-            "Guid.Type",
-            "Int16.Type",
-            "Int32.Type",
-            "Int64.Type",
-            "Int8.Type",
-            "JoinAlgorithm.Type",
-            "JoinKind.Type",
-            "JoinSide.Type",
-            "List.Type",
-            "Logical.Type",
-            "MissingField.Type",
-            "None.Type",
-            "Null.Type",
-            "Number.Type",
-            "Occurrence.Type",
-            "Order.Type",
-            "Password.Type",
-            "Percentage.Type",
-            "Precision.Type",
-            "QuoteStyle.Type",
-            "Record.Type",
-            "RelativePosition.Type",
-            "RoundingMode.Type",
-            "SapHanaDistribution.Type",
-            "SapHanaRangeOperator.Type",
-            "Single.Type",
-            "Table.Type",
-            "Text.Type",
-            "TextEncoding.Type",
-            "Time.Type",
-            "TraceLevel.Type",
-            "Type.Type",
-            "Uri.Type",
-            "WebMethod.Type"
-        ],
-        tokenizer: {
-            root: [
-                // quoted identifier
-                [/#"[\w \.]+"/, "identifier.quote"],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"],
-                [/0[xX][0-9a-fA-F]+/, "number.hex"],
-                [/\d+([eE][\-+]?\d+)?/, "number"],
-                // keywords
-                [/(#?[a-z]+)\b/,
-                    {
-                        cases: {
-                            "@typeKeywords": "type",
-                            "@keywords": "keyword",
-                            "@constants": "constant",
-                            "@constructors": "constructor",
-                            "@operatorKeywords": "operators",
-                            "@default": "identifier"
-                        }
-                    }
-                ],
-                // built-in types
-                [/\b([A-Z][a-zA-Z0-9]+\.Type)\b/,
-                    {
-                        cases: {
-                            "@builtinTypes": "type",
-                            "@default": "identifier"
-                        }
-                    }
-                ],
-                // other built-ins
-                [/\b([A-Z][a-zA-Z0-9]+\.[A-Z][a-zA-Z0-9]+)\b/,
-                    {
-                        cases: {
-                            "@builtinFunctions": "keyword.function",
-                            "@builtinConstants": "constant",
-                            "@default": "identifier"
-                        }
-                    }
-                ],
-                // other identifiers
-                [/\b([a-zA-Z_][\w\.]*)\b/, "identifier"],
-                { include: "@whitespace" },
-                { include: "@comments" },
-                { include: "@strings" },
-                [/[{}()\[\]]/, "@brackets"],
-                [/([=\+<>\-\*&@\?\/!])|([<>]=)|(<>)|(=>)|(\.\.\.)|(\.\.)/, "operators"],
-                [/[,;]/, "delimiter"],
-            ],
-            whitespace: [
-                [/\s+/, "white"]
-            ],
-            comments: [
-                ["\\/\\*", "comment", "@comment"],
-                ["\\/\\/+.*", "comment"]
-            ],
-            comment: [
-                ["\\*\\/", "comment", "@pop"],
-                [".", "comment"]
-            ],
-            strings: [
-                ["\"", "string", "@string"]
-            ],
-            string: [
-                ["\"\"", "string.escape"],
-                ["\"", "string", "@pop"],
-                [".", "string"]
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/powershell/powershell.contribution.js b/node_modules/monaco-languages/release/dev/powershell/powershell.contribution.js
deleted file mode 100644
index aee7e32..0000000
--- a/node_modules/monaco-languages/release/dev/powershell/powershell.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'powershell',
-        extensions: ['.ps1', '.psm1', '.psd1'],
-        aliases: ['PowerShell', 'powershell', 'ps', 'ps1'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./powershell'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/powershell/powershell.js b/node_modules/monaco-languages/release/dev/powershell/powershell.js
deleted file mode 100644
index 0b5b5c0..0000000
--- a/node_modules/monaco-languages/release/dev/powershell/powershell.js
+++ /dev/null
@@ -1,174 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        // the default separators except `$-`
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#%\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
-        comments: {
-            lineComment: '#',
-            blockComment: ['<#', '#>'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"', notIn: ['string'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#region\\b"),
-                end: new RegExp("^\\s*#endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: true,
-        tokenPostfix: '.ps1',
-        brackets: [
-            { token: 'delimiter.curly', open: '{', close: '}' },
-            { token: 'delimiter.square', open: '[', close: ']' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' }
-        ],
-        keywords: [
-            'begin', 'break', 'catch', 'class', 'continue', 'data',
-            'define', 'do', 'dynamicparam', 'else', 'elseif', 'end',
-            'exit', 'filter', 'finally', 'for', 'foreach', 'from',
-            'function', 'if', 'in', 'param', 'process', 'return',
-            'switch', 'throw', 'trap', 'try', 'until', 'using',
-            'var', 'while', 'workflow', 'parallel', 'sequence', 'inlinescript', 'configuration'
-        ],
-        helpKeywords: /SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,
-        // we include these common regular expressions
-        symbols: /[=><!~?&%|+\-*\/\^;\.,]+/,
-        escapes: /`(?:[abfnrtv\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // commands and keywords
-                [/[a-zA-Z_][\w-]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': ''
-                        }
-                    }],
-                // whitespace
-                [/[ \t\r\n]+/, ''],
-                // labels
-                [/^:\w*/, 'metatag'],
-                // variables
-                [/\$(\{((global|local|private|script|using):)?[\w]+\}|((global|local|private|script|using):)?[\w]+)/, 'variable'],
-                // Comments
-                [/<#/, 'comment', '@comment'],
-                [/#.*$/, 'comment'],
-                // delimiters
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, 'delimiter'],
-                // numbers
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
-                [/\d+?/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings:
-                [/\@"/, 'string', '@herestring."'],
-                [/\@'/, 'string', '@herestring.\''],
-                [/"/, {
-                        cases: {
-                            '@eos': 'string',
-                            '@default': { token: 'string', next: '@string."' }
-                        }
-                    }],
-                [/'/, {
-                        cases: {
-                            '@eos': 'string',
-                            '@default': { token: 'string', next: '@string.\'' }
-                        }
-                    }],
-            ],
-            string: [
-                [/[^"'\$`]+/, {
-                        cases: {
-                            '@eos': { token: 'string', next: '@popall' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/@escapes/, {
-                        cases: {
-                            '@eos': { token: 'string.escape', next: '@popall' },
-                            '@default': 'string.escape'
-                        }
-                    }],
-                [/`./, {
-                        cases: {
-                            '@eos': { token: 'string.escape.invalid', next: '@popall' },
-                            '@default': 'string.escape.invalid'
-                        }
-                    }],
-                [/\$[\w]+$/, {
-                        cases: {
-                            '$S2=="': { token: 'variable', next: '@popall' },
-                            '@default': { token: 'string', next: '@popall' }
-                        }
-                    }],
-                [/\$[\w]+/, {
-                        cases: {
-                            '$S2=="': 'variable',
-                            '@default': 'string'
-                        }
-                    }],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': {
-                                cases: {
-                                    '@eos': { token: 'string', next: '@popall' },
-                                    '@default': 'string'
-                                }
-                            }
-                        }
-                    }],
-            ],
-            herestring: [
-                [/^\s*(["'])@/, {
-                        cases: {
-                            '$1==$S2': { token: 'string', next: '@pop' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/[^\$`]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/`./, 'string.escape.invalid'],
-                [/\$[\w]+/, {
-                        cases: {
-                            '$S2=="': 'variable',
-                            '@default': 'string'
-                        }
-                    }],
-            ],
-            comment: [
-                [/[^#\.]+/, 'comment'],
-                [/#>/, 'comment', '@pop'],
-                [/(\.)(@helpKeywords)(?!\w)/, { token: 'comment.keyword.$2' }],
-                [/[\.#]/, 'comment']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/pug/pug.contribution.js b/node_modules/monaco-languages/release/dev/pug/pug.contribution.js
deleted file mode 100644
index fc090e9..0000000
--- a/node_modules/monaco-languages/release/dev/pug/pug.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'pug',
-        extensions: ['.jade', '.pug'],
-        aliases: ['Pug', 'Jade', 'jade'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./pug'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/pug/pug.js b/node_modules/monaco-languages/release/dev/pug/pug.js
deleted file mode 100644
index c5569d0..0000000
--- a/node_modules/monaco-languages/release/dev/pug/pug.js
+++ /dev/null
@@ -1,230 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//'
-        },
-        brackets: [['{', '}'], ['[', ']'], ['(', ')']],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-        ],
-        folding: {
-            offSide: true
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.pug',
-        ignoreCase: true,
-        brackets: [
-            { token: 'delimiter.curly', open: '{', close: '}' },
-            { token: 'delimiter.array', open: '[', close: ']' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' }
-        ],
-        keywords: ['append', 'block', 'case', 'default', 'doctype', 'each', 'else', 'extends',
-            'for', 'if', 'in', 'include', 'mixin', 'typeof', 'unless', 'var', 'when'],
-        tags: [
-            'a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio',
-            'b', 'base', 'basefont', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button',
-            'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command',
-            'datalist', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt',
-            'em', 'embed',
-            'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset',
-            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html',
-            'i', 'iframe', 'img', 'input', 'ins',
-            'keygen', 'kbd',
-            'label', 'li', 'link',
-            'map', 'mark', 'menu', 'meta', 'meter',
-            'nav', 'noframes', 'noscript',
-            'object', 'ol', 'optgroup', 'option', 'output',
-            'p', 'param', 'pre', 'progress',
-            'q',
-            'rp', 'rt', 'ruby',
-            's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup',
-            'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'tracks', 'tt',
-            'u', 'ul',
-            'video',
-            'wbr'
-        ],
-        // we include these common regular expressions
-        symbols: /[\+\-\*\%\&\|\!\=\/\.\,\:]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        tokenizer: {
-            root: [
-                // Tag or a keyword at start
-                [/^(\s*)([a-zA-Z_-][\w-]*)/,
-                    {
-                        cases: {
-                            '$2@tags': {
-                                cases: {
-                                    '@eos': ['', 'tag'],
-                                    '@default': ['', { token: 'tag', next: '@tag.$1' },]
-                                }
-                            },
-                            '$2@keywords': ['', { token: 'keyword.$2' },],
-                            '@default': ['', '',]
-                        }
-                    }
-                ],
-                // id
-                [/^(\s*)(#[a-zA-Z_-][\w-]*)/, {
-                        cases: {
-                            '@eos': ['', 'tag.id'],
-                            '@default': ['', { token: 'tag.id', next: '@tag.$1' }]
-                        }
-                    }],
-                // class
-                [/^(\s*)(\.[a-zA-Z_-][\w-]*)/, {
-                        cases: {
-                            '@eos': ['', 'tag.class'],
-                            '@default': ['', { token: 'tag.class', next: '@tag.$1' }]
-                        }
-                    }],
-                // plain text with pipe
-                [/^(\s*)(\|.*)$/, ''],
-                { include: '@whitespace' },
-                // keywords
-                [/[a-zA-Z_$][\w$]*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': ''
-                        }
-                    }],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, 'delimiter'],
-                // numbers
-                [/\d+\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/\d+/, 'number'],
-                // strings:
-                [/"/, 'string', '@string."'],
-                [/'/, 'string', '@string.\''],
-            ],
-            tag: [
-                [/(\.)(\s*$)/, [{ token: 'delimiter', next: '@blockText.$S2.' }, '']],
-                [/\s+/, { token: '', next: '@simpleText' }],
-                // id
-                [/#[a-zA-Z_-][\w-]*/, {
-                        cases: {
-                            '@eos': { token: 'tag.id', next: '@pop' },
-                            '@default': 'tag.id'
-                        }
-                    }],
-                // class
-                [/\.[a-zA-Z_-][\w-]*/, {
-                        cases: {
-                            '@eos': { token: 'tag.class', next: '@pop' },
-                            '@default': 'tag.class'
-                        }
-                    }],
-                // attributes
-                [/\(/, { token: 'delimiter.parenthesis', next: '@attributeList' }],
-            ],
-            simpleText: [
-                [/[^#]+$/, { token: '', next: '@popall' }],
-                [/[^#]+/, { token: '' }],
-                // interpolation
-                [/(#{)([^}]*)(})/, {
-                        cases: {
-                            '@eos': ['interpolation.delimiter', 'interpolation', { token: 'interpolation.delimiter', next: '@popall' }],
-                            '@default': ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']
-                        }
-                    }],
-                [/#$/, { token: '', next: '@popall' }],
-                [/#/, '']
-            ],
-            attributeList: [
-                [/\s+/, ''],
-                [/(\w+)(\s*=\s*)("|')/, ['attribute.name', 'delimiter', { token: 'attribute.value', next: '@value.$3' }]],
-                [/\w+/, 'attribute.name'],
-                [/,/, {
-                        cases: {
-                            '@eos': { token: 'attribute.delimiter', next: '@popall' },
-                            '@default': 'attribute.delimiter'
-                        }
-                    }],
-                [/\)$/, { token: 'delimiter.parenthesis', next: '@popall' }],
-                [/\)/, { token: 'delimiter.parenthesis', next: '@pop' }],
-            ],
-            whitespace: [
-                [/^(\s*)(\/\/.*)$/, { token: 'comment', next: '@blockText.$1.comment' }],
-                [/[ \t\r\n]+/, ''],
-                [/<!--/, { token: 'comment', next: '@comment' }],
-            ],
-            blockText: [
-                [/^\s+.*$/, {
-                        cases: {
-                            '($S2\\s+.*$)': { token: '$S3' },
-                            '@default': { token: '@rematch', next: '@popall' }
-                        }
-                    }],
-                [/./, { token: '@rematch', next: '@popall' }]
-            ],
-            comment: [
-                [/[^<\-]+/, 'comment.content'],
-                [/-->/, { token: 'comment', next: '@pop' }],
-                [/<!--/, 'comment.content.invalid'],
-                [/[<\-]/, 'comment.content']
-            ],
-            string: [
-                [/[^\\"'#]+/, {
-                        cases: {
-                            '@eos': { token: 'string', next: '@popall' },
-                            '@default': 'string'
-                        }
-                    }],
-                [/@escapes/, {
-                        cases: {
-                            '@eos': { token: 'string.escape', next: '@popall' },
-                            '@default': 'string.escape'
-                        }
-                    }],
-                [/\\./, {
-                        cases: {
-                            '@eos': { token: 'string.escape.invalid', next: '@popall' },
-                            '@default': 'string.escape.invalid'
-                        }
-                    }],
-                // interpolation
-                [/(#{)([^}]*)(})/, ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']],
-                [/#/, 'string'],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'string', next: '@pop' },
-                            '@default': { token: 'string' }
-                        }
-                    }],
-            ],
-            // Almost identical to above, except for escapes and the output token
-            value: [
-                [/[^\\"']+/, {
-                        cases: {
-                            '@eos': { token: 'attribute.value', next: '@popall' },
-                            '@default': 'attribute.value'
-                        }
-                    }],
-                [/\\./, {
-                        cases: {
-                            '@eos': { token: 'attribute.value', next: '@popall' },
-                            '@default': 'attribute.value'
-                        }
-                    }],
-                [/["']/, {
-                        cases: {
-                            '$#==$S2': { token: 'attribute.value', next: '@pop' },
-                            '@default': { token: 'attribute.value' }
-                        }
-                    }],
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/python/python.contribution.js b/node_modules/monaco-languages/release/dev/python/python.contribution.js
deleted file mode 100644
index 5aa7d7d..0000000
--- a/node_modules/monaco-languages/release/dev/python/python.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'python',
-        extensions: ['.py', '.rpy', '.pyw', '.cpy', '.gyp', '.gypi'],
-        aliases: ['Python', 'py'],
-        firstLine: '^#!/.*\\bpython[0-9.-]*\\b',
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./python'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/python/python.js b/node_modules/monaco-languages/release/dev/python/python.js
deleted file mode 100644
index bd84bd2..0000000
--- a/node_modules/monaco-languages/release/dev/python/python.js
+++ /dev/null
@@ -1,246 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    // Allow for running under nodejs/requirejs in tests
-    var _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);
-    exports.conf = {
-        comments: {
-            lineComment: '#',
-            blockComment: ['\'\'\'', '\'\'\''],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"', notIn: ['string'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        onEnterRules: [
-            {
-                beforeText: new RegExp("^\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\s*$"),
-                action: { indentAction: _monaco.languages.IndentAction.Indent }
-            }
-        ],
-        folding: {
-            offSide: true,
-            markers: {
-                start: new RegExp("^\\s*#region\\b"),
-                end: new RegExp("^\\s*#endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.python',
-        keywords: [
-            'and',
-            'as',
-            'assert',
-            'break',
-            'class',
-            'continue',
-            'def',
-            'del',
-            'elif',
-            'else',
-            'except',
-            'exec',
-            'finally',
-            'for',
-            'from',
-            'global',
-            'if',
-            'import',
-            'in',
-            'is',
-            'lambda',
-            'None',
-            'not',
-            'or',
-            'pass',
-            'print',
-            'raise',
-            'return',
-            'self',
-            'try',
-            'while',
-            'with',
-            'yield',
-            'int',
-            'float',
-            'long',
-            'complex',
-            'hex',
-            'abs',
-            'all',
-            'any',
-            'apply',
-            'basestring',
-            'bin',
-            'bool',
-            'buffer',
-            'bytearray',
-            'callable',
-            'chr',
-            'classmethod',
-            'cmp',
-            'coerce',
-            'compile',
-            'complex',
-            'delattr',
-            'dict',
-            'dir',
-            'divmod',
-            'enumerate',
-            'eval',
-            'execfile',
-            'file',
-            'filter',
-            'format',
-            'frozenset',
-            'getattr',
-            'globals',
-            'hasattr',
-            'hash',
-            'help',
-            'id',
-            'input',
-            'intern',
-            'isinstance',
-            'issubclass',
-            'iter',
-            'len',
-            'locals',
-            'list',
-            'map',
-            'max',
-            'memoryview',
-            'min',
-            'next',
-            'object',
-            'oct',
-            'open',
-            'ord',
-            'pow',
-            'print',
-            'property',
-            'reversed',
-            'range',
-            'raw_input',
-            'reduce',
-            'reload',
-            'repr',
-            'reversed',
-            'round',
-            'set',
-            'setattr',
-            'slice',
-            'sorted',
-            'staticmethod',
-            'str',
-            'sum',
-            'super',
-            'tuple',
-            'type',
-            'unichr',
-            'unicode',
-            'vars',
-            'xrange',
-            'zip',
-            'True',
-            'False',
-            '__dict__',
-            '__methods__',
-            '__members__',
-            '__class__',
-            '__bases__',
-            '__name__',
-            '__mro__',
-            '__subclasses__',
-            '__init__',
-            '__import__'
-        ],
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.bracket' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        tokenizer: {
-            root: [
-                { include: '@whitespace' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                [/[,:;]/, 'delimiter'],
-                [/[{}\[\]()]/, '@brackets'],
-                [/@[a-zA-Z]\w*/, 'tag'],
-                [/[a-zA-Z]\w*/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'identifier'
-                        }
-                    }]
-            ],
-            // Deal with white space, including single and multi-line comments
-            whitespace: [
-                [/\s+/, 'white'],
-                [/(^#.*$)/, 'comment'],
-                [/'''/, 'string', '@endDocString'],
-                [/"""/, 'string', '@endDblDocString']
-            ],
-            endDocString: [
-                [/[^']+/, 'string'],
-                [/\\'/, 'string'],
-                [/'''/, 'string', '@popall'],
-                [/'/, 'string']
-            ],
-            endDblDocString: [
-                [/[^"]+/, 'string'],
-                [/\\"/, 'string'],
-                [/"""/, 'string', '@popall'],
-                [/"/, 'string']
-            ],
-            // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation
-            numbers: [
-                [/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, 'number.hex'],
-                [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, 'number']
-            ],
-            // Recognize strings, including those broken across lines with \ (but not without)
-            strings: [
-                [/'$/, 'string.escape', '@popall'],
-                [/'/, 'string.escape', '@stringBody'],
-                [/"$/, 'string.escape', '@popall'],
-                [/"/, 'string.escape', '@dblStringBody']
-            ],
-            stringBody: [
-                [/[^\\']+$/, 'string', '@popall'],
-                [/[^\\']+/, 'string'],
-                [/\\./, 'string'],
-                [/'/, 'string.escape', '@popall'],
-                [/\\$/, 'string']
-            ],
-            dblStringBody: [
-                [/[^\\"]+$/, 'string', '@popall'],
-                [/[^\\"]+/, 'string'],
-                [/\\./, 'string'],
-                [/"/, 'string.escape', '@popall'],
-                [/\\$/, 'string']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/r/r.contribution.js b/node_modules/monaco-languages/release/dev/r/r.contribution.js
deleted file mode 100644
index 229335b..0000000
--- a/node_modules/monaco-languages/release/dev/r/r.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'r',
-        extensions: ['.r', '.rhistory', '.rprofile', '.rt'],
-        aliases: ['R', 'r'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./r'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/r/r.js b/node_modules/monaco-languages/release/dev/r/r.js
deleted file mode 100644
index 63dca4f..0000000
--- a/node_modules/monaco-languages/release/dev/r/r.js
+++ /dev/null
@@ -1,221 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.r',
-        roxygen: [
-            '@param',
-            '@return',
-            '@name',
-            '@rdname',
-            '@examples',
-            '@include',
-            '@docType',
-            '@S3method',
-            '@TODO',
-            '@aliases',
-            '@alias',
-            '@assignee',
-            '@author',
-            '@callGraphDepth',
-            '@callGraph',
-            '@callGraphPrimitives',
-            '@concept',
-            '@exportClass',
-            '@exportMethod',
-            '@exportPattern',
-            '@export',
-            '@formals',
-            '@format',
-            '@importClassesFrom',
-            '@importFrom',
-            '@importMethodsFrom',
-            '@import',
-            '@keywords',
-            '@method',
-            '@nord',
-            '@note',
-            '@references',
-            '@seealso',
-            '@setClass',
-            '@slot',
-            '@source',
-            '@title',
-            '@usage'
-        ],
-        constants: [
-            'NULL',
-            'FALSE',
-            'TRUE',
-            'NA',
-            'Inf',
-            'NaN ',
-            'NA_integer_',
-            'NA_real_',
-            'NA_complex_',
-            'NA_character_ ',
-            'T',
-            'F',
-            'LETTERS',
-            'letters',
-            'month.abb',
-            'month.name',
-            'pi',
-            'R.version.string'
-        ],
-        keywords: [
-            'break',
-            'next',
-            'return',
-            'if',
-            'else',
-            'for',
-            'in',
-            'repeat',
-            'while',
-            'array',
-            'category',
-            'character',
-            'complex',
-            'double',
-            'function',
-            'integer',
-            'list',
-            'logical',
-            'matrix',
-            'numeric',
-            'vector',
-            'data.frame',
-            'factor',
-            'library',
-            'require',
-            'attach',
-            'detach',
-            'source'
-        ],
-        special: [
-            '\\n',
-            '\\r',
-            '\\t',
-            '\\b',
-            '\\a',
-            '\\f',
-            '\\v',
-            '\\\'',
-            '\\"',
-            '\\\\'
-        ],
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.bracket' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        tokenizer: {
-            root: [
-                { include: '@numbers' },
-                { include: '@strings' },
-                [/[{}\[\]()]/, '@brackets'],
-                { include: '@operators' },
-                [/#'/, 'comment.doc', '@roxygen'],
-                [/(^#.*$)/, 'comment'],
-                [/\s+/, 'white'],
-                [/[,:;]/, 'delimiter'],
-                [/@[a-zA-Z]\w*/, 'tag'],
-                [/[a-zA-Z]\w*/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@constants': 'constant',
-                            '@default': 'identifier'
-                        }
-                    }]
-            ],
-            // Recognize Roxygen comments
-            roxygen: [
-                [/@\w+/, {
-                        cases: {
-                            '@roxygen': 'tag',
-                            '@eos': { token: 'comment.doc', next: '@pop' },
-                            '@default': 'comment.doc'
-                        }
-                    }],
-                [/\s+/, {
-                        cases: {
-                            '@eos': { token: 'comment.doc', next: '@pop' },
-                            '@default': 'comment.doc'
-                        }
-                    }],
-                [/.*/, { token: 'comment.doc', next: '@pop' }]
-            ],
-            // Recognize positives, negatives, decimals, imaginaries, and scientific notation
-            numbers: [
-                [/0[xX][0-9a-fA-F]+/, 'number.hex'],
-                [/-?(\d*\.)?\d+([eE][+\-]?\d+)?/, 'number']
-            ],
-            // Recognize operators
-            operators: [
-                [/<{1,2}-/, 'operator'],
-                [/->{1,2}/, 'operator'],
-                [/%[^%\s]+%/, 'operator'],
-                [/\*\*/, 'operator'],
-                [/%%/, 'operator'],
-                [/&&/, 'operator'],
-                [/\|\|/, 'operator'],
-                [/<</, 'operator'],
-                [/>>/, 'operator'],
-                [/[-+=&|!<>^~*/:$]/, 'operator']
-            ],
-            // Recognize strings, including those broken across lines
-            strings: [
-                [/'/, 'string.escape', '@stringBody'],
-                [/"/, 'string.escape', '@dblStringBody']
-            ],
-            stringBody: [
-                [/\\./, {
-                        cases: {
-                            '@special': 'string',
-                            '@default': 'error-token'
-                        }
-                    }],
-                [/'/, 'string.escape', '@popall'],
-                [/./, 'string'],
-            ],
-            dblStringBody: [
-                [/\\./, {
-                        cases: {
-                            '@special': 'string',
-                            '@default': 'error-token'
-                        }
-                    }],
-                [/"/, 'string.escape', '@popall'],
-                [/./, 'string'],
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/razor/razor.contribution.js b/node_modules/monaco-languages/release/dev/razor/razor.contribution.js
deleted file mode 100644
index cd403c1..0000000
--- a/node_modules/monaco-languages/release/dev/razor/razor.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'razor',
-        extensions: ['.cshtml'],
-        aliases: ['Razor', 'razor'],
-        mimetypes: ['text/x-cshtml'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./razor'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/razor/razor.js b/node_modules/monaco-languages/release/dev/razor/razor.js
deleted file mode 100644
index 6919515..0000000
--- a/node_modules/monaco-languages/release/dev/razor/razor.js
+++ /dev/null
@@ -1,275 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    // Allow for running under nodejs/requirejs in tests
-    var _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);
-    var EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
-        comments: {
-            blockComment: ['<!--', '-->']
-        },
-        brackets: [
-            ['<!--', '-->'],
-            ['<', '>'],
-            ['{', '}'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' }
-        ],
-        surroundingPairs: [
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '<', close: '>' }
-        ],
-        onEnterRules: [
-            {
-                beforeText: new RegExp("<(?!(?:" + EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
-                afterText: /^<\/(\w[\w\d]*)\s*>$/i,
-                action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }
-            },
-            {
-                beforeText: new RegExp("<(?!(?:" + EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
-                action: { indentAction: _monaco.languages.IndentAction.Indent }
-            }
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '',
-        // ignoreCase: true,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                [/@@/],
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.root' }],
-                [/<!DOCTYPE/, 'metatag.html', '@doctype'],
-                [/<!--/, 'comment.html', '@comment'],
-                [/(<)(\w+)(\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],
-                [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],
-                [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],
-                [/(<)([:\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/(<\/)(\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/</, 'delimiter.html'],
-                [/[ \t\r\n]+/],
-                [/[^<@]+/],
-            ],
-            doctype: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],
-                [/[^>]+/, 'metatag.content.html'],
-                [/>/, 'metatag.html', '@pop'],
-            ],
-            comment: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],
-                [/-->/, 'comment.html', '@pop'],
-                [/[^-]+/, 'comment.content.html'],
-                [/./, 'comment.content.html']
-            ],
-            otherTag: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.otherTag' }],
-                [/\/?>/, 'delimiter.html', '@pop'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-            ],
-            // -- BEGIN <script> tags handling
-            // After <script
-            script: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.script' }],
-                [/type/, 'attribute.name', '@scriptAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(script\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <script ... type
-            scriptAfterType: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptAfterType' }],
-                [/=/, 'delimiter', '@scriptAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type =
-            scriptAfterTypeEquals: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptAfterTypeEquals' }],
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type = $S2
-            scriptWithCustomType: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptWithCustomType.$S2' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            scriptEmbedded: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],
-                [/<\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            // -- END <script> tags handling
-            // -- BEGIN <style> tags handling
-            // After <style
-            style: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.style' }],
-                [/type/, 'attribute.name', '@styleAfterType'],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(style\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <style ... type
-            styleAfterType: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleAfterType' }],
-                [/=/, 'delimiter', '@styleAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type =
-            styleAfterTypeEquals: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleAfterTypeEquals' }],
-                [/"([^"]*)"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type = $S2
-            styleWithCustomType: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleWithCustomType.$S2' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value'],
-                [/'([^']*)'/, 'attribute.value'],
-                [/[\w\-]+/, 'attribute.name'],
-                [/=/, 'delimiter'],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            styleEmbedded: [
-                [/@[^@]/, { token: '@rematch', switchTo: '@razorInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],
-                [/<\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]
-            ],
-            // -- END <style> tags handling
-            razorInSimpleState: [
-                [/@\*/, 'comment.cs', '@razorBlockCommentTopLevel'],
-                [/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],
-                [/(@)(\s*[\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3' }]],
-                [/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3' }],
-                [/\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3' }],
-            ],
-            razorInEmbeddedState: [
-                [/@\*/, 'comment.cs', '@razorBlockCommentTopLevel'],
-                [/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],
-                [/(@)(\s*[\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }]],
-                [/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],
-                [/\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],
-            ],
-            razorBlockCommentTopLevel: [
-                [/\*@/, '@rematch', '@pop'],
-                [/[^*]+/, 'comment.cs'],
-                [/./, 'comment.cs']
-            ],
-            razorBlockComment: [
-                [/\*@/, 'comment.cs', '@pop'],
-                [/[^*]+/, 'comment.cs'],
-                [/./, 'comment.cs']
-            ],
-            razorRootTopLevel: [
-                [/\{/, 'delimiter.bracket.cs', '@razorRoot'],
-                [/\(/, 'delimiter.parenthesis.cs', '@razorRoot'],
-                [/[})]/, '@rematch', '@pop'],
-                { include: 'razorCommon' }
-            ],
-            razorRoot: [
-                [/\{/, 'delimiter.bracket.cs', '@razorRoot'],
-                [/\(/, 'delimiter.parenthesis.cs', '@razorRoot'],
-                [/\}/, 'delimiter.bracket.cs', '@pop'],
-                [/\)/, 'delimiter.parenthesis.cs', '@pop'],
-                { include: 'razorCommon' }
-            ],
-            razorCommon: [
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@razorKeywords': { token: 'keyword.cs' },
-                            '@default': 'identifier.cs'
-                        }
-                    }],
-                // brackets
-                [/[\[\]]/, 'delimiter.array.cs'],
-                // whitespace
-                [/[ \t\r\n]+/],
-                // comments
-                [/\/\/.*$/, 'comment.cs'],
-                [/@\*/, 'comment.cs', '@razorBlockComment'],
-                // strings
-                [/"([^"]*)"/, 'string.cs'],
-                [/'([^']*)'/, 'string.cs'],
-                // simple html
-                [/(<)(\w+)(\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],
-                [/(<)(\w+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],
-                [/(<\/)(\w+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],
-                // delimiters
-                [/[\+\-\*\%\&\|\^\~\!\=\<\>\/\?\;\:\.\,]/, 'delimiter.cs'],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?/, 'number.float.cs'],
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float.cs'],
-                [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.cs'],
-                [/0[0-7']*[0-7]/, 'number.octal.cs'],
-                [/0[bB][0-1']*[0-1]/, 'number.binary.cs'],
-                [/\d[\d']*/, 'number.cs'],
-                [/\d/, 'number.cs'],
-            ]
-        },
-        razorKeywords: [
-            'abstract', 'as', 'async', 'await', 'base', 'bool',
-            'break', 'by', 'byte', 'case',
-            'catch', 'char', 'checked', 'class',
-            'const', 'continue', 'decimal', 'default',
-            'delegate', 'do', 'double', 'descending',
-            'explicit', 'event', 'extern', 'else',
-            'enum', 'false', 'finally', 'fixed',
-            'float', 'for', 'foreach', 'from',
-            'goto', 'group', 'if', 'implicit',
-            'in', 'int', 'interface', 'internal',
-            'into', 'is', 'lock', 'long', 'nameof',
-            'new', 'null', 'namespace', 'object',
-            'operator', 'out', 'override', 'orderby',
-            'params', 'private', 'protected', 'public',
-            'readonly', 'ref', 'return', 'switch',
-            'struct', 'sbyte', 'sealed', 'short',
-            'sizeof', 'stackalloc', 'static', 'string',
-            'select', 'this', 'throw', 'true',
-            'try', 'typeof', 'uint', 'ulong',
-            'unchecked', 'unsafe', 'ushort', 'using',
-            'var', 'virtual', 'volatile', 'void', 'when',
-            'while', 'where', 'yield',
-            'model', 'inject' // Razor specific
-        ],
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/typescript/typescript.contribution.js b/node_modules/monaco-languages/release/dev/reactscript/reactscript.contribution.js
similarity index 82%
rename from node_modules/monaco-languages/release/dev/typescript/typescript.contribution.js
rename to node_modules/monaco-languages/release/dev/reactscript/reactscript.contribution.js
index db096cd..71b3cf6 100644
--- a/node_modules/monaco-languages/release/dev/typescript/typescript.contribution.js
+++ b/node_modules/monaco-languages/release/dev/reactscript/reactscript.contribution.js
@@ -6,10 +6,10 @@ define(["require", "exports", "../_.contribution"], function (require, exports,
     'use strict';
     Object.defineProperty(exports, "__esModule", { value: true });
     __contribution_1.registerLanguage({
-        id: 'typescript',
+        id: 'reactscript',
         extensions: ['.ts', '.tsx'],
-        aliases: ['TypeScript', 'ts', 'typescript'],
+        aliases: ['ReactScript', 'rsx', 'reactscript'],
         mimetypes: ['text/typescript'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./typescript'], resolve_1, reject_1); }); }
+        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./reactscript'], resolve_1, reject_1); }); }
     });
 });
diff --git a/node_modules/monaco-languages/release/dev/typescript/typescript.js b/node_modules/monaco-languages/release/dev/reactscript/reactscript.js
similarity index 100%
rename from node_modules/monaco-languages/release/dev/typescript/typescript.js
rename to node_modules/monaco-languages/release/dev/reactscript/reactscript.js
diff --git a/node_modules/monaco-languages/release/dev/redis/redis.contribution.js b/node_modules/monaco-languages/release/dev/redis/redis.contribution.js
deleted file mode 100644
index 996e68c..0000000
--- a/node_modules/monaco-languages/release/dev/redis/redis.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'redis',
-        extensions: ['.redis'],
-        aliases: ['redis'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./redis'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/redis/redis.js b/node_modules/monaco-languages/release/dev/redis/redis.js
deleted file mode 100644
index 9ba0d2b..0000000
--- a/node_modules/monaco-languages/release/dev/redis/redis.js
+++ /dev/null
@@ -1,124 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.redis',
-        ignoreCase: true,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        keywords: [
-            "APPEND", "AUTH", "BGREWRITEAOF", "BGSAVE", "BITCOUNT", "BITFIELD", "BITOP", "BITPOS", "BLPOP", "BRPOP", "BRPOPLPUSH",
-            "CLIENT", "KILL", "LIST", "GETNAME", "PAUSE", "REPLY", "SETNAME", "CLUSTER", "ADDSLOTS", "COUNT-FAILURE-REPORTS",
-            "COUNTKEYSINSLOT", "DELSLOTS", "FAILOVER", "FORGET", "GETKEYSINSLOT", "INFO", "KEYSLOT", "MEET", "NODES", "REPLICATE",
-            "RESET", "SAVECONFIG", "SET-CONFIG-EPOCH", "SETSLOT", "SLAVES", "SLOTS", "COMMAND", "COUNT", "GETKEYS", "CONFIG", "GET",
-            "REWRITE", "SET", "RESETSTAT", "DBSIZE", "DEBUG", "OBJECT", "SEGFAULT", "DECR", "DECRBY", "DEL", "DISCARD", "DUMP", "ECHO",
-            "EVAL", "EVALSHA", "EXEC", "EXISTS", "EXPIRE", "EXPIREAT", "FLUSHALL", "FLUSHDB", "GEOADD", "GEOHASH", "GEOPOS", "GEODIST",
-            "GEORADIUS", "GEORADIUSBYMEMBER", "GETBIT", "GETRANGE", "GETSET", "HDEL", "HEXISTS", "HGET", "HGETALL", "HINCRBY", "HINCRBYFLOAT",
-            "HKEYS", "HLEN", "HMGET", "HMSET", "HSET", "HSETNX", "HSTRLEN", "HVALS", "INCR", "INCRBY", "INCRBYFLOAT", "KEYS", "LASTSAVE",
-            "LINDEX", "LINSERT", "LLEN", "LPOP", "LPUSH", "LPUSHX", "LRANGE", "LREM", "LSET", "LTRIM", "MGET", "MIGRATE", "MONITOR",
-            "MOVE", "MSET", "MSETNX", "MULTI", "PERSIST", "PEXPIRE", "PEXPIREAT", "PFADD", "PFCOUNT", "PFMERGE", "PING", "PSETEX",
-            "PSUBSCRIBE", "PUBSUB", "PTTL", "PUBLISH", "PUNSUBSCRIBE", "QUIT", "RANDOMKEY", "READONLY", "READWRITE", "RENAME", "RENAMENX",
-            "RESTORE", "ROLE", "RPOP", "RPOPLPUSH", "RPUSH", "RPUSHX", "SADD", "SAVE", "SCARD", "SCRIPT", "FLUSH", "LOAD", "SDIFF",
-            "SDIFFSTORE", "SELECT", "SETBIT", "SETEX", "SETNX", "SETRANGE", "SHUTDOWN", "SINTER", "SINTERSTORE", "SISMEMBER", "SLAVEOF",
-            "SLOWLOG", "SMEMBERS", "SMOVE", "SORT", "SPOP", "SRANDMEMBER", "SREM", "STRLEN", "SUBSCRIBE", "SUNION", "SUNIONSTORE", "SWAPDB",
-            "SYNC", "TIME", "TOUCH", "TTL", "TYPE", "UNSUBSCRIBE", "UNLINK", "UNWATCH", "WAIT", "WATCH", "ZADD", "ZCARD", "ZCOUNT", "ZINCRBY",
-            "ZINTERSTORE", "ZLEXCOUNT", "ZRANGE", "ZRANGEBYLEX", "ZREVRANGEBYLEX", "ZRANGEBYSCORE", "ZRANK", "ZREM", "ZREMRANGEBYLEX",
-            "ZREMRANGEBYRANK", "ZREMRANGEBYSCORE", "ZREVRANGE", "ZREVRANGEBYSCORE", "ZREVRANK", "ZSCORE", "ZUNIONSTORE", "SCAN", "SSCAN",
-            "HSCAN", "ZSCAN"
-        ],
-        operators: [
-        // NOT SUPPORTED
-        ],
-        builtinFunctions: [
-        // NOT SUPPORTED
-        ],
-        builtinVariables: [
-        // NOT SUPPORTED
-        ],
-        pseudoColumns: [
-        // NOT SUPPORTED
-        ],
-        tokenizer: {
-            root: [
-                { include: '@whitespace' },
-                { include: '@pseudoColumns' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@scopes' },
-                [/[;,.]/, 'delimiter'],
-                [/[()]/, '@brackets'],
-                [/[\w@#$]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@operators': 'operator',
-                            '@builtinVariables': 'predefined',
-                            '@builtinFunctions': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=!%&+\-*/|~^]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white']
-            ],
-            pseudoColumns: [
-                [/[$][A-Za-z_][\w@#$]*/, {
-                        cases: {
-                            '@pseudoColumns': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*/, 'number'],
-                [/[$][+-]*\d*(\.\d*)?/, 'number'],
-                [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number']
-            ],
-            strings: [
-                [/'/, { token: 'string', next: '@string' }],
-                [/"/, { token: 'string.double', next: '@stringDouble' }]
-            ],
-            string: [
-                [/[^']+/, 'string'],
-                [/''/, 'string'],
-                [/'/, { token: 'string', next: '@pop' }],
-            ],
-            stringDouble: [
-                [/[^"]+/, 'string.double'],
-                [/""/, 'string.double'],
-                [/"/, { token: 'string.double', next: '@pop' }]
-            ],
-            scopes: [
-            // NOT SUPPORTED
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/redshift/redshift.contribution.js b/node_modules/monaco-languages/release/dev/redshift/redshift.contribution.js
deleted file mode 100644
index a9c41ce..0000000
--- a/node_modules/monaco-languages/release/dev/redshift/redshift.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'redshift',
-        extensions: [],
-        aliases: ['Redshift', 'redshift'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./redshift'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/redshift/redshift.js b/node_modules/monaco-languages/release/dev/redshift/redshift.js
deleted file mode 100644
index 4bb50bc..0000000
--- a/node_modules/monaco-languages/release/dev/redshift/redshift.js
+++ /dev/null
@@ -1,210 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '--',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.sql',
-        ignoreCase: true,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        keywords: [
-            "AES128", "AES256", "ALL", "ALLOWOVERWRITE", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "AUTHORIZATION",
-            "BACKUP", "BETWEEN", "BINARY", "BLANKSASNULL", "BOTH", "BYTEDICT", "BZIP2", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN",
-            "CONSTRAINT", "CREATE", "CREDENTIALS", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
-            "CURRENT_USER_ID", "DEFAULT", "DEFERRABLE", "DEFLATE", "DEFRAG", "DELTA", "DELTA32K", "DESC", "DISABLE", "DISTINCT", "DO",
-            "ELSE", "EMPTYASNULL", "ENABLE", "ENCODE", "ENCRYPT", "ENCRYPTION", "END", "EXCEPT", "EXPLICIT", "FALSE", "FOR", "FOREIGN",
-            "FREEZE", "FROM", "FULL", "GLOBALDICT256", "GLOBALDICT64K", "GRANT", "GROUP", "GZIP", "HAVING", "IDENTITY", "IGNORE", "ILIKE",
-            "IN", "INITIALLY", "INNER", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "LEADING", "LEFT", "LIKE", "LIMIT", "LOCALTIME",
-            "LOCALTIMESTAMP", "LUN", "LUNS", "LZO", "LZOP", "MINUS", "MOSTLY13", "MOSTLY32", "MOSTLY8", "NATURAL", "NEW", "NOT", "NOTNULL",
-            "NULL", "NULLS", "OFF", "OFFLINE", "OFFSET", "OID", "OLD", "ON", "ONLY", "OPEN", "OR", "ORDER", "OUTER", "OVERLAPS", "PARALLEL",
-            "PARTITION", "PERCENT", "PERMISSIONS", "PLACING", "PRIMARY", "RAW", "READRATIO", "RECOVER", "REFERENCES", "RESPECT", "REJECTLOG",
-            "RESORT", "RESTORE", "RIGHT", "SELECT", "SESSION_USER", "SIMILAR", "SNAPSHOT", "SOME", "SYSDATE", "SYSTEM", "TABLE", "TAG",
-            "TDES", "TEXT255", "TEXT32K", "THEN", "TIMESTAMP", "TO", "TOP", "TRAILING", "TRUE", "TRUNCATECOLUMNS", "UNION", "UNIQUE", "USER",
-            "USING", "VERBOSE", "WALLET", "WHEN", "WHERE", "WITH", "WITHOUT"
-        ],
-        operators: [
-            "AND", "BETWEEN", "IN", "LIKE", "NOT", "OR", "IS", "NULL", "INTERSECT", "UNION", "INNER", "JOIN", "LEFT", "OUTER", "RIGHT"
-        ],
-        builtinFunctions: [
-            "current_schema", "current_schemas", "has_database_privilege", "has_schema_privilege", "has_table_privilege", "age",
-            "current_time", "current_timestamp", "localtime", "isfinite", "now", "ascii", "get_bit", "get_byte", "set_bit", "set_byte",
-            "to_ascii", "approximate percentile_disc", "avg", "count", "listagg", "max", "median", "min", "percentile_cont", "stddev_samp",
-            "stddev_pop", "sum", "var_samp", "var_pop", "bit_and", "bit_or", "bool_and", "bool_or", "cume_dist", "first_value", "lag",
-            "last_value", "lead", "nth_value", "ratio_to_report", "dense_rank", "ntile", "percent_rank", "rank", "row_number", "case",
-            "coalesce", "decode", "greatest", "least", "nvl", "nvl2", "nullif", "add_months", "at time zone", "convert_timezone",
-            "current_date", "date_cmp", "date_cmp_timestamp", "date_cmp_timestamptz", "date_part_year", "dateadd", "datediff",
-            "date_part", "date_trunc", "extract", "getdate", "interval_cmp", "last_day", "months_between", "next_day", "sysdate",
-            "timeofday", "timestamp_cmp", "timestamp_cmp_date", "timestamp_cmp_timestamptz", "timestamptz_cmp", "timestamptz_cmp_date",
-            "timestamptz_cmp_timestamp", "timezone", "to_timestamp", "trunc", "abs", "acos", "asin", "atan", "atan2", "cbrt", "ceil",
-            "ceiling", "checksum", "cos", "cot", "degrees", "dexp", "dlog1", "dlog10", "exp", "floor", "ln", "log", "mod", "pi", "power",
-            "radians", "random", "round", "sin", "sign", "sqrt", "tan", "to_hex", "bpcharcmp", "btrim", "bttext_pattern_cmp", "char_length",
-            "character_length", "charindex", "chr", "concat", "crc32", "func_sha1", "initcap", "left and rights", "len", "length", "lower",
-            "lpad and rpads", "ltrim", "md5", "octet_length", "position", "quote_ident", "quote_literal", "regexp_count", "regexp_instr",
-            "regexp_replace", "regexp_substr", "repeat", "replace", "replicate", "reverse", "rtrim", "split_part", "strpos", "strtol",
-            "substring", "textlen", "translate", "trim", "upper", "cast", "convert", "to_char", "to_date", "to_number", "json_array_length",
-            "json_extract_array_element_text", "json_extract_path_text", "current_setting", "pg_cancel_backend", "pg_terminate_backend",
-            "set_config", "current_database", "current_user", "current_user_id", "pg_backend_pid", "pg_last_copy_count", "pg_last_copy_id",
-            "pg_last_query_id", "pg_last_unload_count", "session_user", "slice_num", "user", "version", "abbrev", "acosd", "any", "area",
-            "array_agg", "array_append", "array_cat", "array_dims", "array_fill", "array_length", "array_lower", "array_ndims",
-            "array_position", "array_positions", "array_prepend", "array_remove", "array_replace", "array_to_json", "array_to_string",
-            "array_to_tsvector", "array_upper", "asind", "atan2d", "atand", "bit", "bit_length", "bound_box", "box",
-            "brin_summarize_new_values", "broadcast", "cardinality", "center", "circle", "clock_timestamp", "col_description", "concat_ws",
-            "convert_from", "convert_to", "corr", "cosd", "cotd", "covar_pop", "covar_samp", "current_catalog", "current_query",
-            "current_role", "currval", "cursor_to_xml", "diameter", "div", "encode", "enum_first", "enum_last", "enum_range", "every",
-            "family", "format", "format_type", "generate_series", "generate_subscripts", "get_current_ts_config", "gin_clean_pending_list",
-            "grouping", "has_any_column_privilege", "has_column_privilege", "has_foreign_data_wrapper_privilege", "has_function_privilege",
-            "has_language_privilege", "has_sequence_privilege", "has_server_privilege", "has_tablespace_privilege", "has_type_privilege",
-            "height", "host", "hostmask", "inet_client_addr", "inet_client_port", "inet_merge", "inet_same_family", "inet_server_addr",
-            "inet_server_port", "isclosed", "isempty", "isopen", "json_agg", "json_object", "json_object_agg", "json_populate_record",
-            "json_populate_recordset", "json_to_record", "json_to_recordset", "jsonb_agg", "jsonb_object_agg", "justify_days", "justify_hours",
-            "justify_interval", "lastval", "left", "line", "localtimestamp", "lower_inc", "lower_inf", "lpad", "lseg", "make_date",
-            "make_interval", "make_time", "make_timestamp", "make_timestamptz", "masklen", "mode", "netmask", "network", "nextval", "npoints",
-            "num_nonnulls", "num_nulls", "numnode", "obj_description", "overlay", "parse_ident", "path", "pclose", "percentile_disc",
-            "pg_advisory_lock", "pg_advisory_lock_shared", "pg_advisory_unlock", "pg_advisory_unlock_all", "pg_advisory_unlock_shared",
-            "pg_advisory_xact_lock", "pg_advisory_xact_lock_shared", "pg_backup_start_time", "pg_blocking_pids", "pg_client_encoding",
-            "pg_collation_is_visible", "pg_column_size", "pg_conf_load_time", "pg_control_checkpoint", "pg_control_init", "pg_control_recovery",
-            "pg_control_system", "pg_conversion_is_visible", "pg_create_logical_replication_slot", "pg_create_physical_replication_slot",
-            "pg_create_restore_point", "pg_current_xlog_flush_location", "pg_current_xlog_insert_location", "pg_current_xlog_location",
-            "pg_database_size", "pg_describe_object", "pg_drop_replication_slot", "pg_export_snapshot", "pg_filenode_relation",
-            "pg_function_is_visible", "pg_get_constraintdef", "pg_get_expr", "pg_get_function_arguments", "pg_get_function_identity_arguments",
-            "pg_get_function_result", "pg_get_functiondef", "pg_get_indexdef", "pg_get_keywords", "pg_get_object_address",
-            "pg_get_owned_sequence", "pg_get_ruledef", "pg_get_serial_sequence", "pg_get_triggerdef", "pg_get_userbyid", "pg_get_viewdef",
-            "pg_has_role", "pg_identify_object", "pg_identify_object_as_address", "pg_index_column_has_property", "pg_index_has_property",
-            "pg_indexam_has_property", "pg_indexes_size", "pg_is_in_backup", "pg_is_in_recovery", "pg_is_other_temp_schema",
-            "pg_is_xlog_replay_paused", "pg_last_committed_xact", "pg_last_xact_replay_timestamp", "pg_last_xlog_receive_location",
-            "pg_last_xlog_replay_location", "pg_listening_channels", "pg_logical_emit_message", "pg_logical_slot_get_binary_changes",
-            "pg_logical_slot_get_changes", "pg_logical_slot_peek_binary_changes", "pg_logical_slot_peek_changes", "pg_ls_dir",
-            "pg_my_temp_schema", "pg_notification_queue_usage", "pg_opclass_is_visible", "pg_operator_is_visible", "pg_opfamily_is_visible",
-            "pg_options_to_table", "pg_postmaster_start_time", "pg_read_binary_file", "pg_read_file", "pg_relation_filenode",
-            "pg_relation_filepath", "pg_relation_size", "pg_reload_conf", "pg_replication_origin_create", "pg_replication_origin_drop",
-            "pg_replication_origin_oid", "pg_replication_origin_progress", "pg_replication_origin_session_is_setup",
-            "pg_replication_origin_session_progress", "pg_replication_origin_session_reset", "pg_replication_origin_session_setup",
-            "pg_replication_origin_xact_reset", "pg_replication_origin_xact_setup", "pg_rotate_logfile", "pg_size_bytes", "pg_size_pretty",
-            "pg_sleep", "pg_sleep_for", "pg_sleep_until", "pg_start_backup", "pg_stat_file", "pg_stop_backup", "pg_switch_xlog",
-            "pg_table_is_visible", "pg_table_size", "pg_tablespace_databases", "pg_tablespace_location", "pg_tablespace_size",
-            "pg_total_relation_size", "pg_trigger_depth", "pg_try_advisory_lock", "pg_try_advisory_lock_shared", "pg_try_advisory_xact_lock",
-            "pg_try_advisory_xact_lock_shared", "pg_ts_config_is_visible", "pg_ts_dict_is_visible", "pg_ts_parser_is_visible",
-            "pg_ts_template_is_visible", "pg_type_is_visible", "pg_typeof", "pg_xact_commit_timestamp", "pg_xlog_location_diff",
-            "pg_xlog_replay_pause", "pg_xlog_replay_resume", "pg_xlogfile_name", "pg_xlogfile_name_offset", "phraseto_tsquery",
-            "plainto_tsquery", "point", "polygon", "popen", "pqserverversion", "query_to_xml", "querytree", "quote_nullable", "radius",
-            "range_merge", "regexp_matches", "regexp_split_to_array", "regexp_split_to_table", "regr_avgx", "regr_avgy", "regr_count",
-            "regr_intercept", "regr_r2", "regr_slope", "regr_sxx", "regr_sxy", "regr_syy", "right", "row_security_active", "row_to_json",
-            "rpad", "scale", "set_masklen", "setseed", "setval", "setweight", "shobj_description", "sind", "sprintf", "statement_timestamp",
-            "stddev", "string_agg", "string_to_array", "strip", "substr", "table_to_xml", "table_to_xml_and_xmlschema", "tand", "text",
-            "to_json", "to_regclass", "to_regnamespace", "to_regoper", "to_regoperator", "to_regproc", "to_regprocedure", "to_regrole",
-            "to_regtype", "to_tsquery", "to_tsvector", "transaction_timestamp", "ts_debug", "ts_delete", "ts_filter", "ts_headline",
-            "ts_lexize", "ts_parse", "ts_rank", "ts_rank_cd", "ts_rewrite", "ts_stat", "ts_token_type", "tsquery_phrase", "tsvector_to_array",
-            "tsvector_update_trigger", "tsvector_update_trigger_column", "txid_current", "txid_current_snapshot", "txid_snapshot_xip",
-            "txid_snapshot_xmax", "txid_snapshot_xmin", "txid_visible_in_snapshot", "unnest", "upper_inc", "upper_inf", "variance", "width",
-            "width_bucket", "xml_is_well_formed", "xml_is_well_formed_content", "xml_is_well_formed_document", "xmlagg", "xmlcomment",
-            "xmlconcat", "xmlelement", "xmlexists", "xmlforest", "xmlparse", "xmlpi", "xmlroot", "xmlserialize", "xpath", "xpath_exists"
-        ],
-        builtinVariables: [
-        // NOT SUPPORTED
-        ],
-        pseudoColumns: [
-        // NOT SUPPORTED
-        ],
-        tokenizer: {
-            root: [
-                { include: '@comments' },
-                { include: '@whitespace' },
-                { include: '@pseudoColumns' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@complexIdentifiers' },
-                { include: '@scopes' },
-                [/[;,.]/, 'delimiter'],
-                [/[()]/, '@brackets'],
-                [/[\w@#$]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@operators': 'operator',
-                            '@builtinVariables': 'predefined',
-                            '@builtinFunctions': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=!%&+\-*/|~^]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white']
-            ],
-            comments: [
-                [/--+.*/, 'comment'],
-                [/\/\*/, { token: 'comment.quote', next: '@comment' }]
-            ],
-            comment: [
-                [/[^*/]+/, 'comment'],
-                // Not supporting nested comments, as nested comments seem to not be standard?
-                // i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic
-                // [/\/\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(
-                [/\*\//, { token: 'comment.quote', next: '@pop' }],
-                [/./, 'comment']
-            ],
-            pseudoColumns: [
-                [/[$][A-Za-z_][\w@#$]*/, {
-                        cases: {
-                            '@pseudoColumns': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*/, 'number'],
-                [/[$][+-]*\d*(\.\d*)?/, 'number'],
-                [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number']
-            ],
-            strings: [
-                [/'/, { token: 'string', next: '@string' }],
-            ],
-            string: [
-                [/[^']+/, 'string'],
-                [/''/, 'string'],
-                [/'/, { token: 'string', next: '@pop' }]
-            ],
-            complexIdentifiers: [
-                [/"/, { token: 'identifier.quote', next: '@quotedIdentifier' }]
-            ],
-            quotedIdentifier: [
-                [/[^"]+/, 'identifier'],
-                [/""/, 'identifier'],
-                [/"/, { token: 'identifier.quote', next: '@pop' }]
-            ],
-            scopes: [
-            // NOT SUPPORTED
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/ruby/ruby.contribution.js b/node_modules/monaco-languages/release/dev/ruby/ruby.contribution.js
deleted file mode 100644
index 749ee2b..0000000
--- a/node_modules/monaco-languages/release/dev/ruby/ruby.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'ruby',
-        extensions: ['.rb', '.rbx', '.rjs', '.gemspec', '.pp'],
-        filenames: ['rakefile'],
-        aliases: ['Ruby', 'rb'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./ruby'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/ruby/ruby.js b/node_modules/monaco-languages/release/dev/ruby/ruby.js
deleted file mode 100644
index 04cd648..0000000
--- a/node_modules/monaco-languages/release/dev/ruby/ruby.js
+++ /dev/null
@@ -1,394 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#',
-            blockComment: ['=begin', '=end'],
-        },
-        brackets: [
-            ['(', ')'],
-            ['{', '}'],
-            ['[', ']']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        indentationRules: {
-            increaseIndentPattern: new RegExp('^\\s*((begin|class|(private|protected)\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\sdo\\b)|([^#]*=\\s*(case|if|unless)))\\b([^#\\{;]|("|\'|\/).*\\4)*(#.*)?$'),
-            decreaseIndentPattern: new RegExp('^\\s*([}\\]]([,)]?\\s*(#|$)|\\.[a-zA-Z_]\\w*\\b)|(end|rescue|ensure|else|elsif|when)\\b)'),
-        }
-    };
-    /*
-     * Ruby language definition
-     *
-     * Quite a complex language due to elaborate escape sequences
-     * and quoting of literate strings/regular expressions, and
-     * an 'end' keyword that does not always apply to modifiers like until and while,
-     * and a 'do' keyword that sometimes starts a block, but sometimes is part of
-     * another statement (like 'while').
-     *
-     * (1) end blocks:
-     * 'end' may end declarations like if or until, but sometimes 'if' or 'until'
-     * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block
-     * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'
-     * To do proper brace matching we do some elaborate state manipulation.
-     * some examples:
-     *
-     *   until bla do
-     *     work until tired
-     *     list.each do
-     *       something if test
-     *     end
-     *   end
-     *
-     * or
-     *
-     * if test
-     *  something (if test then x end)
-     *  bar if bla
-     * end
-     *
-     * or, how about using class as a property..
-     *
-     * class Test
-     *   def endpoint
-     *     self.class.endpoint || routes
-     *   end
-     * end
-     *
-     * (2) quoting:
-     * there are many kinds of strings and escape sequences. But also, one can
-     * start many string-like things as '%qx' where q specifies the kind of string
-     * (like a command, escape expanded, regular expression, symbol etc.), and x is
-     * some character and only another 'x' ends the sequence. Except for brackets
-     * where the closing bracket ends the sequence.. and except for a nested bracket
-     * inside the string like entity. Also, such strings can contain interpolated
-     * ruby expressions again (and span multiple lines). Moreover, expanded
-     * regular expression can also contain comments.
-     */
-    exports.language = {
-        tokenPostfix: '.ruby',
-        keywords: [
-            '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',
-            'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',
-            'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',
-            'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',
-            'until', 'when', 'while', 'yield',
-        ],
-        keywordops: [
-            '::', '..', '...', '?', ':', '=>'
-        ],
-        builtins: [
-            'require', 'public', 'private', 'include', 'extend', 'attr_reader',
-            'protected', 'private_class_method', 'protected_class_method', 'new'
-        ],
-        // these are closed by 'end' (if, while and until are handled separately)
-        declarations: [
-            'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'
-        ],
-        linedecls: [
-            'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'
-        ],
-        operators: [
-            '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',
-            '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',
-            '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='
-        ],
-        brackets: [
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' }
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%\.]+/,
-        // escape sequences
-        escape: /(?:[abefnrstv\\"'\n\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,
-        escapes: /\\(?:C\-(@escape|.)|c(@escape|.)|@escape)/,
-        decpart: /\d(_?\d)*/,
-        decimal: /0|@decpart/,
-        delim: /[^a-zA-Z0-9\s\n\r]/,
-        heredelim: /(?:\w+|'[^']*'|"[^"]*"|`[^`]*`)/,
-        regexpctl: /[(){}\[\]\$\^|\-*+?\.]/,
-        regexpesc: /\\(?:[AzZbBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            // Main entry.
-            // root.<decl> where decl is the current opening declaration (like 'class')
-            root: [
-                // identifiers and keywords
-                // most complexity here is due to matching 'end' correctly with declarations.
-                // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)
-                [/^(\s*)([a-z_]\w*[!?=]?)/, ['white',
-                        {
-                            cases: {
-                                'for|until|while': { token: 'keyword.$2', next: '@dodecl.$2' },
-                                '@declarations': { token: 'keyword.$2', next: '@root.$2' },
-                                'end': { token: 'keyword.$S2', next: '@pop' },
-                                '@keywords': 'keyword',
-                                '@builtins': 'predefined',
-                                '@default': 'identifier'
-                            }
-                        }]],
-                [/[a-z_]\w*[!?=]?/,
-                    {
-                        cases: {
-                            'if|unless|while|until': { token: 'keyword.$0x', next: '@modifier.$0x' },
-                            'for': { token: 'keyword.$2', next: '@dodecl.$2' },
-                            '@linedecls': { token: 'keyword.$0', next: '@root.$0' },
-                            'end': { token: 'keyword.$S2', next: '@pop' },
-                            '@keywords': 'keyword',
-                            '@builtins': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[A-Z][\w]*[!?=]?/, 'constructor.identifier'],
-                [/\$[\w]*/, 'global.constant'],
-                [/@[\w]*/, 'namespace.instance.identifier'],
-                [/@@[\w]*/, 'namespace.class.identifier'],
-                // here document
-                [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],
-                [/[ \t\r\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],
-                [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],
-                // whitespace
-                { include: '@whitespace' },
-                // strings
-                [/"/, { token: 'string.d.delim', next: '@dstring.d."' }],
-                [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],
-                // % literals. For efficiency, rematch in the 'pstring' state
-                [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],
-                // commands and symbols
-                [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],
-                [/:(\w|[$@])\w*[!?=]?/, 'string.s'],
-                [/:"/, { token: 'string.s.delim', next: '@dstring.s."' }],
-                [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],
-                // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line
-                [/\/(?=(\\\/|[^\/\n])+\/)/, { token: 'regexp.delim', next: '@regexp' }],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@keywordops': 'keyword',
-                            '@operators': 'operator',
-                            '@default': ''
-                        }
-                    }],
-                [/[;,]/, 'delimiter'],
-                // numbers
-                [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],
-                [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],
-                [/0[bB][01](_?[01])*/, 'number.binary'],
-                [/0[dD]@decpart/, 'number'],
-                [/@decimal((\.@decpart)?([eE][\-+]?@decpart)?)/, {
-                        cases: {
-                            '$1': 'number.float',
-                            '@default': 'number'
-                        }
-                    }],
-            ],
-            // used to not treat a 'do' as a block opener if it occurs on the same
-            // line as a 'do' statement: 'while|until|for'
-            // dodecl.<decl> where decl is the declarations started, like 'while'
-            dodecl: [
-                [/^/, { token: '', switchTo: '@root.$S2' }],
-                [/[a-z_]\w*[!?=]?/, {
-                        cases: {
-                            'end': { token: 'keyword.$S2', next: '@pop' },
-                            'do': { token: 'keyword', switchTo: '@root.$S2' },
-                            '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },
-                            '@keywords': 'keyword',
-                            '@builtins': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                { include: '@root' }
-            ],
-            // used to prevent potential modifiers ('if|until|while|unless') to match
-            // with 'end' keywords.
-            // modifier.<decl>x where decl is the declaration starter, like 'if'
-            modifier: [
-                [/^/, '', '@pop'],
-                [/[a-z_]\w*[!?=]?/, {
-                        cases: {
-                            'end': { token: 'keyword.$S2', next: '@pop' },
-                            'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },
-                            '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },
-                            '@keywords': 'keyword',
-                            '@builtins': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                { include: '@root' }
-            ],
-            // single quote strings (also used for symbols)
-            // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)
-            sstring: [
-                [/[^\\']+/, 'string.$S2'],
-                [/\\\\|\\'|\\$/, 'string.$S2.escape'],
-                [/\\./, 'string.$S2.invalid'],
-                [/'/, { token: 'string.$S2.delim', next: '@pop' }]
-            ],
-            // double quoted "string".
-            // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)
-            // and delim is the ending delimiter (" or `)
-            dstring: [
-                [/[^\\`"#]+/, 'string.$S2'],
-                [/#/, 'string.$S2.escape', '@interpolated'],
-                [/\\$/, 'string.$S2.escape'],
-                [/@escapes/, 'string.$S2.escape'],
-                [/\\./, 'string.$S2.escape.invalid'],
-                [/[`"]/, {
-                        cases: {
-                            '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },
-                            '@default': 'string.$S2'
-                        }
-                    }]
-            ],
-            // literal documents
-            // heredoc.<close> where close is the closing delimiter
-            heredoc: [
-                [/^(\s*)(@heredelim)$/, {
-                        cases: {
-                            '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],
-                            '@default': ['string.heredoc', 'string.heredoc']
-                        }
-                    }],
-                [/.*/, 'string.heredoc'],
-            ],
-            // interpolated sequence
-            interpolated: [
-                [/\$\w*/, 'global.constant', '@pop'],
-                [/@\w*/, 'namespace.class.identifier', '@pop'],
-                [/@@\w*/, 'namespace.instance.identifier', '@pop'],
-                [/[{]/, { token: 'string.escape.curly', switchTo: '@interpolated_compound' }],
-                ['', '', '@pop'],
-            ],
-            // any code
-            interpolated_compound: [
-                [/[}]/, { token: 'string.escape.curly', next: '@pop' }],
-                { include: '@root' },
-            ],
-            // %r quoted regexp
-            // pregexp.<open>.<close> where open/close are the open/close delimiter
-            pregexp: [
-                { include: '@whitespace' },
-                // turns out that you can quote using regex control characters, aargh!
-                // for example; %r|kgjgaj| is ok (even though | is used for alternation)
-                // so, we need to match those first
-                [/[^\(\{\[\\]/, {
-                        cases: {
-                            '$#==$S3': { token: 'regexp.delim', next: '@pop' },
-                            '$#==$S2': { token: 'regexp.delim', next: '@push' },
-                            '~[)}\\]]': '@brackets.regexp.escape.control',
-                            '~@regexpctl': 'regexp.escape.control',
-                            '@default': 'regexp'
-                        }
-                    }],
-                { include: '@regexcontrol' },
-            ],
-            // We match regular expression quite precisely
-            regexp: [
-                { include: '@regexcontrol' },
-                [/[^\\\/]/, 'regexp'],
-                ['/[ixmp]*', { token: 'regexp.delim' }, '@pop'],
-            ],
-            regexcontrol: [
-                [/(\{)(\d+(?:,\d*)?)(\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],
-                [/(\[)(\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],
-                [/(\()(\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],
-                [/\(\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],
-                [/[()]/, '@brackets.regexp.escape.control'],
-                [/@regexpctl/, 'regexp.escape.control'],
-                [/\\$/, 'regexp.escape'],
-                [/@regexpesc/, 'regexp.escape'],
-                [/\\\./, 'regexp.invalid'],
-                [/#/, 'regexp.escape', '@interpolated'],
-            ],
-            regexrange: [
-                [/-/, 'regexp.escape.control'],
-                [/\^/, 'regexp.invalid'],
-                [/\\$/, 'regexp.escape'],
-                [/@regexpesc/, 'regexp.escape'],
-                [/[^\]]/, 'regexp'],
-                [/\]/, '@brackets.regexp.escape.control', '@pop'],
-            ],
-            regexpcomment: [
-                [/[^)]+/, 'comment'],
-                [/\)/, { token: 'regexp.escape.control', next: '@pop' }]
-            ],
-            // % quoted strings
-            // A bit repetitive since we need to often special case the kind of ending delimiter
-            pstring: [
-                [/%([qws])\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],
-                [/%([qws])\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],
-                [/%([qws])\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],
-                [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],
-                [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],
-                [/%r\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],
-                [/%r\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],
-                [/%r\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],
-                [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],
-                [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],
-                [/%(x|W|Q?)\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],
-                [/%(x|W|Q?)\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],
-                [/%(x|W|Q?)\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],
-                [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],
-                [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],
-                [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],
-                [/./, { token: 'invalid', next: '@pop' }],
-            ],
-            // non-expanded quoted string.
-            // qstring.<kind>.<open>.<close>
-            //  kind = q|w|s  (single quote, array, symbol)
-            //  open = open delimiter
-            //  close = close delimiter
-            qstring: [
-                [/\\$/, 'string.$S2.escape'],
-                [/\\./, 'string.$S2.escape'],
-                [/./, {
-                        cases: {
-                            '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },
-                            '$#==$S3': { token: 'string.$S2.delim', next: '@push' },
-                            '@default': 'string.$S2'
-                        }
-                    }],
-            ],
-            // expanded quoted string.
-            // qqstring.<kind>.<open>.<close>
-            //  kind = Q|W|x  (double quote, array, command)
-            //  open = open delimiter
-            //  close = close delimiter
-            qqstring: [
-                [/#/, 'string.$S2.escape', '@interpolated'],
-                { include: '@qstring' }
-            ],
-            // whitespace & comments
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/^\s*=begin\b/, 'comment', '@comment'],
-                [/#.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^=]+/, 'comment'],
-                [/^\s*=begin\b/, 'comment.invalid'],
-                [/^\s*=end\b.*/, 'comment', '@pop'],
-                [/[=]/, 'comment']
-            ],
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/rust/rust.contribution.js b/node_modules/monaco-languages/release/dev/rust/rust.contribution.js
deleted file mode 100644
index f97121b..0000000
--- a/node_modules/monaco-languages/release/dev/rust/rust.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'rust',
-        extensions: ['.rs', '.rlib'],
-        aliases: ['Rust', 'rust'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./rust'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/rust/rust.js b/node_modules/monaco-languages/release/dev/rust/rust.js
deleted file mode 100644
index 2e5de16..0000000
--- a/node_modules/monaco-languages/release/dev/rust/rust.js
+++ /dev/null
@@ -1,157 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '[', close: ']' },
-            { open: '{', close: '}' },
-            { open: '(', close: ')' },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#pragma\\s+region\\b"),
-                end: new RegExp("^\\s*#pragma\\s+endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        tokenPostfix: '.rust',
-        defaultToken: 'invalid',
-        keywords: [
-            'as', 'box', 'break', 'const', 'continue', 'crate', 'else', 'enum',
-            'extern', 'false', 'fn', 'for', 'if', 'impl', 'in', 'let', 'loop',
-            'match', 'mod', 'move', 'mut', 'pub', 'ref', 'return', 'self',
-            'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use',
-            'where', 'while', 'catch', 'default', 'union', 'static', 'abstract',
-            'alignof', 'become', 'do', 'final', 'macro', 'offsetof', 'override',
-            'priv', 'proc', 'pure', 'sizeof', 'typeof', 'unsized', 'virtual',
-            'yield',
-        ],
-        typeKeywords: [
-            'Self', 'm32', 'm64', 'm128', 'f80', 'f16', 'f128', 'int', 'uint',
-            'float', 'char', 'bool', 'u8', 'u16', 'u32', 'u64', 'f32', 'f64', 'i8',
-            'i16', 'i32', 'i64', 'str', 'Option', 'Either', 'c_float', 'c_double',
-            'c_void', 'FILE', 'fpos_t', 'DIR', 'dirent', 'c_char', 'c_schar',
-            'c_uchar', 'c_short', 'c_ushort', 'c_int', 'c_uint', 'c_long',
-            'c_ulong', 'size_t', 'ptrdiff_t', 'clock_t', 'time_t', 'c_longlong',
-            'c_ulonglong', 'intptr_t', 'uintptr_t', 'off_t', 'dev_t', 'ino_t',
-            'pid_t', 'mode_t', 'ssize_t',
-        ],
-        constants: [
-            'true', 'false', 'Some', 'None', 'Left', 'Right', 'Ok', 'Err',
-        ],
-        supportConstants: [
-            'EXIT_FAILURE', 'EXIT_SUCCESS', 'RAND_MAX', 'EOF', 'SEEK_SET',
-            'SEEK_CUR', 'SEEK_END', '_IOFBF', '_IONBF', '_IOLBF', 'BUFSIZ',
-            'FOPEN_MAX', 'FILENAME_MAX', 'L_tmpnam', 'TMP_MAX', 'O_RDONLY',
-            'O_WRONLY', 'O_RDWR', 'O_APPEND', 'O_CREAT', 'O_EXCL', 'O_TRUNC',
-            'S_IFIFO', 'S_IFCHR', 'S_IFBLK', 'S_IFDIR', 'S_IFREG', 'S_IFMT',
-            'S_IEXEC', 'S_IWRITE', 'S_IREAD', 'S_IRWXU', 'S_IXUSR', 'S_IWUSR',
-            'S_IRUSR', 'F_OK', 'R_OK', 'W_OK', 'X_OK', 'STDIN_FILENO',
-            'STDOUT_FILENO', 'STDERR_FILENO',
-        ],
-        supportMacros: [
-            'format!', 'print!', 'println!', 'panic!', 'format_args!', 'unreachable!',
-            'write!', 'writeln!'
-        ],
-        operators: [
-            '!', '!=', '%', '%=', '&', '&=', '&&', '*', '*=', '+', '+=', '-', '-=',
-            '->', '.', '..', '...', '/', '/=', ':', ';', '<<', '<<=', '<', '<=', '=',
-            '==', '=>', '>', '>=', '>>', '>>=', '@', '^', '^=', '|', '|=', '||', '_',
-            '?', '#'
-        ],
-        escapes: /\\([nrt0\"''\\]|x\h{2}|u\{\h{1,6}\})/,
-        delimiters: /[,]/,
-        symbols: /[\#\!\%\&\*\+\-\.\/\:\;\<\=\>\@\^\|_\?]+/,
-        intSuffixes: /[iu](8|16|32|64|128|size)/,
-        floatSuffixes: /f(32|64)/,
-        tokenizer: {
-            root: [
-                [/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/,
-                    {
-                        cases: {
-                            '@typeKeywords': 'keyword.type',
-                            '@keywords': 'keyword',
-                            '@supportConstants': 'keyword',
-                            '@supportMacros': 'keyword',
-                            '@constants': 'keyword',
-                            '@default': 'identifier',
-                        }
-                    }
-                ],
-                // Designator
-                [/\$/, 'identifier'],
-                // Lifetime annotations
-                [/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\'])/, 'identifier'],
-                // Byte literal
-                [/'\S'/, 'string.byteliteral'],
-                // Strings
-                [/"/, { token: 'string.quote', bracket: '@open', next: '@string' }],
-                { include: '@numbers' },
-                // Whitespace + comments
-                { include: '@whitespace' },
-                [/@delimiters/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'delimiter'
-                        }
-                    }],
-                [/[{}()\[\]<>]/, '@brackets'],
-                [/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                [/\/\*/, 'comment', '@push'],
-                ["\\*/", 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
-            ],
-            numbers: [
-                //Octal
-                [/(0o[0-7_]+)(@intSuffixes)?/, { token: 'number' }],
-                //Binary
-                [/(0b[0-1_]+)(@intSuffixes)?/, { token: 'number' }],
-                //Exponent
-                [/[\d][\d_]*(\.[\d][\d_]*)?[eE][+-][\d_]+(@floatSuffixes)?/, { token: 'number' }],
-                //Float
-                [/\b(\d\.?[\d_]*)(@floatSuffixes)?\b/, { token: 'number' }],
-                //Hexadecimal
-                [/(0x[\da-fA-F]+)_?(@intSuffixes)?/, { token: 'number' }],
-                //Integer
-                [/[\d][\d_]*(@intSuffixes?)?/, { token: 'number' }],
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/sb/sb.contribution.js b/node_modules/monaco-languages/release/dev/sb/sb.contribution.js
deleted file mode 100644
index bdb46b5..0000000
--- a/node_modules/monaco-languages/release/dev/sb/sb.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'sb',
-        extensions: ['.sb'],
-        aliases: ['Small Basic', 'sb'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./sb'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/sb/sb.js b/node_modules/monaco-languages/release/dev/sb/sb.js
deleted file mode 100644
index b9dd82c..0000000
--- a/node_modules/monaco-languages/release/dev/sb/sb.js
+++ /dev/null
@@ -1,99 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '\'',
-        },
-        brackets: [
-            ['(', ')'], ['[', ']'],
-            ['If', 'EndIf'],
-            ['While', 'EndWhile'],
-            ['For', 'EndFor'],
-            ['Sub', 'EndSub']
-        ],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.sb',
-        ignoreCase: true,
-        brackets: [
-            { token: 'delimiter.array', open: '[', close: ']' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            // Special bracket statement pairs
-            { token: 'keyword.tag-if', open: 'If', close: 'EndIf' },
-            { token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },
-            { token: 'keyword.tag-for', open: 'For', close: 'EndFor' },
-            { token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' },
-        ],
-        keywords: [
-            'Else', 'ElseIf', 'EndFor', 'EndIf', 'EndSub', 'EndWhile',
-            'For', 'Goto', 'If', 'Step', 'Sub', 'Then', 'To', 'While'
-        ],
-        tagwords: [
-            'If', 'Sub', 'While', 'For'
-        ],
-        operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],
-        // we include these common regular expressions
-        identifier: /[a-zA-Z_][\w]*/,
-        symbols: /[=><:+\-*\/%\.,]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // whitespace
-                { include: '@whitespace' },
-                // classes
-                [/(@identifier)(?=[.])/, 'type'],
-                // identifiers, tagwords, and keywords
-                [/@identifier/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@operators': 'operator',
-                            '@default': 'variable.name'
-                        }
-                    }],
-                // methods, properties, and events
-                [/([.])(@identifier)/, {
-                        cases: {
-                            '$2': ['delimiter', 'type.member'],
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\.\d+/, 'number.float'],
-                [/\d+/, 'number'],
-                // delimiters and operators
-                [/[()\[\]]/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'operator',
-                            '@default': 'delimiter'
-                        }
-                    }],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/(\').*$/, 'comment']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"C?/, 'string', '@pop']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/scheme/scheme.contribution.js b/node_modules/monaco-languages/release/dev/scheme/scheme.contribution.js
deleted file mode 100644
index 07d1df6..0000000
--- a/node_modules/monaco-languages/release/dev/scheme/scheme.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'scheme',
-        extensions: ['.scm', '.ss', '.sch', '.rkt'],
-        aliases: ['scheme', 'Scheme'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./scheme'], resolve_1, reject_1); }); },
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/scheme/scheme.js b/node_modules/monaco-languages/release/dev/scheme/scheme.js
deleted file mode 100644
index 412e464..0000000
--- a/node_modules/monaco-languages/release/dev/scheme/scheme.js
+++ /dev/null
@@ -1,109 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: ';',
-            blockComment: ['#|', '|#'],
-        },
-        brackets: [['(', ')'], ['{', '}'], ['[', ']']],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: true,
-        tokenPostfix: '.scheme',
-        brackets: [
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' },
-        ],
-        keywords: [
-            'case',
-            'do',
-            'let',
-            'loop',
-            'if',
-            'else',
-            'when',
-            'cons',
-            'car',
-            'cdr',
-            'cond',
-            'lambda',
-            'lambda*',
-            'syntax-rules',
-            'format',
-            'set!',
-            'quote',
-            'eval',
-            'append',
-            'list',
-            'list?',
-            'member?',
-            'load',
-        ],
-        constants: ['#t', '#f'],
-        operators: ['eq?', 'eqv?', 'equal?', 'and', 'or', 'not', 'null?'],
-        tokenizer: {
-            root: [
-                [/#[xXoObB][0-9a-fA-F]+/, 'number.hex'],
-                [/[+-]?\d+(?:(?:\.\d*)?(?:[eE][+-]?\d+)?)?/, 'number.float'],
-                [
-                    /(?:\b(?:(define|define-syntax|define-macro))\b)(\s+)((?:\w|\-|\!|\?)*)/,
-                    ['keyword', 'white', 'variable'],
-                ],
-                { include: '@whitespace' },
-                { include: '@strings' },
-                [
-                    /[a-zA-Z_#][a-zA-Z0-9_\-\?\!\*]*/,
-                    {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@constants': 'constant',
-                            '@operators': 'operators',
-                            '@default': 'identifier',
-                        },
-                    },
-                ],
-            ],
-            comment: [
-                [/[^\|#]+/, 'comment'],
-                [/#\|/, 'comment', '@push'],
-                [/\|#/, 'comment', '@pop'],
-                [/[\|#]/, 'comment'],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white'],
-                [/#\|/, 'comment', '@comment'],
-                [/;.*$/, 'comment'],
-            ],
-            strings: [
-                [/"$/, 'string', '@popall'],
-                [/"(?=.)/, 'string', '@multiLineString'],
-            ],
-            multiLineString: [
-                [/[^\\"]+$/, 'string', '@popall'],
-                [/[^\\"]+/, 'string'],
-                [/\\./, 'string.escape'],
-                [/"/, 'string', '@popall'],
-                [/\\$/, 'string']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/scss/scss.contribution.js b/node_modules/monaco-languages/release/dev/scss/scss.contribution.js
deleted file mode 100644
index af79a46..0000000
--- a/node_modules/monaco-languages/release/dev/scss/scss.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'scss',
-        extensions: ['.scss'],
-        aliases: ['Sass', 'sass', 'scss'],
-        mimetypes: ['text/x-scss', 'text/scss'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./scss'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/scss/scss.js b/node_modules/monaco-languages/release/dev/scss/scss.js
deleted file mode 100644
index 6fa1bc4..0000000
--- a/node_modules/monaco-languages/release/dev/scss/scss.js
+++ /dev/null
@@ -1,246 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(#?-?\d*\.\d\w*%?)|([@$#!.:]?[\w-?]+%?)|[@#!.]/g,
-        comments: {
-            blockComment: ['/*', '*/'],
-            lineComment: '//'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '\'', close: '\'', notIn: ['string', 'comment'] },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*\\/\\*\\s*#region\\b\\s*(.*?)\\s*\\*\\/"),
-                end: new RegExp("^\\s*\\/\\*\\s*#endregion\\b.*\\*\\/")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.scss',
-        ws: '[ \t\n\r\f]*',
-        identifier: '-?-?([a-zA-Z]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))([\\w\\-]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))*',
-        brackets: [
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.bracket' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '<', close: '>', token: 'delimiter.angle' }
-        ],
-        tokenizer: {
-            root: [
-                { include: '@selector' },
-            ],
-            selector: [
-                { include: '@comments' },
-                { include: '@import' },
-                { include: '@variabledeclaration' },
-                { include: '@warndebug' },
-                ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],
-                ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],
-                ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],
-                ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],
-                ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],
-                ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],
-                ['url(\\-prefix)?\\(', { token: 'meta', next: '@urldeclaration' }],
-                { include: '@controlstatement' },
-                { include: '@selectorname' },
-                ['[&\\*]', 'tag'],
-                ['[>\\+,]', 'delimiter'],
-                ['\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],
-                ['{', { token: 'delimiter.curly', next: '@selectorbody' }],
-            ],
-            selectorbody: [
-                ['[*_]?@identifier@ws:(?=(\\s|\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],
-                { include: '@selector' },
-                ['[@](extend)', { token: 'keyword', next: '@extendbody' }],
-                ['[@](return)', { token: 'keyword', next: '@declarationbody' }],
-                ['}', { token: 'delimiter.curly', next: '@pop' }],
-            ],
-            selectorname: [
-                ['#{', { token: 'meta', next: '@variableinterpolation' }],
-                ['(\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],
-            ],
-            selectorattribute: [
-                { include: '@term' },
-                [']', { token: 'delimiter.bracket', next: '@pop' }],
-            ],
-            term: [
-                { include: '@comments' },
-                ['url(\\-prefix)?\\(', { token: 'meta', next: '@urldeclaration' }],
-                { include: '@functioninvocation' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@variablereference' },
-                ['(and\\b|or\\b|not\\b)', 'operator'],
-                { include: '@name' },
-                ['([<>=\\+\\-\\*\\/\\^\\|\\~,])', 'operator'],
-                [',', 'delimiter'],
-                ['!default', 'literal'],
-                ['\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }],
-            ],
-            rulevalue: [
-                { include: '@term' },
-                ['!important', 'literal'],
-                [';', 'delimiter', '@pop'],
-                ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],
-                ['(?=})', { token: '', next: '@pop' }],
-            ],
-            nestedproperty: [
-                ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],
-                { include: '@comments' },
-                ['}', { token: 'delimiter.curly', next: '@pop' }],
-            ],
-            warndebug: [
-                ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }],
-            ],
-            import: [
-                ['[@](import)', { token: 'keyword', next: '@declarationbody' }],
-            ],
-            variabledeclaration: [
-                ['\\$@identifier@ws:', 'variable.decl', '@declarationbody'],
-            ],
-            urldeclaration: [
-                { include: '@strings' },
-                ['[^)\r\n]+', 'string'],
-                ['\\)', { token: 'meta', next: '@pop' }],
-            ],
-            parenthizedterm: [
-                { include: '@term' },
-                ['\\)', { token: 'delimiter.parenthesis', next: '@pop' }],
-            ],
-            declarationbody: [
-                { include: '@term' },
-                [';', 'delimiter', '@pop'],
-                ['(?=})', { token: '', next: '@pop' }],
-            ],
-            extendbody: [
-                { include: '@selectorname' },
-                ['!optional', 'literal'],
-                [';', 'delimiter', '@pop'],
-                ['(?=})', { token: '', next: '@pop' }],
-            ],
-            variablereference: [
-                ['\\$@identifier', 'variable.ref'],
-                ['\\.\\.\\.', 'operator'],
-                ['#{', { token: 'meta', next: '@variableinterpolation' }],
-            ],
-            variableinterpolation: [
-                { include: '@variablereference' },
-                ['}', { token: 'meta', next: '@pop' }],
-            ],
-            comments: [
-                ['\\/\\*', 'comment', '@comment'],
-                ['\\/\\/+.*', 'comment'],
-            ],
-            comment: [
-                ['\\*\\/', 'comment', '@pop'],
-                ['.', 'comment'],
-            ],
-            name: [
-                ['@identifier', 'attribute.value'],
-            ],
-            numbers: [
-                ['(\\d*\\.)?\\d+([eE][\\-+]?\\d+)?', { token: 'number', next: '@units' }],
-                ['#[0-9a-fA-F_]+(?!\\w)', 'number.hex'],
-            ],
-            units: [
-                ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'number', '@pop']
-            ],
-            functiondeclaration: [
-                ['@identifier@ws\\(', { token: 'meta', next: '@parameterdeclaration' }],
-                ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }],
-            ],
-            mixindeclaration: [
-                // mixin with parameters
-                ['@identifier@ws\\(', { token: 'meta', next: '@parameterdeclaration' }],
-                // mixin without parameters
-                ['@identifier', 'meta'],
-                ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],
-            ],
-            parameterdeclaration: [
-                ['\\$@identifier@ws:', 'variable.decl'],
-                ['\\.\\.\\.', 'operator'],
-                [',', 'delimiter'],
-                { include: '@term' },
-                ['\\)', { token: 'meta', next: '@pop' }],
-            ],
-            includedeclaration: [
-                { include: '@functioninvocation' },
-                ['@identifier', 'meta'],
-                [';', 'delimiter', '@pop'],
-                ['(?=})', { token: '', next: '@pop' }],
-                ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],
-            ],
-            keyframedeclaration: [
-                ['@identifier', 'meta'],
-                ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }],
-            ],
-            keyframebody: [
-                { include: '@term' },
-                ['{', { token: 'delimiter.curly', next: '@selectorbody' }],
-                ['}', { token: 'delimiter.curly', next: '@pop' }],
-            ],
-            controlstatement: [
-                ['[@](if|else|for|while|each|media)', { token: 'keyword.flow', next: '@controlstatementdeclaration' }],
-            ],
-            controlstatementdeclaration: [
-                ['(in|from|through|if|to)\\b', { token: 'keyword.flow' }],
-                { include: '@term' },
-                ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],
-            ],
-            functionbody: [
-                ['[@](return)', { token: 'keyword' }],
-                { include: '@variabledeclaration' },
-                { include: '@term' },
-                { include: '@controlstatement' },
-                [';', 'delimiter'],
-                ['}', { token: 'delimiter.curly', next: '@pop' }],
-            ],
-            functioninvocation: [
-                ['@identifier\\(', { token: 'meta', next: '@functionarguments' }],
-            ],
-            functionarguments: [
-                ['\\$@identifier@ws:', 'attribute.name'],
-                ['[,]', 'delimiter'],
-                { include: '@term' },
-                ['\\)', { token: 'meta', next: '@pop' }],
-            ],
-            strings: [
-                ['~?"', { token: 'string.delimiter', next: '@stringenddoublequote' }],
-                ['~?\'', { token: 'string.delimiter', next: '@stringendquote' }]
-            ],
-            stringenddoublequote: [
-                ['\\\\.', 'string'],
-                ['"', { token: 'string.delimiter', next: '@pop' }],
-                ['.', 'string']
-            ],
-            stringendquote: [
-                ['\\\\.', 'string'],
-                ['\'', { token: 'string.delimiter', next: '@pop' }],
-                ['.', 'string']
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/shell/shell.contribution.js b/node_modules/monaco-languages/release/dev/shell/shell.contribution.js
deleted file mode 100644
index 83dd354..0000000
--- a/node_modules/monaco-languages/release/dev/shell/shell.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-    *  Copyright (c) Microsoft Corporation. All rights reserved.
-    *  Licensed under the MIT License. See License.txt in the project root for license information.
-    *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'shell',
-        extensions: ['.sh', '.bash'],
-        aliases: ['Shell', 'sh'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./shell'], resolve_1, reject_1); }); },
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/shell/shell.js b/node_modules/monaco-languages/release/dev/shell/shell.js
deleted file mode 100644
index a70725c..0000000
--- a/node_modules/monaco-languages/release/dev/shell/shell.js
+++ /dev/null
@@ -1,210 +0,0 @@
-/*---------------------------------------------------------------------------------------------
-*  Copyright (c) Microsoft Corporation. All rights reserved.
-*  Licensed under the MIT License. See License.txt in the project root for license information.
-*--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#',
-        },
-        brackets: [['{', '}'], ['[', ']'], ['(', ')']],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: "'", close: "'" },
-            { open: '`', close: '`' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: "'", close: "'" },
-            { open: '`', close: '`' },
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        ignoreCase: true,
-        tokenPostfix: '.shell',
-        brackets: [
-            { token: 'delimiter.bracket', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' },
-        ],
-        keywords: [
-            'if',
-            'then',
-            'do',
-            'else',
-            'elif',
-            'while',
-            'until',
-            'for',
-            'in',
-            'esac',
-            'fi',
-            'fin',
-            'fil',
-            'done',
-            'exit',
-            'set',
-            'unset',
-            'export',
-            'function',
-        ],
-        builtins: [
-            'ab',
-            'awk',
-            'bash',
-            'beep',
-            'cat',
-            'cc',
-            'cd',
-            'chown',
-            'chmod',
-            'chroot',
-            'clear',
-            'cp',
-            'curl',
-            'cut',
-            'diff',
-            'echo',
-            'find',
-            'gawk',
-            'gcc',
-            'get',
-            'git',
-            'grep',
-            'hg',
-            'kill',
-            'killall',
-            'ln',
-            'ls',
-            'make',
-            'mkdir',
-            'openssl',
-            'mv',
-            'nc',
-            'node',
-            'npm',
-            'ping',
-            'ps',
-            'restart',
-            'rm',
-            'rmdir',
-            'sed',
-            'service',
-            'sh',
-            'shopt',
-            'shred',
-            'source',
-            'sort',
-            'sleep',
-            'ssh',
-            'start',
-            'stop',
-            'su',
-            'sudo',
-            'svn',
-            'tee',
-            'telnet',
-            'top',
-            'touch',
-            'vi',
-            'vim',
-            'wall',
-            'wc',
-            'wget',
-            'who',
-            'write',
-            'yes',
-            'zsh',
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?&|+\-*\/\^;\.,]+/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                { include: '@whitespace' },
-                [
-                    /[a-zA-Z]\w*/,
-                    {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@builtins': 'type.identifier',
-                            '@default': ''
-                        },
-                    },
-                ],
-                { include: '@strings' },
-                { include: '@parameters' },
-                { include: '@heredoc' },
-                [/[{}\[\]()]/, '@brackets'],
-                [/-+\w+/, 'attribute.name'],
-                [/@symbols/, 'delimiter'],
-                { include: '@numbers' },
-                [/[,;]/, 'delimiter'],
-            ],
-            whitespace: [
-                [/\s+/, 'white'],
-                [/(^#!.*$)/, 'metatag'],
-                [/(^#.*$)/, 'comment'],
-            ],
-            numbers: [
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
-                [/\d+/, 'number'],
-            ],
-            // Recognize strings, including those broken across lines
-            strings: [
-                [/'/, 'string', '@stringBody'],
-                [/"/, 'string', '@dblStringBody']
-            ],
-            stringBody: [
-                [/'/, 'string', '@popall'],
-                [/./, 'string'],
-            ],
-            dblStringBody: [
-                [/"/, 'string', '@popall'],
-                [/./, 'string'],
-            ],
-            heredoc: [
-                [/(<<[-<]?)(\s*)(['"`]?)([\w\-]+)(['"`]?)/, ['constants', 'white', 'string.heredoc.delimiter', 'string.heredoc', 'string.heredoc.delimiter']]
-            ],
-            parameters: [
-                [/\$\d+/, 'variable.predefined'],
-                [/\$\w+/, 'variable'],
-                [/\$[*@#?\-$!0_]/, 'variable'],
-                [/\$'/, 'variable', '@parameterBodyQuote'],
-                [/\$"/, 'variable', '@parameterBodyDoubleQuote'],
-                [/\$\(/, 'variable', '@parameterBodyParen'],
-                [/\$\{/, 'variable', '@parameterBodyCurlyBrace'],
-            ],
-            parameterBodyQuote: [
-                [/[^#:%*@\-!_']+/, 'variable'],
-                [/[#:%*@\-!_]/, 'delimiter'],
-                [/[']/, 'variable', '@pop'],
-            ],
-            parameterBodyDoubleQuote: [
-                [/[^#:%*@\-!_"]+/, 'variable'],
-                [/[#:%*@\-!_]/, 'delimiter'],
-                [/["]/, 'variable', '@pop'],
-            ],
-            parameterBodyParen: [
-                [/[^#:%*@\-!_)]+/, 'variable'],
-                [/[#:%*@\-!_]/, 'delimiter'],
-                [/[)]/, 'variable', '@pop'],
-            ],
-            parameterBodyCurlyBrace: [
-                [/[^#:%*@\-!_}]+/, 'variable'],
-                [/[#:%*@\-!_]/, 'delimiter'],
-                [/[}]/, 'variable', '@pop'],
-            ],
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/solidity/solidity.contribution.js b/node_modules/monaco-languages/release/dev/solidity/solidity.contribution.js
deleted file mode 100644
index 080d4c6..0000000
--- a/node_modules/monaco-languages/release/dev/solidity/solidity.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'sol',
-        extensions: ['.sol'],
-        aliases: ['sol', 'solidity', 'Solidity'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./solidity'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/solidity/solidity.js b/node_modules/monaco-languages/release/dev/solidity/solidity.js
deleted file mode 100644
index 3766d14..0000000
--- a/node_modules/monaco-languages/release/dev/solidity/solidity.js
+++ /dev/null
@@ -1,171 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.sol',
-        brackets: [
-            { token: 'delimiter.curly', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' },
-            { token: 'delimiter.angle', open: '<', close: '>' }
-        ],
-        keywords: [
-            // Main keywords
-            'pragma',
-            'solidity',
-            'contract',
-            'library',
-            'using',
-            'struct',
-            'function',
-            'modifier',
-            'constructor',
-            //Built-in types
-            'address',
-            'string',
-            'bool',
-            //Other types
-            'Int', 'Uint', 'Byte', 'Fixed', 'Ufixed',
-            //All int
-            'int', 'int8', 'int16', 'int24', 'int32', 'int40', 'int48', 'int56', 'int64', 'int72', 'int80', 'int88', 'int96', 'int104', 'int112', 'int120', 'int128', 'int136', 'int144', 'int152', 'int160', 'int168', 'int176', 'int184', 'int192', 'int200', 'int208', 'int216', 'int224', 'int232', 'int240', 'int248', 'int256',
-            //All uint
-            'uint', 'uint8', 'uint16', 'uint24', 'uint32', 'uint40', 'uint48', 'uint56', 'uint64', 'uint72', 'uint80', 'uint88', 'uint96', 'uint104', 'uint112', 'uint120', 'uint128', 'uint136', 'uint144', 'uint152', 'uint160', 'uint168', 'uint176', 'uint184', 'uint192', 'uint200', 'uint208', 'uint216', 'uint224', 'uint232', 'uint240', 'uint248', 'uint256',
-            //All Byte
-            'byte', 'bytes', 'bytes1', 'bytes2', 'bytes3', 'bytes4', 'bytes5', 'bytes6', 'bytes7', 'bytes8', 'bytes9', 'bytes10', 'bytes11', 'bytes12', 'bytes13', 'bytes14', 'bytes15', 'bytes16', 'bytes17', 'bytes18', 'bytes19', 'bytes20', 'bytes21', 'bytes22', 'bytes23', 'bytes24', 'bytes25', 'bytes26', 'bytes27', 'bytes28', 'bytes29', 'bytes30', 'bytes31', 'bytes32',
-            //All fixed
-            'fixed', 'fixed0x8', 'fixed0x16', 'fixed0x24', 'fixed0x32', 'fixed0x40', 'fixed0x48', 'fixed0x56', 'fixed0x64', 'fixed0x72', 'fixed0x80', 'fixed0x88', 'fixed0x96', 'fixed0x104', 'fixed0x112', 'fixed0x120', 'fixed0x128', 'fixed0x136', 'fixed0x144', 'fixed0x152', 'fixed0x160', 'fixed0x168', 'fixed0x176', 'fixed0x184', 'fixed0x192', 'fixed0x200', 'fixed0x208', 'fixed0x216', 'fixed0x224', 'fixed0x232', 'fixed0x240', 'fixed0x248', 'fixed0x256', 'fixed8x8', 'fixed8x16', 'fixed8x24', 'fixed8x32', 'fixed8x40', 'fixed8x48', 'fixed8x56', 'fixed8x64', 'fixed8x72', 'fixed8x80', 'fixed8x88', 'fixed8x96', 'fixed8x104', 'fixed8x112', 'fixed8x120', 'fixed8x128', 'fixed8x136', 'fixed8x144', 'fixed8x152', 'fixed8x160', 'fixed8x168', 'fixed8x176', 'fixed8x184', 'fixed8x192', 'fixed8x200', 'fixed8x208', 'fixed8x216', 'fixed8x224', 'fixed8x232', 'fixed8x240', 'fixed8x248', 'fixed16x8', 'fixed16x16', 'fixed16x24', 'fixed16x32', 'fixed16x40', 'fixed16x48', 'fixed16x56', 'fixed16x64', 'fixed16x72', 'fixed16x80', 'fixed16x88', 'fixed16x96', 'fixed16x104', 'fixed16x112', 'fixed16x120', 'fixed16x128', 'fixed16x136', 'fixed16x144', 'fixed16x152', 'fixed16x160', 'fixed16x168', 'fixed16x176', 'fixed16x184', 'fixed16x192', 'fixed16x200', 'fixed16x208', 'fixed16x216', 'fixed16x224', 'fixed16x232', 'fixed16x240', 'fixed24x8', 'fixed24x16', 'fixed24x24', 'fixed24x32', 'fixed24x40', 'fixed24x48', 'fixed24x56', 'fixed24x64', 'fixed24x72', 'fixed24x80', 'fixed24x88', 'fixed24x96', 'fixed24x104', 'fixed24x112', 'fixed24x120', 'fixed24x128', 'fixed24x136', 'fixed24x144', 'fixed24x152', 'fixed24x160', 'fixed24x168', 'fixed24x176', 'fixed24x184', 'fixed24x192', 'fixed24x200', 'fixed24x208', 'fixed24x216', 'fixed24x224', 'fixed24x232', 'fixed32x8', 'fixed32x16', 'fixed32x24', 'fixed32x32', 'fixed32x40', 'fixed32x48', 'fixed32x56', 'fixed32x64', 'fixed32x72', 'fixed32x80', 'fixed32x88', 'fixed32x96', 'fixed32x104', 'fixed32x112', 'fixed32x120', 'fixed32x128', 'fixed32x136', 'fixed32x144', 'fixed32x152', 'fixed32x160', 'fixed32x168', 'fixed32x176', 'fixed32x184', 'fixed32x192', 'fixed32x200', 'fixed32x208', 'fixed32x216', 'fixed32x224', 'fixed40x8', 'fixed40x16', 'fixed40x24', 'fixed40x32', 'fixed40x40', 'fixed40x48', 'fixed40x56', 'fixed40x64', 'fixed40x72', 'fixed40x80', 'fixed40x88', 'fixed40x96', 'fixed40x104', 'fixed40x112', 'fixed40x120', 'fixed40x128', 'fixed40x136', 'fixed40x144', 'fixed40x152', 'fixed40x160', 'fixed40x168', 'fixed40x176', 'fixed40x184', 'fixed40x192', 'fixed40x200', 'fixed40x208', 'fixed40x216', 'fixed48x8', 'fixed48x16', 'fixed48x24', 'fixed48x32', 'fixed48x40', 'fixed48x48', 'fixed48x56', 'fixed48x64', 'fixed48x72', 'fixed48x80', 'fixed48x88', 'fixed48x96', 'fixed48x104', 'fixed48x112', 'fixed48x120', 'fixed48x128', 'fixed48x136', 'fixed48x144', 'fixed48x152', 'fixed48x160', 'fixed48x168', 'fixed48x176', 'fixed48x184', 'fixed48x192', 'fixed48x200', 'fixed48x208', 'fixed56x8', 'fixed56x16', 'fixed56x24', 'fixed56x32', 'fixed56x40', 'fixed56x48', 'fixed56x56', 'fixed56x64', 'fixed56x72', 'fixed56x80', 'fixed56x88', 'fixed56x96', 'fixed56x104', 'fixed56x112', 'fixed56x120', 'fixed56x128', 'fixed56x136', 'fixed56x144', 'fixed56x152', 'fixed56x160', 'fixed56x168', 'fixed56x176', 'fixed56x184', 'fixed56x192', 'fixed56x200', 'fixed64x8', 'fixed64x16', 'fixed64x24', 'fixed64x32', 'fixed64x40', 'fixed64x48', 'fixed64x56', 'fixed64x64', 'fixed64x72', 'fixed64x80', 'fixed64x88', 'fixed64x96', 'fixed64x104', 'fixed64x112', 'fixed64x120', 'fixed64x128', 'fixed64x136', 'fixed64x144', 'fixed64x152', 'fixed64x160', 'fixed64x168', 'fixed64x176', 'fixed64x184', 'fixed64x192', 'fixed72x8', 'fixed72x16', 'fixed72x24', 'fixed72x32', 'fixed72x40', 'fixed72x48', 'fixed72x56', 'fixed72x64', 'fixed72x72', 'fixed72x80', 'fixed72x88', 'fixed72x96', 'fixed72x104', 'fixed72x112', 'fixed72x120', 'fixed72x128', 'fixed72x136', 'fixed72x144', 'fixed72x152', 'fixed72x160', 'fixed72x168', 'fixed72x176', 'fixed72x184', 'fixed80x8', 'fixed80x16', 'fixed80x24', 'fixed80x32', 'fixed80x40', 'fixed80x48', 'fixed80x56', 'fixed80x64', 'fixed80x72', 'fixed80x80', 'fixed80x88', 'fixed80x96', 'fixed80x104', 'fixed80x112', 'fixed80x120', 'fixed80x128', 'fixed80x136', 'fixed80x144', 'fixed80x152', 'fixed80x160', 'fixed80x168', 'fixed80x176', 'fixed88x8', 'fixed88x16', 'fixed88x24', 'fixed88x32', 'fixed88x40', 'fixed88x48', 'fixed88x56', 'fixed88x64', 'fixed88x72', 'fixed88x80', 'fixed88x88', 'fixed88x96', 'fixed88x104', 'fixed88x112', 'fixed88x120', 'fixed88x128', 'fixed88x136', 'fixed88x144', 'fixed88x152', 'fixed88x160', 'fixed88x168', 'fixed96x8', 'fixed96x16', 'fixed96x24', 'fixed96x32', 'fixed96x40', 'fixed96x48', 'fixed96x56', 'fixed96x64', 'fixed96x72', 'fixed96x80', 'fixed96x88', 'fixed96x96', 'fixed96x104', 'fixed96x112', 'fixed96x120', 'fixed96x128', 'fixed96x136', 'fixed96x144', 'fixed96x152', 'fixed96x160', 'fixed104x8', 'fixed104x16', 'fixed104x24', 'fixed104x32', 'fixed104x40', 'fixed104x48', 'fixed104x56', 'fixed104x64', 'fixed104x72', 'fixed104x80', 'fixed104x88', 'fixed104x96', 'fixed104x104', 'fixed104x112', 'fixed104x120', 'fixed104x128', 'fixed104x136', 'fixed104x144', 'fixed104x152', 'fixed112x8', 'fixed112x16', 'fixed112x24', 'fixed112x32', 'fixed112x40', 'fixed112x48', 'fixed112x56', 'fixed112x64', 'fixed112x72', 'fixed112x80', 'fixed112x88', 'fixed112x96', 'fixed112x104', 'fixed112x112', 'fixed112x120', 'fixed112x128', 'fixed112x136', 'fixed112x144', 'fixed120x8', 'fixed120x16', 'fixed120x24', 'fixed120x32', 'fixed120x40', 'fixed120x48', 'fixed120x56', 'fixed120x64', 'fixed120x72', 'fixed120x80', 'fixed120x88', 'fixed120x96', 'fixed120x104', 'fixed120x112', 'fixed120x120', 'fixed120x128', 'fixed120x136', 'fixed128x8', 'fixed128x16', 'fixed128x24', 'fixed128x32', 'fixed128x40', 'fixed128x48', 'fixed128x56', 'fixed128x64', 'fixed128x72', 'fixed128x80', 'fixed128x88', 'fixed128x96', 'fixed128x104', 'fixed128x112', 'fixed128x120', 'fixed128x128', 'fixed136x8', 'fixed136x16', 'fixed136x24', 'fixed136x32', 'fixed136x40', 'fixed136x48', 'fixed136x56', 'fixed136x64', 'fixed136x72', 'fixed136x80', 'fixed136x88', 'fixed136x96', 'fixed136x104', 'fixed136x112', 'fixed136x120', 'fixed144x8', 'fixed144x16', 'fixed144x24', 'fixed144x32', 'fixed144x40', 'fixed144x48', 'fixed144x56', 'fixed144x64', 'fixed144x72', 'fixed144x80', 'fixed144x88', 'fixed144x96', 'fixed144x104', 'fixed144x112', 'fixed152x8', 'fixed152x16', 'fixed152x24', 'fixed152x32', 'fixed152x40', 'fixed152x48', 'fixed152x56', 'fixed152x64', 'fixed152x72', 'fixed152x80', 'fixed152x88', 'fixed152x96', 'fixed152x104', 'fixed160x8', 'fixed160x16', 'fixed160x24', 'fixed160x32', 'fixed160x40', 'fixed160x48', 'fixed160x56', 'fixed160x64', 'fixed160x72', 'fixed160x80', 'fixed160x88', 'fixed160x96', 'fixed168x8', 'fixed168x16', 'fixed168x24', 'fixed168x32', 'fixed168x40', 'fixed168x48', 'fixed168x56', 'fixed168x64', 'fixed168x72', 'fixed168x80', 'fixed168x88', 'fixed176x8', 'fixed176x16', 'fixed176x24', 'fixed176x32', 'fixed176x40', 'fixed176x48', 'fixed176x56', 'fixed176x64', 'fixed176x72', 'fixed176x80', 'fixed184x8', 'fixed184x16', 'fixed184x24', 'fixed184x32', 'fixed184x40', 'fixed184x48', 'fixed184x56', 'fixed184x64', 'fixed184x72', 'fixed192x8', 'fixed192x16', 'fixed192x24', 'fixed192x32', 'fixed192x40', 'fixed192x48', 'fixed192x56', 'fixed192x64', 'fixed200x8', 'fixed200x16', 'fixed200x24', 'fixed200x32', 'fixed200x40', 'fixed200x48', 'fixed200x56', 'fixed208x8', 'fixed208x16', 'fixed208x24', 'fixed208x32', 'fixed208x40', 'fixed208x48', 'fixed216x8', 'fixed216x16', 'fixed216x24', 'fixed216x32', 'fixed216x40', 'fixed224x8', 'fixed224x16', 'fixed224x24', 'fixed224x32', 'fixed232x8', 'fixed232x16', 'fixed232x24', 'fixed240x8', 'fixed240x16', 'fixed248x8',
-            //All ufixed
-            'ufixed', 'ufixed0x8', 'ufixed0x16', 'ufixed0x24', 'ufixed0x32', 'ufixed0x40', 'ufixed0x48', 'ufixed0x56', 'ufixed0x64', 'ufixed0x72', 'ufixed0x80', 'ufixed0x88', 'ufixed0x96', 'ufixed0x104', 'ufixed0x112', 'ufixed0x120', 'ufixed0x128', 'ufixed0x136', 'ufixed0x144', 'ufixed0x152', 'ufixed0x160', 'ufixed0x168', 'ufixed0x176', 'ufixed0x184', 'ufixed0x192', 'ufixed0x200', 'ufixed0x208', 'ufixed0x216', 'ufixed0x224', 'ufixed0x232', 'ufixed0x240', 'ufixed0x248', 'ufixed0x256', 'ufixed8x8', 'ufixed8x16', 'ufixed8x24', 'ufixed8x32', 'ufixed8x40', 'ufixed8x48', 'ufixed8x56', 'ufixed8x64', 'ufixed8x72', 'ufixed8x80', 'ufixed8x88', 'ufixed8x96', 'ufixed8x104', 'ufixed8x112', 'ufixed8x120', 'ufixed8x128', 'ufixed8x136', 'ufixed8x144', 'ufixed8x152', 'ufixed8x160', 'ufixed8x168', 'ufixed8x176', 'ufixed8x184', 'ufixed8x192', 'ufixed8x200', 'ufixed8x208', 'ufixed8x216', 'ufixed8x224', 'ufixed8x232', 'ufixed8x240', 'ufixed8x248', 'ufixed16x8', 'ufixed16x16', 'ufixed16x24', 'ufixed16x32', 'ufixed16x40', 'ufixed16x48', 'ufixed16x56', 'ufixed16x64', 'ufixed16x72', 'ufixed16x80', 'ufixed16x88', 'ufixed16x96', 'ufixed16x104', 'ufixed16x112', 'ufixed16x120', 'ufixed16x128', 'ufixed16x136', 'ufixed16x144', 'ufixed16x152', 'ufixed16x160', 'ufixed16x168', 'ufixed16x176', 'ufixed16x184', 'ufixed16x192', 'ufixed16x200', 'ufixed16x208', 'ufixed16x216', 'ufixed16x224', 'ufixed16x232', 'ufixed16x240', 'ufixed24x8', 'ufixed24x16', 'ufixed24x24', 'ufixed24x32', 'ufixed24x40', 'ufixed24x48', 'ufixed24x56', 'ufixed24x64', 'ufixed24x72', 'ufixed24x80', 'ufixed24x88', 'ufixed24x96', 'ufixed24x104', 'ufixed24x112', 'ufixed24x120', 'ufixed24x128', 'ufixed24x136', 'ufixed24x144', 'ufixed24x152', 'ufixed24x160', 'ufixed24x168', 'ufixed24x176', 'ufixed24x184', 'ufixed24x192', 'ufixed24x200', 'ufixed24x208', 'ufixed24x216', 'ufixed24x224', 'ufixed24x232', 'ufixed32x8', 'ufixed32x16', 'ufixed32x24', 'ufixed32x32', 'ufixed32x40', 'ufixed32x48', 'ufixed32x56', 'ufixed32x64', 'ufixed32x72', 'ufixed32x80', 'ufixed32x88', 'ufixed32x96', 'ufixed32x104', 'ufixed32x112', 'ufixed32x120', 'ufixed32x128', 'ufixed32x136', 'ufixed32x144', 'ufixed32x152', 'ufixed32x160', 'ufixed32x168', 'ufixed32x176', 'ufixed32x184', 'ufixed32x192', 'ufixed32x200', 'ufixed32x208', 'ufixed32x216', 'ufixed32x224', 'ufixed40x8', 'ufixed40x16', 'ufixed40x24', 'ufixed40x32', 'ufixed40x40', 'ufixed40x48', 'ufixed40x56', 'ufixed40x64', 'ufixed40x72', 'ufixed40x80', 'ufixed40x88', 'ufixed40x96', 'ufixed40x104', 'ufixed40x112', 'ufixed40x120', 'ufixed40x128', 'ufixed40x136', 'ufixed40x144', 'ufixed40x152', 'ufixed40x160', 'ufixed40x168', 'ufixed40x176', 'ufixed40x184', 'ufixed40x192', 'ufixed40x200', 'ufixed40x208', 'ufixed40x216', 'ufixed48x8', 'ufixed48x16', 'ufixed48x24', 'ufixed48x32', 'ufixed48x40', 'ufixed48x48', 'ufixed48x56', 'ufixed48x64', 'ufixed48x72', 'ufixed48x80', 'ufixed48x88', 'ufixed48x96', 'ufixed48x104', 'ufixed48x112', 'ufixed48x120', 'ufixed48x128', 'ufixed48x136', 'ufixed48x144', 'ufixed48x152', 'ufixed48x160', 'ufixed48x168', 'ufixed48x176', 'ufixed48x184', 'ufixed48x192', 'ufixed48x200', 'ufixed48x208', 'ufixed56x8', 'ufixed56x16', 'ufixed56x24', 'ufixed56x32', 'ufixed56x40', 'ufixed56x48', 'ufixed56x56', 'ufixed56x64', 'ufixed56x72', 'ufixed56x80', 'ufixed56x88', 'ufixed56x96', 'ufixed56x104', 'ufixed56x112', 'ufixed56x120', 'ufixed56x128', 'ufixed56x136', 'ufixed56x144', 'ufixed56x152', 'ufixed56x160', 'ufixed56x168', 'ufixed56x176', 'ufixed56x184', 'ufixed56x192', 'ufixed56x200', 'ufixed64x8', 'ufixed64x16', 'ufixed64x24', 'ufixed64x32', 'ufixed64x40', 'ufixed64x48', 'ufixed64x56', 'ufixed64x64', 'ufixed64x72', 'ufixed64x80', 'ufixed64x88', 'ufixed64x96', 'ufixed64x104', 'ufixed64x112', 'ufixed64x120', 'ufixed64x128', 'ufixed64x136', 'ufixed64x144', 'ufixed64x152', 'ufixed64x160', 'ufixed64x168', 'ufixed64x176', 'ufixed64x184', 'ufixed64x192', 'ufixed72x8', 'ufixed72x16', 'ufixed72x24', 'ufixed72x32', 'ufixed72x40', 'ufixed72x48', 'ufixed72x56', 'ufixed72x64', 'ufixed72x72', 'ufixed72x80', 'ufixed72x88', 'ufixed72x96', 'ufixed72x104', 'ufixed72x112', 'ufixed72x120', 'ufixed72x128', 'ufixed72x136', 'ufixed72x144', 'ufixed72x152', 'ufixed72x160', 'ufixed72x168', 'ufixed72x176', 'ufixed72x184', 'ufixed80x8', 'ufixed80x16', 'ufixed80x24', 'ufixed80x32', 'ufixed80x40', 'ufixed80x48', 'ufixed80x56', 'ufixed80x64', 'ufixed80x72', 'ufixed80x80', 'ufixed80x88', 'ufixed80x96', 'ufixed80x104', 'ufixed80x112', 'ufixed80x120', 'ufixed80x128', 'ufixed80x136', 'ufixed80x144', 'ufixed80x152', 'ufixed80x160', 'ufixed80x168', 'ufixed80x176', 'ufixed88x8', 'ufixed88x16', 'ufixed88x24', 'ufixed88x32', 'ufixed88x40', 'ufixed88x48', 'ufixed88x56', 'ufixed88x64', 'ufixed88x72', 'ufixed88x80', 'ufixed88x88', 'ufixed88x96', 'ufixed88x104', 'ufixed88x112', 'ufixed88x120', 'ufixed88x128', 'ufixed88x136', 'ufixed88x144', 'ufixed88x152', 'ufixed88x160', 'ufixed88x168', 'ufixed96x8', 'ufixed96x16', 'ufixed96x24', 'ufixed96x32', 'ufixed96x40', 'ufixed96x48', 'ufixed96x56', 'ufixed96x64', 'ufixed96x72', 'ufixed96x80', 'ufixed96x88', 'ufixed96x96', 'ufixed96x104', 'ufixed96x112', 'ufixed96x120', 'ufixed96x128', 'ufixed96x136', 'ufixed96x144', 'ufixed96x152', 'ufixed96x160', 'ufixed104x8', 'ufixed104x16', 'ufixed104x24', 'ufixed104x32', 'ufixed104x40', 'ufixed104x48', 'ufixed104x56', 'ufixed104x64', 'ufixed104x72', 'ufixed104x80', 'ufixed104x88', 'ufixed104x96', 'ufixed104x104', 'ufixed104x112', 'ufixed104x120', 'ufixed104x128', 'ufixed104x136', 'ufixed104x144', 'ufixed104x152', 'ufixed112x8', 'ufixed112x16', 'ufixed112x24', 'ufixed112x32', 'ufixed112x40', 'ufixed112x48', 'ufixed112x56', 'ufixed112x64', 'ufixed112x72', 'ufixed112x80', 'ufixed112x88', 'ufixed112x96', 'ufixed112x104', 'ufixed112x112', 'ufixed112x120', 'ufixed112x128', 'ufixed112x136', 'ufixed112x144', 'ufixed120x8', 'ufixed120x16', 'ufixed120x24', 'ufixed120x32', 'ufixed120x40', 'ufixed120x48', 'ufixed120x56', 'ufixed120x64', 'ufixed120x72', 'ufixed120x80', 'ufixed120x88', 'ufixed120x96', 'ufixed120x104', 'ufixed120x112', 'ufixed120x120', 'ufixed120x128', 'ufixed120x136', 'ufixed128x8', 'ufixed128x16', 'ufixed128x24', 'ufixed128x32', 'ufixed128x40', 'ufixed128x48', 'ufixed128x56', 'ufixed128x64', 'ufixed128x72', 'ufixed128x80', 'ufixed128x88', 'ufixed128x96', 'ufixed128x104', 'ufixed128x112', 'ufixed128x120', 'ufixed128x128', 'ufixed136x8', 'ufixed136x16', 'ufixed136x24', 'ufixed136x32', 'ufixed136x40', 'ufixed136x48', 'ufixed136x56', 'ufixed136x64', 'ufixed136x72', 'ufixed136x80', 'ufixed136x88', 'ufixed136x96', 'ufixed136x104', 'ufixed136x112', 'ufixed136x120', 'ufixed144x8', 'ufixed144x16', 'ufixed144x24', 'ufixed144x32', 'ufixed144x40', 'ufixed144x48', 'ufixed144x56', 'ufixed144x64', 'ufixed144x72', 'ufixed144x80', 'ufixed144x88', 'ufixed144x96', 'ufixed144x104', 'ufixed144x112', 'ufixed152x8', 'ufixed152x16', 'ufixed152x24', 'ufixed152x32', 'ufixed152x40', 'ufixed152x48', 'ufixed152x56', 'ufixed152x64', 'ufixed152x72', 'ufixed152x80', 'ufixed152x88', 'ufixed152x96', 'ufixed152x104', 'ufixed160x8', 'ufixed160x16', 'ufixed160x24', 'ufixed160x32', 'ufixed160x40', 'ufixed160x48', 'ufixed160x56', 'ufixed160x64', 'ufixed160x72', 'ufixed160x80', 'ufixed160x88', 'ufixed160x96', 'ufixed168x8', 'ufixed168x16', 'ufixed168x24', 'ufixed168x32', 'ufixed168x40', 'ufixed168x48', 'ufixed168x56', 'ufixed168x64', 'ufixed168x72', 'ufixed168x80', 'ufixed168x88', 'ufixed176x8', 'ufixed176x16', 'ufixed176x24', 'ufixed176x32', 'ufixed176x40', 'ufixed176x48', 'ufixed176x56', 'ufixed176x64', 'ufixed176x72', 'ufixed176x80', 'ufixed184x8', 'ufixed184x16', 'ufixed184x24', 'ufixed184x32', 'ufixed184x40', 'ufixed184x48', 'ufixed184x56', 'ufixed184x64', 'ufixed184x72', 'ufixed192x8', 'ufixed192x16', 'ufixed192x24', 'ufixed192x32', 'ufixed192x40', 'ufixed192x48', 'ufixed192x56', 'ufixed192x64', 'ufixed200x8', 'ufixed200x16', 'ufixed200x24', 'ufixed200x32', 'ufixed200x40', 'ufixed200x48', 'ufixed200x56', 'ufixed208x8', 'ufixed208x16', 'ufixed208x24', 'ufixed208x32', 'ufixed208x40', 'ufixed208x48', 'ufixed216x8', 'ufixed216x16', 'ufixed216x24', 'ufixed216x32', 'ufixed216x40', 'ufixed224x8', 'ufixed224x16', 'ufixed224x24', 'ufixed224x32', 'ufixed232x8', 'ufixed232x16', 'ufixed232x24', 'ufixed240x8', 'ufixed240x16', 'ufixed248x8',
-            'event',
-            'enum',
-            'let',
-            'mapping',
-            'private',
-            'public',
-            'external',
-            'inherited',
-            'payable',
-            'true',
-            'false',
-            'var',
-            'import',
-            'constant',
-            'if',
-            'else',
-            'for',
-            'else',
-            'for',
-            'while',
-            'do',
-            'break',
-            'continue',
-            'throw',
-            'returns',
-            'return',
-            'suicide',
-            'new',
-            'is',
-            'this',
-            'super'
-        ],
-        operators: [
-            '=', '>', '<', '!', '~', '?', ':',
-            '==', '<=', '>=', '!=', '&&', '||', '++', '--',
-            '+', '-', '*', '/', '&', '|', '^', '%', '<<',
-            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',
-            '^=', '%=', '<<=', '>>=', '>>>='
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
-        floatsuffix: /[fFlL]?/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // [[ attributes ]].
-                [/\[\[.*\]\]/, 'annotation'],
-                // Preprocessor directive
-                [/^\s*#\w+/, 'keyword'],
-                //DataTypes
-                [/int\d*/, 'keyword'],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
-                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
-                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
-                [/\d[\d']*\d(@integersuffix)/, 'number'],
-                [/\d(@integersuffix)/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            doccomment: [
-                [/[^\/*]+/, 'comment.doc'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/sophia/sophia.contribution.js b/node_modules/monaco-languages/release/dev/sophia/sophia.contribution.js
deleted file mode 100644
index 0564712..0000000
--- a/node_modules/monaco-languages/release/dev/sophia/sophia.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'aes',
-        extensions: ['.aes'],
-        aliases: ['aes', 'sophia', 'Sophia'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./sophia'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/sophia/sophia.js b/node_modules/monaco-languages/release/dev/sophia/sophia.js
deleted file mode 100644
index 69cf102..0000000
--- a/node_modules/monaco-languages/release/dev/sophia/sophia.js
+++ /dev/null
@@ -1,159 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],
-        autoClosingPairs: [
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.aes',
-        brackets: [
-            { token: 'delimiter.curly', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' },
-            { token: 'delimiter.angle', open: '<', close: '>' }
-        ],
-        keywords: [
-            // Main keywords
-            'contract',
-            'library',
-            'entrypoint',
-            'function',
-            'stateful',
-            'state',
-            'hash',
-            'signature',
-            'tuple',
-            'list',
-            'address',
-            'string',
-            'bool',
-            'int',
-            'record',
-            'datatype',
-            'type',
-            'option',
-            'oracle',
-            'oracle_query',
-            'Call',
-            'Bits',
-            'Bytes',
-            'Oracle',
-            'String',
-            'Crypto',
-            'Address',
-            'Auth',
-            'Chain',
-            'None',
-            'Some',
-            'bits',
-            'bytes',
-            'event',
-            'let',
-            'map',
-            'private',
-            'public',
-            'true',
-            'false',
-            'var',
-            'if',
-            'else',
-            'throw'
-        ],
-        operators: [
-            '=', '>', '<', '!', '~', '?', '::', ':',
-            '==', '<=', '>=', '!=', '&&', '||', '++', '--',
-            '+', '-', '*', '/', '&', '|', '^', '%', '<<',
-            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',
-            '^=', '%=', '<<=', '>>=', '>>>='
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
-        floatsuffix: /[fFlL]?/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // whitespace
-                { include: '@whitespace' },
-                // [[ attributes ]].
-                [/\[\[.*\]\]/, 'annotation'],
-                // Preprocessor directive
-                [/^\s*#\w+/, 'keyword'],
-                //DataTypes
-                [/int\d*/, 'keyword'],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/@symbols/, {
-                        cases: {
-                            '@operators': 'delimiter',
-                            '@default': ''
-                        }
-                    }],
-                // numbers
-                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
-                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
-                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
-                [/\d[\d']*\d(@integersuffix)/, 'number'],
-                [/\d(@integersuffix)/, 'number'],
-                // delimiter: after number because of .\d floats
-                [/[;,.]/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-                // characters
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\/\/.*$/, 'comment'],
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                [/\*\//, 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            //Identical copy of comment above, except for the addition of .doc
-            doccomment: [
-                [/[^\/*]+/, 'comment.doc'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/[\/*]/, 'comment.doc']
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/sql/sql.contribution.js b/node_modules/monaco-languages/release/dev/sql/sql.contribution.js
deleted file mode 100644
index 62e52d2..0000000
--- a/node_modules/monaco-languages/release/dev/sql/sql.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'sql',
-        extensions: ['.sql'],
-        aliases: ['SQL'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./sql'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/sql/sql.js b/node_modules/monaco-languages/release/dev/sql/sql.js
deleted file mode 100644
index 1ae58b6..0000000
--- a/node_modules/monaco-languages/release/dev/sql/sql.js
+++ /dev/null
@@ -1,1139 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '--',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.sql',
-        ignoreCase: true,
-        brackets: [
-            { open: '[', close: ']', token: 'delimiter.square' },
-            { open: '(', close: ')', token: 'delimiter.parenthesis' }
-        ],
-        keywords: [
-            'ABORT_AFTER_WAIT',
-            'ABSENT',
-            'ABSOLUTE',
-            'ACCENT_SENSITIVITY',
-            'ACTION',
-            'ACTIVATION',
-            'ACTIVE',
-            'ADD',
-            'ADDRESS',
-            'ADMIN',
-            'AES',
-            'AES_128',
-            'AES_192',
-            'AES_256',
-            'AFFINITY',
-            'AFTER',
-            'AGGREGATE',
-            'ALGORITHM',
-            'ALL_CONSTRAINTS',
-            'ALL_ERRORMSGS',
-            'ALL_INDEXES',
-            'ALL_LEVELS',
-            'ALL_SPARSE_COLUMNS',
-            'ALLOW_CONNECTIONS',
-            'ALLOW_MULTIPLE_EVENT_LOSS',
-            'ALLOW_PAGE_LOCKS',
-            'ALLOW_ROW_LOCKS',
-            'ALLOW_SINGLE_EVENT_LOSS',
-            'ALLOW_SNAPSHOT_ISOLATION',
-            'ALLOWED',
-            'ALTER',
-            'ANONYMOUS',
-            'ANSI_DEFAULTS',
-            'ANSI_NULL_DEFAULT',
-            'ANSI_NULL_DFLT_OFF',
-            'ANSI_NULL_DFLT_ON',
-            'ANSI_NULLS',
-            'ANSI_PADDING',
-            'ANSI_WARNINGS',
-            'APPEND',
-            'APPLICATION',
-            'APPLICATION_LOG',
-            'ARITHABORT',
-            'ARITHIGNORE',
-            'AS',
-            'ASC',
-            'ASSEMBLY',
-            'ASYMMETRIC',
-            'ASYNCHRONOUS_COMMIT',
-            'AT',
-            'ATOMIC',
-            'ATTACH',
-            'ATTACH_REBUILD_LOG',
-            'AUDIT',
-            'AUDIT_GUID',
-            'AUTHENTICATION',
-            'AUTHORIZATION',
-            'AUTO',
-            'AUTO_CLEANUP',
-            'AUTO_CLOSE',
-            'AUTO_CREATE_STATISTICS',
-            'AUTO_SHRINK',
-            'AUTO_UPDATE_STATISTICS',
-            'AUTO_UPDATE_STATISTICS_ASYNC',
-            'AUTOMATED_BACKUP_PREFERENCE',
-            'AUTOMATIC',
-            'AVAILABILITY',
-            'AVAILABILITY_MODE',
-            'BACKUP',
-            'BACKUP_PRIORITY',
-            'BASE64',
-            'BATCHSIZE',
-            'BEGIN',
-            'BEGIN_DIALOG',
-            'BIGINT',
-            'BINARY',
-            'BINDING',
-            'BIT',
-            'BLOCKERS',
-            'BLOCKSIZE',
-            'BOUNDING_BOX',
-            'BREAK',
-            'BROKER',
-            'BROKER_INSTANCE',
-            'BROWSE',
-            'BUCKET_COUNT',
-            'BUFFER',
-            'BUFFERCOUNT',
-            'BULK',
-            'BULK_LOGGED',
-            'BY',
-            'CACHE',
-            'CALL',
-            'CALLED',
-            'CALLER',
-            'CAP_CPU_PERCENT',
-            'CASCADE',
-            'CASE',
-            'CATALOG',
-            'CATCH',
-            'CELLS_PER_OBJECT',
-            'CERTIFICATE',
-            'CHANGE_RETENTION',
-            'CHANGE_TRACKING',
-            'CHANGES',
-            'CHAR',
-            'CHARACTER',
-            'CHECK',
-            'CHECK_CONSTRAINTS',
-            'CHECK_EXPIRATION',
-            'CHECK_POLICY',
-            'CHECKALLOC',
-            'CHECKCATALOG',
-            'CHECKCONSTRAINTS',
-            'CHECKDB',
-            'CHECKFILEGROUP',
-            'CHECKIDENT',
-            'CHECKPOINT',
-            'CHECKTABLE',
-            'CLASSIFIER_FUNCTION',
-            'CLEANTABLE',
-            'CLEANUP',
-            'CLEAR',
-            'CLOSE',
-            'CLUSTER',
-            'CLUSTERED',
-            'CODEPAGE',
-            'COLLATE',
-            'COLLECTION',
-            'COLUMN',
-            'COLUMN_SET',
-            'COLUMNS',
-            'COLUMNSTORE',
-            'COLUMNSTORE_ARCHIVE',
-            'COMMIT',
-            'COMMITTED',
-            'COMPATIBILITY_LEVEL',
-            'COMPRESSION',
-            'COMPUTE',
-            'CONCAT',
-            'CONCAT_NULL_YIELDS_NULL',
-            'CONFIGURATION',
-            'CONNECT',
-            'CONSTRAINT',
-            'CONTAINMENT',
-            'CONTENT',
-            'CONTEXT',
-            'CONTINUE',
-            'CONTINUE_AFTER_ERROR',
-            'CONTRACT',
-            'CONTRACT_NAME',
-            'CONTROL',
-            'CONVERSATION',
-            'COOKIE',
-            'COPY_ONLY',
-            'COUNTER',
-            'CPU',
-            'CREATE',
-            'CREATE_NEW',
-            'CREATION_DISPOSITION',
-            'CREDENTIAL',
-            'CRYPTOGRAPHIC',
-            'CUBE',
-            'CURRENT',
-            'CURRENT_DATE',
-            'CURSOR',
-            'CURSOR_CLOSE_ON_COMMIT',
-            'CURSOR_DEFAULT',
-            'CYCLE',
-            'DATA',
-            'DATA_COMPRESSION',
-            'DATA_PURITY',
-            'DATABASE',
-            'DATABASE_DEFAULT',
-            'DATABASE_MIRRORING',
-            'DATABASE_SNAPSHOT',
-            'DATAFILETYPE',
-            'DATE',
-            'DATE_CORRELATION_OPTIMIZATION',
-            'DATEFIRST',
-            'DATEFORMAT',
-            'DATETIME',
-            'DATETIME2',
-            'DATETIMEOFFSET',
-            'DAY',
-            'DAYOFYEAR',
-            'DAYS',
-            'DB_CHAINING',
-            'DBCC',
-            'DBREINDEX',
-            'DDL_DATABASE_LEVEL_EVENTS',
-            'DEADLOCK_PRIORITY',
-            'DEALLOCATE',
-            'DEC',
-            'DECIMAL',
-            'DECLARE',
-            'DECRYPTION',
-            'DEFAULT',
-            'DEFAULT_DATABASE',
-            'DEFAULT_FULLTEXT_LANGUAGE',
-            'DEFAULT_LANGUAGE',
-            'DEFAULT_SCHEMA',
-            'DEFINITION',
-            'DELAY',
-            'DELAYED_DURABILITY',
-            'DELETE',
-            'DELETED',
-            'DENSITY_VECTOR',
-            'DENY',
-            'DEPENDENTS',
-            'DES',
-            'DESC',
-            'DESCRIPTION',
-            'DESX',
-            'DHCP',
-            'DIAGNOSTICS',
-            'DIALOG',
-            'DIFFERENTIAL',
-            'DIRECTORY_NAME',
-            'DISABLE',
-            'DISABLE_BROKER',
-            'DISABLED',
-            'DISK',
-            'DISTINCT',
-            'DISTRIBUTED',
-            'DOCUMENT',
-            'DOUBLE',
-            'DROP',
-            'DROP_EXISTING',
-            'DROPCLEANBUFFERS',
-            'DUMP',
-            'DURABILITY',
-            'DYNAMIC',
-            'EDITION',
-            'ELEMENTS',
-            'ELSE',
-            'EMERGENCY',
-            'EMPTY',
-            'EMPTYFILE',
-            'ENABLE',
-            'ENABLE_BROKER',
-            'ENABLED',
-            'ENCRYPTION',
-            'END',
-            'ENDPOINT',
-            'ENDPOINT_URL',
-            'ERRLVL',
-            'ERROR',
-            'ERROR_BROKER_CONVERSATIONS',
-            'ERRORFILE',
-            'ESCAPE',
-            'ESTIMATEONLY',
-            'EVENT',
-            'EVENT_RETENTION_MODE',
-            'EXEC',
-            'EXECUTABLE',
-            'EXECUTE',
-            'EXIT',
-            'EXPAND',
-            'EXPIREDATE',
-            'EXPIRY_DATE',
-            'EXPLICIT',
-            'EXTENDED_LOGICAL_CHECKS',
-            'EXTENSION',
-            'EXTERNAL',
-            'EXTERNAL_ACCESS',
-            'FAIL_OPERATION',
-            'FAILOVER',
-            'FAILOVER_MODE',
-            'FAILURE_CONDITION_LEVEL',
-            'FALSE',
-            'FAN_IN',
-            'FAST',
-            'FAST_FORWARD',
-            'FETCH',
-            'FIELDTERMINATOR',
-            'FILE',
-            'FILEGROUP',
-            'FILEGROWTH',
-            'FILELISTONLY',
-            'FILENAME',
-            'FILEPATH',
-            'FILESTREAM',
-            'FILESTREAM_ON',
-            'FILETABLE_COLLATE_FILENAME',
-            'FILETABLE_DIRECTORY',
-            'FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME',
-            'FILETABLE_NAMESPACE',
-            'FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME',
-            'FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME',
-            'FILLFACTOR',
-            'FILTERING',
-            'FIRE_TRIGGERS',
-            'FIRST',
-            'FIRSTROW',
-            'FLOAT',
-            'FMTONLY',
-            'FOLLOWING',
-            'FOR',
-            'FORCE',
-            'FORCE_FAILOVER_ALLOW_DATA_LOSS',
-            'FORCE_SERVICE_ALLOW_DATA_LOSS',
-            'FORCED',
-            'FORCEPLAN',
-            'FORCESCAN',
-            'FORCESEEK',
-            'FOREIGN',
-            'FORMATFILE',
-            'FORMSOF',
-            'FORWARD_ONLY',
-            'FREE',
-            'FREEPROCCACHE',
-            'FREESESSIONCACHE',
-            'FREESYSTEMCACHE',
-            'FROM',
-            'FULL',
-            'FULLSCAN',
-            'FULLTEXT',
-            'FUNCTION',
-            'GB',
-            'GEOGRAPHY_AUTO_GRID',
-            'GEOGRAPHY_GRID',
-            'GEOMETRY_AUTO_GRID',
-            'GEOMETRY_GRID',
-            'GET',
-            'GLOBAL',
-            'GO',
-            'GOTO',
-            'GOVERNOR',
-            'GRANT',
-            'GRIDS',
-            'GROUP',
-            'GROUP_MAX_REQUESTS',
-            'HADR',
-            'HASH',
-            'HASHED',
-            'HAVING',
-            'HEADERONLY',
-            'HEALTH_CHECK_TIMEOUT',
-            'HELP',
-            'HIERARCHYID',
-            'HIGH',
-            'HINT',
-            'HISTOGRAM',
-            'HOLDLOCK',
-            'HONOR_BROKER_PRIORITY',
-            'HOUR',
-            'HOURS',
-            'IDENTITY',
-            'IDENTITY_INSERT',
-            'IDENTITY_VALUE',
-            'IDENTITYCOL',
-            'IF',
-            'IGNORE_CONSTRAINTS',
-            'IGNORE_DUP_KEY',
-            'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX',
-            'IGNORE_TRIGGERS',
-            'IMAGE',
-            'IMMEDIATE',
-            'IMPERSONATE',
-            'IMPLICIT_TRANSACTIONS',
-            'IMPORTANCE',
-            'INCLUDE',
-            'INCREMENT',
-            'INCREMENTAL',
-            'INDEX',
-            'INDEXDEFRAG',
-            'INFINITE',
-            'INFLECTIONAL',
-            'INIT',
-            'INITIATOR',
-            'INPUT',
-            'INPUTBUFFER',
-            'INSENSITIVE',
-            'INSERT',
-            'INSERTED',
-            'INSTEAD',
-            'INT',
-            'INTEGER',
-            'INTO',
-            'IO',
-            'IP',
-            'ISABOUT',
-            'ISOLATION',
-            'JOB',
-            'KB',
-            'KEEP',
-            'KEEP_CDC',
-            'KEEP_NULLS',
-            'KEEP_REPLICATION',
-            'KEEPDEFAULTS',
-            'KEEPFIXED',
-            'KEEPIDENTITY',
-            'KEEPNULLS',
-            'KERBEROS',
-            'KEY',
-            'KEY_SOURCE',
-            'KEYS',
-            'KEYSET',
-            'KILL',
-            'KILOBYTES_PER_BATCH',
-            'LABELONLY',
-            'LANGUAGE',
-            'LAST',
-            'LASTROW',
-            'LEVEL',
-            'LEVEL_1',
-            'LEVEL_2',
-            'LEVEL_3',
-            'LEVEL_4',
-            'LIFETIME',
-            'LIMIT',
-            'LINENO',
-            'LIST',
-            'LISTENER',
-            'LISTENER_IP',
-            'LISTENER_PORT',
-            'LOAD',
-            'LOADHISTORY',
-            'LOB_COMPACTION',
-            'LOCAL',
-            'LOCAL_SERVICE_NAME',
-            'LOCK_ESCALATION',
-            'LOCK_TIMEOUT',
-            'LOGIN',
-            'LOGSPACE',
-            'LOOP',
-            'LOW',
-            'MANUAL',
-            'MARK',
-            'MARK_IN_USE_FOR_REMOVAL',
-            'MASTER',
-            'MAX_CPU_PERCENT',
-            'MAX_DISPATCH_LATENCY',
-            'MAX_DOP',
-            'MAX_DURATION',
-            'MAX_EVENT_SIZE',
-            'MAX_FILES',
-            'MAX_IOPS_PER_VOLUME',
-            'MAX_MEMORY',
-            'MAX_MEMORY_PERCENT',
-            'MAX_QUEUE_READERS',
-            'MAX_ROLLOVER_FILES',
-            'MAX_SIZE',
-            'MAXDOP',
-            'MAXERRORS',
-            'MAXLENGTH',
-            'MAXRECURSION',
-            'MAXSIZE',
-            'MAXTRANSFERSIZE',
-            'MAXVALUE',
-            'MB',
-            'MEDIADESCRIPTION',
-            'MEDIANAME',
-            'MEDIAPASSWORD',
-            'MEDIUM',
-            'MEMBER',
-            'MEMORY_OPTIMIZED',
-            'MEMORY_OPTIMIZED_DATA',
-            'MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT',
-            'MEMORY_PARTITION_MODE',
-            'MERGE',
-            'MESSAGE',
-            'MESSAGE_FORWARD_SIZE',
-            'MESSAGE_FORWARDING',
-            'MICROSECOND',
-            'MILLISECOND',
-            'MIN_CPU_PERCENT',
-            'MIN_IOPS_PER_VOLUME',
-            'MIN_MEMORY_PERCENT',
-            'MINUTE',
-            'MINUTES',
-            'MINVALUE',
-            'MIRROR',
-            'MIRROR_ADDRESS',
-            'MODIFY',
-            'MONEY',
-            'MONTH',
-            'MOVE',
-            'MULTI_USER',
-            'MUST_CHANGE',
-            'NAME',
-            'NANOSECOND',
-            'NATIONAL',
-            'NATIVE_COMPILATION',
-            'NCHAR',
-            'NEGOTIATE',
-            'NESTED_TRIGGERS',
-            'NEW_ACCOUNT',
-            'NEW_BROKER',
-            'NEW_PASSWORD',
-            'NEWNAME',
-            'NEXT',
-            'NO',
-            'NO_BROWSETABLE',
-            'NO_CHECKSUM',
-            'NO_COMPRESSION',
-            'NO_EVENT_LOSS',
-            'NO_INFOMSGS',
-            'NO_TRUNCATE',
-            'NO_WAIT',
-            'NOCHECK',
-            'NOCOUNT',
-            'NOEXEC',
-            'NOEXPAND',
-            'NOFORMAT',
-            'NOINDEX',
-            'NOINIT',
-            'NOLOCK',
-            'NON',
-            'NON_TRANSACTED_ACCESS',
-            'NONCLUSTERED',
-            'NONE',
-            'NORECOMPUTE',
-            'NORECOVERY',
-            'NORESEED',
-            'NORESET',
-            'NOREWIND',
-            'NORMAL',
-            'NOSKIP',
-            'NOTIFICATION',
-            'NOTRUNCATE',
-            'NOUNLOAD',
-            'NOWAIT',
-            'NTEXT',
-            'NTLM',
-            'NUMANODE',
-            'NUMERIC',
-            'NUMERIC_ROUNDABORT',
-            'NVARCHAR',
-            'OBJECT',
-            'OF',
-            'OFF',
-            'OFFLINE',
-            'OFFSET',
-            'OFFSETS',
-            'OLD_ACCOUNT',
-            'OLD_PASSWORD',
-            'ON',
-            'ON_FAILURE',
-            'ONLINE',
-            'ONLY',
-            'OPEN',
-            'OPEN_EXISTING',
-            'OPENTRAN',
-            'OPTIMISTIC',
-            'OPTIMIZE',
-            'OPTION',
-            'ORDER',
-            'OUT',
-            'OUTPUT',
-            'OUTPUTBUFFER',
-            'OVER',
-            'OVERRIDE',
-            'OWNER',
-            'OWNERSHIP',
-            'PAD_INDEX',
-            'PAGE',
-            'PAGE_VERIFY',
-            'PAGECOUNT',
-            'PAGLOCK',
-            'PARAMETERIZATION',
-            'PARSEONLY',
-            'PARTIAL',
-            'PARTITION',
-            'PARTITIONS',
-            'PARTNER',
-            'PASSWORD',
-            'PATH',
-            'PER_CPU',
-            'PER_NODE',
-            'PERCENT',
-            'PERMISSION_SET',
-            'PERSISTED',
-            'PHYSICAL_ONLY',
-            'PLAN',
-            'POISON_MESSAGE_HANDLING',
-            'POOL',
-            'POPULATION',
-            'PORT',
-            'PRECEDING',
-            'PRECISION',
-            'PRIMARY',
-            'PRIMARY_ROLE',
-            'PRINT',
-            'PRIOR',
-            'PRIORITY',
-            'PRIORITY_LEVEL',
-            'PRIVATE',
-            'PRIVILEGES',
-            'PROC',
-            'PROCCACHE',
-            'PROCEDURE',
-            'PROCEDURE_NAME',
-            'PROCESS',
-            'PROFILE',
-            'PROPERTY',
-            'PROPERTY_DESCRIPTION',
-            'PROPERTY_INT_ID',
-            'PROPERTY_SET_GUID',
-            'PROVIDER',
-            'PROVIDER_KEY_NAME',
-            'PUBLIC',
-            'PUT',
-            'QUARTER',
-            'QUERY',
-            'QUERY_GOVERNOR_COST_LIMIT',
-            'QUEUE',
-            'QUEUE_DELAY',
-            'QUOTED_IDENTIFIER',
-            'RAISERROR',
-            'RANGE',
-            'RAW',
-            'RC2',
-            'RC4',
-            'RC4_128',
-            'READ',
-            'READ_COMMITTED_SNAPSHOT',
-            'READ_ONLY',
-            'READ_ONLY_ROUTING_LIST',
-            'READ_ONLY_ROUTING_URL',
-            'READ_WRITE',
-            'READ_WRITE_FILEGROUPS',
-            'READCOMMITTED',
-            'READCOMMITTEDLOCK',
-            'READONLY',
-            'READPAST',
-            'READTEXT',
-            'READUNCOMMITTED',
-            'READWRITE',
-            'REAL',
-            'REBUILD',
-            'RECEIVE',
-            'RECOMPILE',
-            'RECONFIGURE',
-            'RECOVERY',
-            'RECURSIVE',
-            'RECURSIVE_TRIGGERS',
-            'REFERENCES',
-            'REGENERATE',
-            'RELATED_CONVERSATION',
-            'RELATED_CONVERSATION_GROUP',
-            'RELATIVE',
-            'REMOTE',
-            'REMOTE_PROC_TRANSACTIONS',
-            'REMOTE_SERVICE_NAME',
-            'REMOVE',
-            'REORGANIZE',
-            'REPAIR_ALLOW_DATA_LOSS',
-            'REPAIR_FAST',
-            'REPAIR_REBUILD',
-            'REPEATABLE',
-            'REPEATABLEREAD',
-            'REPLICA',
-            'REPLICATION',
-            'REQUEST_MAX_CPU_TIME_SEC',
-            'REQUEST_MAX_MEMORY_GRANT_PERCENT',
-            'REQUEST_MEMORY_GRANT_TIMEOUT_SEC',
-            'REQUIRED',
-            'RESAMPLE',
-            'RESEED',
-            'RESERVE_DISK_SPACE',
-            'RESET',
-            'RESOURCE',
-            'RESTART',
-            'RESTORE',
-            'RESTRICT',
-            'RESTRICTED_USER',
-            'RESULT',
-            'RESUME',
-            'RETAINDAYS',
-            'RETENTION',
-            'RETURN',
-            'RETURNS',
-            'REVERT',
-            'REVOKE',
-            'REWIND',
-            'REWINDONLY',
-            'ROBUST',
-            'ROLE',
-            'ROLLBACK',
-            'ROLLUP',
-            'ROOT',
-            'ROUTE',
-            'ROW',
-            'ROWCOUNT',
-            'ROWGUIDCOL',
-            'ROWLOCK',
-            'ROWS',
-            'ROWS_PER_BATCH',
-            'ROWTERMINATOR',
-            'ROWVERSION',
-            'RSA_1024',
-            'RSA_2048',
-            'RSA_512',
-            'RULE',
-            'SAFE',
-            'SAFETY',
-            'SAMPLE',
-            'SAVE',
-            'SCHEDULER',
-            'SCHEMA',
-            'SCHEMA_AND_DATA',
-            'SCHEMA_ONLY',
-            'SCHEMABINDING',
-            'SCHEME',
-            'SCROLL',
-            'SCROLL_LOCKS',
-            'SEARCH',
-            'SECOND',
-            'SECONDARY',
-            'SECONDARY_ONLY',
-            'SECONDARY_ROLE',
-            'SECONDS',
-            'SECRET',
-            'SECURITY_LOG',
-            'SECURITYAUDIT',
-            'SELECT',
-            'SELECTIVE',
-            'SELF',
-            'SEND',
-            'SENT',
-            'SEQUENCE',
-            'SERIALIZABLE',
-            'SERVER',
-            'SERVICE',
-            'SERVICE_BROKER',
-            'SERVICE_NAME',
-            'SESSION',
-            'SESSION_TIMEOUT',
-            'SET',
-            'SETS',
-            'SETUSER',
-            'SHOW_STATISTICS',
-            'SHOWCONTIG',
-            'SHOWPLAN',
-            'SHOWPLAN_ALL',
-            'SHOWPLAN_TEXT',
-            'SHOWPLAN_XML',
-            'SHRINKDATABASE',
-            'SHRINKFILE',
-            'SHUTDOWN',
-            'SID',
-            'SIGNATURE',
-            'SIMPLE',
-            'SINGLE_BLOB',
-            'SINGLE_CLOB',
-            'SINGLE_NCLOB',
-            'SINGLE_USER',
-            'SINGLETON',
-            'SIZE',
-            'SKIP',
-            'SMALLDATETIME',
-            'SMALLINT',
-            'SMALLMONEY',
-            'SNAPSHOT',
-            'SORT_IN_TEMPDB',
-            'SOURCE',
-            'SPARSE',
-            'SPATIAL',
-            'SPATIAL_WINDOW_MAX_CELLS',
-            'SPECIFICATION',
-            'SPLIT',
-            'SQL',
-            'SQL_VARIANT',
-            'SQLPERF',
-            'STANDBY',
-            'START',
-            'START_DATE',
-            'STARTED',
-            'STARTUP_STATE',
-            'STAT_HEADER',
-            'STATE',
-            'STATEMENT',
-            'STATIC',
-            'STATISTICAL_SEMANTICS',
-            'STATISTICS',
-            'STATISTICS_INCREMENTAL',
-            'STATISTICS_NORECOMPUTE',
-            'STATS',
-            'STATS_STREAM',
-            'STATUS',
-            'STATUSONLY',
-            'STOP',
-            'STOP_ON_ERROR',
-            'STOPAT',
-            'STOPATMARK',
-            'STOPBEFOREMARK',
-            'STOPLIST',
-            'STOPPED',
-            'SUBJECT',
-            'SUBSCRIPTION',
-            'SUPPORTED',
-            'SUSPEND',
-            'SWITCH',
-            'SYMMETRIC',
-            'SYNCHRONOUS_COMMIT',
-            'SYNONYM',
-            'SYSNAME',
-            'SYSTEM',
-            'TABLE',
-            'TABLERESULTS',
-            'TABLESAMPLE',
-            'TABLOCK',
-            'TABLOCKX',
-            'TAKE',
-            'TAPE',
-            'TARGET',
-            'TARGET_RECOVERY_TIME',
-            'TB',
-            'TCP',
-            'TEXT',
-            'TEXTIMAGE_ON',
-            'TEXTSIZE',
-            'THEN',
-            'THESAURUS',
-            'THROW',
-            'TIES',
-            'TIME',
-            'TIMEOUT',
-            'TIMER',
-            'TIMESTAMP',
-            'TINYINT',
-            'TO',
-            'TOP',
-            'TORN_PAGE_DETECTION',
-            'TRACEOFF',
-            'TRACEON',
-            'TRACESTATUS',
-            'TRACK_CAUSALITY',
-            'TRACK_COLUMNS_UPDATED',
-            'TRAN',
-            'TRANSACTION',
-            'TRANSFER',
-            'TRANSFORM_NOISE_WORDS',
-            'TRIGGER',
-            'TRIPLE_DES',
-            'TRIPLE_DES_3KEY',
-            'TRUE',
-            'TRUNCATE',
-            'TRUNCATEONLY',
-            'TRUSTWORTHY',
-            'TRY',
-            'TSQL',
-            'TWO_DIGIT_YEAR_CUTOFF',
-            'TYPE',
-            'TYPE_WARNING',
-            'UNBOUNDED',
-            'UNCHECKED',
-            'UNCOMMITTED',
-            'UNDEFINED',
-            'UNIQUE',
-            'UNIQUEIDENTIFIER',
-            'UNKNOWN',
-            'UNLIMITED',
-            'UNLOAD',
-            'UNSAFE',
-            'UPDATE',
-            'UPDATETEXT',
-            'UPDATEUSAGE',
-            'UPDLOCK',
-            'URL',
-            'USE',
-            'USED',
-            'USER',
-            'USEROPTIONS',
-            'USING',
-            'VALID_XML',
-            'VALIDATION',
-            'VALUE',
-            'VALUES',
-            'VARBINARY',
-            'VARCHAR',
-            'VARYING',
-            'VERIFYONLY',
-            'VERSION',
-            'VIEW',
-            'VIEW_METADATA',
-            'VIEWS',
-            'VISIBILITY',
-            'WAIT_AT_LOW_PRIORITY',
-            'WAITFOR',
-            'WEEK',
-            'WEIGHT',
-            'WELL_FORMED_XML',
-            'WHEN',
-            'WHERE',
-            'WHILE',
-            'WINDOWS',
-            'WITH',
-            'WITHIN',
-            'WITHOUT',
-            'WITNESS',
-            'WORK',
-            'WORKLOAD',
-            'WRITETEXT',
-            'XACT_ABORT',
-            'XLOCK',
-            'XMAX',
-            'XMIN',
-            'XML',
-            'XMLDATA',
-            'XMLNAMESPACES',
-            'XMLSCHEMA',
-            'XQUERY',
-            'XSINIL',
-            'YEAR',
-            'YMAX',
-            'YMIN'
-        ],
-        operators: [
-            // Logical
-            'ALL', 'AND', 'ANY', 'BETWEEN', 'EXISTS', 'IN', 'LIKE', 'NOT', 'OR', 'SOME',
-            // Set
-            'EXCEPT', 'INTERSECT', 'UNION',
-            // Join
-            'APPLY', 'CROSS', 'FULL', 'INNER', 'JOIN', 'LEFT', 'OUTER', 'RIGHT',
-            // Predicates
-            'CONTAINS', 'FREETEXT', 'IS', 'NULL',
-            // Pivoting
-            'PIVOT', 'UNPIVOT',
-            // Merging
-            'MATCHED'
-        ],
-        builtinFunctions: [
-            // Aggregate
-            'AVG', 'CHECKSUM_AGG', 'COUNT', 'COUNT_BIG', 'GROUPING', 'GROUPING_ID', 'MAX', 'MIN', 'SUM', 'STDEV', 'STDEVP', 'VAR', 'VARP',
-            // Analytic
-            'CUME_DIST', 'FIRST_VALUE', 'LAG', 'LAST_VALUE', 'LEAD', 'PERCENTILE_CONT', 'PERCENTILE_DISC', 'PERCENT_RANK',
-            // Collation
-            'COLLATE', 'COLLATIONPROPERTY', 'TERTIARY_WEIGHTS',
-            // Azure
-            'FEDERATION_FILTERING_VALUE',
-            // Conversion
-            'CAST', 'CONVERT', 'PARSE', 'TRY_CAST', 'TRY_CONVERT', 'TRY_PARSE',
-            // Cryptographic
-            'ASYMKEY_ID', 'ASYMKEYPROPERTY', 'CERTPROPERTY', 'CERT_ID', 'CRYPT_GEN_RANDOM',
-            'DECRYPTBYASYMKEY', 'DECRYPTBYCERT', 'DECRYPTBYKEY', 'DECRYPTBYKEYAUTOASYMKEY', 'DECRYPTBYKEYAUTOCERT', 'DECRYPTBYPASSPHRASE',
-            'ENCRYPTBYASYMKEY', 'ENCRYPTBYCERT', 'ENCRYPTBYKEY', 'ENCRYPTBYPASSPHRASE', 'HASHBYTES', 'IS_OBJECTSIGNED',
-            'KEY_GUID', 'KEY_ID', 'KEY_NAME', 'SIGNBYASYMKEY', 'SIGNBYCERT', 'SYMKEYPROPERTY', 'VERIFYSIGNEDBYCERT', 'VERIFYSIGNEDBYASYMKEY',
-            // Cursor
-            'CURSOR_STATUS',
-            // Datatype
-            'DATALENGTH', 'IDENT_CURRENT', 'IDENT_INCR', 'IDENT_SEED', 'IDENTITY', 'SQL_VARIANT_PROPERTY',
-            // Datetime
-            'CURRENT_TIMESTAMP', 'DATEADD', 'DATEDIFF', 'DATEFROMPARTS', 'DATENAME', 'DATEPART', 'DATETIME2FROMPARTS', 'DATETIMEFROMPARTS',
-            'DATETIMEOFFSETFROMPARTS', 'DAY', 'EOMONTH', 'GETDATE', 'GETUTCDATE', 'ISDATE', 'MONTH', 'SMALLDATETIMEFROMPARTS', 'SWITCHOFFSET',
-            'SYSDATETIME', 'SYSDATETIMEOFFSET', 'SYSUTCDATETIME', 'TIMEFROMPARTS', 'TODATETIMEOFFSET', 'YEAR',
-            // Logical
-            'CHOOSE', 'COALESCE', 'IIF', 'NULLIF',
-            // Mathematical
-            'ABS', 'ACOS', 'ASIN', 'ATAN', 'ATN2', 'CEILING', 'COS', 'COT', 'DEGREES', 'EXP', 'FLOOR', 'LOG', 'LOG10',
-            'PI', 'POWER', 'RADIANS', 'RAND', 'ROUND', 'SIGN', 'SIN', 'SQRT', 'SQUARE', 'TAN',
-            // Metadata
-            'APP_NAME', 'APPLOCK_MODE', 'APPLOCK_TEST', 'ASSEMBLYPROPERTY', 'COL_LENGTH', 'COL_NAME', 'COLUMNPROPERTY',
-            'DATABASE_PRINCIPAL_ID', 'DATABASEPROPERTYEX', 'DB_ID', 'DB_NAME', 'FILE_ID', 'FILE_IDEX', 'FILE_NAME', 'FILEGROUP_ID',
-            'FILEGROUP_NAME', 'FILEGROUPPROPERTY', 'FILEPROPERTY', 'FULLTEXTCATALOGPROPERTY', 'FULLTEXTSERVICEPROPERTY',
-            'INDEX_COL', 'INDEXKEY_PROPERTY', 'INDEXPROPERTY', 'OBJECT_DEFINITION', 'OBJECT_ID',
-            'OBJECT_NAME', 'OBJECT_SCHEMA_NAME', 'OBJECTPROPERTY', 'OBJECTPROPERTYEX', 'ORIGINAL_DB_NAME', 'PARSENAME',
-            'SCHEMA_ID', 'SCHEMA_NAME', 'SCOPE_IDENTITY', 'SERVERPROPERTY', 'STATS_DATE', 'TYPE_ID', 'TYPE_NAME', 'TYPEPROPERTY',
-            // Ranking
-            'DENSE_RANK', 'NTILE', 'RANK', 'ROW_NUMBER',
-            // Replication
-            'PUBLISHINGSERVERNAME',
-            // Rowset
-            'OPENDATASOURCE', 'OPENQUERY', 'OPENROWSET', 'OPENXML',
-            // Security
-            'CERTENCODED', 'CERTPRIVATEKEY', 'CURRENT_USER', 'HAS_DBACCESS', 'HAS_PERMS_BY_NAME', 'IS_MEMBER', 'IS_ROLEMEMBER', 'IS_SRVROLEMEMBER',
-            'LOGINPROPERTY', 'ORIGINAL_LOGIN', 'PERMISSIONS', 'PWDENCRYPT', 'PWDCOMPARE', 'SESSION_USER', 'SESSIONPROPERTY', 'SUSER_ID', 'SUSER_NAME',
-            'SUSER_SID', 'SUSER_SNAME', 'SYSTEM_USER', 'USER', 'USER_ID', 'USER_NAME',
-            // String
-            'ASCII', 'CHAR', 'CHARINDEX', 'CONCAT', 'DIFFERENCE', 'FORMAT', 'LEFT', 'LEN', 'LOWER', 'LTRIM', 'NCHAR', 'PATINDEX',
-            'QUOTENAME', 'REPLACE', 'REPLICATE', 'REVERSE', 'RIGHT', 'RTRIM', 'SOUNDEX', 'SPACE', 'STR', 'STUFF', 'SUBSTRING', 'UNICODE', 'UPPER',
-            // System
-            'BINARY_CHECKSUM', 'CHECKSUM', 'CONNECTIONPROPERTY', 'CONTEXT_INFO', 'CURRENT_REQUEST_ID', 'ERROR_LINE', 'ERROR_NUMBER', 'ERROR_MESSAGE',
-            'ERROR_PROCEDURE', 'ERROR_SEVERITY', 'ERROR_STATE', 'FORMATMESSAGE', 'GETANSINULL', 'GET_FILESTREAM_TRANSACTION_CONTEXT', 'HOST_ID',
-            'HOST_NAME', 'ISNULL', 'ISNUMERIC', 'MIN_ACTIVE_ROWVERSION', 'NEWID', 'NEWSEQUENTIALID', 'ROWCOUNT_BIG', 'XACT_STATE',
-            // TextImage
-            'TEXTPTR', 'TEXTVALID',
-            // Trigger
-            'COLUMNS_UPDATED', 'EVENTDATA', 'TRIGGER_NESTLEVEL', 'UPDATE',
-            // ChangeTracking
-            'CHANGETABLE', 'CHANGE_TRACKING_CONTEXT', 'CHANGE_TRACKING_CURRENT_VERSION', 'CHANGE_TRACKING_IS_COLUMN_IN_MASK', 'CHANGE_TRACKING_MIN_VALID_VERSION',
-            // FullTextSearch
-            'CONTAINSTABLE', 'FREETEXTTABLE',
-            // SemanticTextSearch
-            'SEMANTICKEYPHRASETABLE', 'SEMANTICSIMILARITYDETAILSTABLE', 'SEMANTICSIMILARITYTABLE',
-            // FileStream
-            'FILETABLEROOTPATH', 'GETFILENAMESPACEPATH', 'GETPATHLOCATOR', 'PATHNAME',
-            // ServiceBroker
-            'GET_TRANSMISSION_STATUS'
-        ],
-        builtinVariables: [
-            // Configuration
-            '@@DATEFIRST', '@@DBTS', '@@LANGID', '@@LANGUAGE', '@@LOCK_TIMEOUT', '@@MAX_CONNECTIONS', '@@MAX_PRECISION', '@@NESTLEVEL',
-            '@@OPTIONS', '@@REMSERVER', '@@SERVERNAME', '@@SERVICENAME', '@@SPID', '@@TEXTSIZE', '@@VERSION',
-            // Cursor
-            '@@CURSOR_ROWS', '@@FETCH_STATUS',
-            // Datetime
-            '@@DATEFIRST',
-            // Metadata
-            '@@PROCID',
-            // System
-            '@@ERROR', '@@IDENTITY', '@@ROWCOUNT', '@@TRANCOUNT',
-            // Stats
-            '@@CONNECTIONS', '@@CPU_BUSY', '@@IDLE', '@@IO_BUSY', '@@PACKET_ERRORS', '@@PACK_RECEIVED', '@@PACK_SENT',
-            '@@TIMETICKS', '@@TOTAL_ERRORS', '@@TOTAL_READ', '@@TOTAL_WRITE'
-        ],
-        pseudoColumns: [
-            '$ACTION', '$IDENTITY', '$ROWGUID', '$PARTITION'
-        ],
-        tokenizer: {
-            root: [
-                { include: '@comments' },
-                { include: '@whitespace' },
-                { include: '@pseudoColumns' },
-                { include: '@numbers' },
-                { include: '@strings' },
-                { include: '@complexIdentifiers' },
-                { include: '@scopes' },
-                [/[;,.]/, 'delimiter'],
-                [/[()]/, '@brackets'],
-                [/[\w@#$]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@operators': 'operator',
-                            '@builtinVariables': 'predefined',
-                            '@builtinFunctions': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                [/[<>=!%&+\-*/|~^]/, 'operator'],
-            ],
-            whitespace: [
-                [/\s+/, 'white']
-            ],
-            comments: [
-                [/--+.*/, 'comment'],
-                [/\/\*/, { token: 'comment.quote', next: '@comment' }]
-            ],
-            comment: [
-                [/[^*/]+/, 'comment'],
-                // Not supporting nested comments, as nested comments seem to not be standard?
-                // i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic
-                // [/\/\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(
-                [/\*\//, { token: 'comment.quote', next: '@pop' }],
-                [/./, 'comment']
-            ],
-            pseudoColumns: [
-                [/[$][A-Za-z_][\w@#$]*/, {
-                        cases: {
-                            '@pseudoColumns': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-            ],
-            numbers: [
-                [/0[xX][0-9a-fA-F]*/, 'number'],
-                [/[$][+-]*\d*(\.\d*)?/, 'number'],
-                [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, 'number']
-            ],
-            strings: [
-                [/N'/, { token: 'string', next: '@string' }],
-                [/'/, { token: 'string', next: '@string' }]
-            ],
-            string: [
-                [/[^']+/, 'string'],
-                [/''/, 'string'],
-                [/'/, { token: 'string', next: '@pop' }]
-            ],
-            complexIdentifiers: [
-                [/\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],
-                [/"/, { token: 'identifier.quote', next: '@quotedIdentifier' }]
-            ],
-            bracketedIdentifier: [
-                [/[^\]]+/, 'identifier'],
-                [/]]/, 'identifier'],
-                [/]/, { token: 'identifier.quote', next: '@pop' }]
-            ],
-            quotedIdentifier: [
-                [/[^"]+/, 'identifier'],
-                [/""/, 'identifier'],
-                [/"/, { token: 'identifier.quote', next: '@pop' }]
-            ],
-            scopes: [
-                [/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i, 'keyword'],
-                [/BEGIN\s+TRY\b/i, { token: 'keyword.try' }],
-                [/END\s+TRY\b/i, { token: 'keyword.try' }],
-                [/BEGIN\s+CATCH\b/i, { token: 'keyword.catch' }],
-                [/END\s+CATCH\b/i, { token: 'keyword.catch' }],
-                [/(BEGIN|CASE)\b/i, { token: 'keyword.block' }],
-                [/END\b/i, { token: 'keyword.block' }],
-                [/WHEN\b/i, { token: 'keyword.choice' }],
-                [/THEN\b/i, { token: 'keyword.choice' }]
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/st/st.contribution.js b/node_modules/monaco-languages/release/dev/st/st.contribution.js
deleted file mode 100644
index 1b37230..0000000
--- a/node_modules/monaco-languages/release/dev/st/st.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'st',
-        extensions: ['.st', '.iecst', '.iecplc', '.lc3lib'],
-        aliases: ['StructuredText', 'scl', 'stl'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./st'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/st/st.js b/node_modules/monaco-languages/release/dev/st/st.js
deleted file mode 100644
index e5b45ca..0000000
--- a/node_modules/monaco-languages/release/dev/st/st.js
+++ /dev/null
@@ -1,239 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['(*', '*)'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')'],
-            ['var', 'end_var'],
-            ['var_input', 'end_var'],
-            ['var_output', 'end_var'],
-            ['var_in_out', 'end_var'],
-            ['var_temp', 'end_var'],
-            ['var_global', 'end_var'],
-            ['var_access', 'end_var'],
-            ['var_external', 'end_var'],
-            ['type', 'end_type'],
-            ['struct', 'end_struct'],
-            ['program', 'end_program'],
-            ['function', 'end_function'],
-            ['function_block', 'end_function_block'],
-            ['action', 'end_action'],
-            ['step', 'end_step'],
-            ['initial_step', 'end_step'],
-            ['transaction', 'end_transaction'],
-            ['configuration', 'end_configuration'],
-            ['tcp', 'end_tcp'],
-            ['recource', 'end_recource'],
-            ['channel', 'end_channel'],
-            ['library', 'end_library'],
-            ['folder', 'end_folder'],
-            ['binaries', 'end_binaries'],
-            ['includes', 'end_includes'],
-            ['sources', 'end_sources']
-        ],
-        autoClosingPairs: [
-            { open: '[', close: ']' },
-            { open: '{', close: '}' },
-            { open: '(', close: ')' },
-            { open: '/*', close: '*/' },
-            { open: '\'', close: '\'', notIn: ['string_sq'] },
-            { open: '"', close: '"', notIn: ['string_dq'] },
-            { open: 'var', close: 'end_var' },
-            { open: 'var_input', close: 'end_var' },
-            { open: 'var_output', close: 'end_var' },
-            { open: 'var_in_out', close: 'end_var' },
-            { open: 'var_temp', close: 'end_var' },
-            { open: 'var_global', close: 'end_var' },
-            { open: 'var_access', close: 'end_var' },
-            { open: 'var_external', close: 'end_var' },
-            { open: 'type', close: 'end_type' },
-            { open: 'struct', close: 'end_struct' },
-            { open: 'program', close: 'end_program' },
-            { open: 'function', close: 'end_function' },
-            { open: 'function_block', close: 'end_function_block' },
-            { open: 'action', close: 'end_action' },
-            { open: 'step', close: 'end_step' },
-            { open: 'initial_step', close: 'end_step' },
-            { open: 'transaction', close: 'end_transaction' },
-            { open: 'configuration', close: 'end_configuration' },
-            { open: 'tcp', close: 'end_tcp' },
-            { open: 'recource', close: 'end_recource' },
-            { open: 'channel', close: 'end_channel' },
-            { open: 'library', close: 'end_library' },
-            { open: 'folder', close: 'end_folder' },
-            { open: 'binaries', close: 'end_binaries' },
-            { open: 'includes', close: 'end_includes' },
-            { open: 'sources', close: 'end_sources' }
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: 'var', close: 'end_var' },
-            { open: 'var_input', close: 'end_var' },
-            { open: 'var_output', close: 'end_var' },
-            { open: 'var_in_out', close: 'end_var' },
-            { open: 'var_temp', close: 'end_var' },
-            { open: 'var_global', close: 'end_var' },
-            { open: 'var_access', close: 'end_var' },
-            { open: 'var_external', close: 'end_var' },
-            { open: 'type', close: 'end_type' },
-            { open: 'struct', close: 'end_struct' },
-            { open: 'program', close: 'end_program' },
-            { open: 'function', close: 'end_function' },
-            { open: 'function_block', close: 'end_function_block' },
-            { open: 'action', close: 'end_action' },
-            { open: 'step', close: 'end_step' },
-            { open: 'initial_step', close: 'end_step' },
-            { open: 'transaction', close: 'end_transaction' },
-            { open: 'configuration', close: 'end_configuration' },
-            { open: 'tcp', close: 'end_tcp' },
-            { open: 'recource', close: 'end_recource' },
-            { open: 'channel', close: 'end_channel' },
-            { open: 'library', close: 'end_library' },
-            { open: 'folder', close: 'end_folder' },
-            { open: 'binaries', close: 'end_binaries' },
-            { open: 'includes', close: 'end_includes' },
-            { open: 'sources', close: 'end_sources' }
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#pragma\\s+region\\b"),
-                end: new RegExp("^\\s*#pragma\\s+endregion\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.st',
-        ignoreCase: true,
-        brackets: [
-            { token: 'delimiter.curly', open: '{', close: '}' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.square', open: '[', close: ']' }
-        ],
-        keywords: ['if', 'end_if', 'elsif', 'else', 'case', 'of', 'to',
-            'do', 'with', 'by', 'while', 'repeat', 'end_while', 'end_repeat', 'end_case',
-            'for', 'end_for', 'task', 'retain', 'non_retain', 'constant', 'with', 'at',
-            'exit', 'return', 'interval', 'priority', 'address', 'port', 'on_channel',
-            'then', 'iec', 'file', 'uses', 'version', 'packagetype', 'displayname',
-            'copyright', 'summary', 'vendor', 'common_source', 'from'],
-        constant: ['false', 'true', 'null'],
-        defineKeywords: [
-            'var', 'var_input', 'var_output', 'var_in_out', 'var_temp', 'var_global',
-            'var_access', 'var_external', 'end_var',
-            'type', 'end_type', 'struct', 'end_struct', 'program', 'end_program',
-            'function', 'end_function', 'function_block', 'end_function_block',
-            'configuration', 'end_configuration', 'tcp', 'end_tcp', 'recource',
-            'end_recource', 'channel', 'end_channel', 'library', 'end_library',
-            'folder', 'end_folder', 'binaries', 'end_binaries', 'includes',
-            'end_includes', 'sources', 'end_sources',
-            'action', 'end_action', 'step', 'initial_step', 'end_step', 'transaction', 'end_transaction'
-        ],
-        typeKeywords: ['int', 'sint', 'dint', 'lint', 'usint', 'uint', 'udint', 'ulint',
-            'real', 'lreal', 'time', 'date', 'time_of_day', 'date_and_time', 'string',
-            'bool', 'byte', 'world', 'dworld', 'array', 'pointer', 'lworld'],
-        operators: ['=', '>', '<', ':', ':=', '<=', '>=', '<>', '&', '+', '-', '*', '**',
-            'MOD', '^', 'or', 'and', 'not', 'xor', 'abs', 'acos', 'asin', 'atan', 'cos',
-            'exp', 'expt', 'ln', 'log', 'sin', 'sqrt', 'tan', 'sel', 'max', 'min', 'limit',
-            'mux', 'shl', 'shr', 'rol', 'ror', 'indexof', 'sizeof', 'adr', 'adrinst',
-            'bitadr', 'is_valid'],
-        builtinVariables: [],
-        builtinFunctions: ['sr', 'rs', 'tp', 'ton', 'tof', 'eq', 'ge', 'le', 'lt',
-            'ne', 'round', 'trunc', 'ctd', 'сtu', 'ctud', 'r_trig', 'f_trig',
-            'move', 'concat', 'delete', 'find', 'insert', 'left', 'len', 'replace',
-            'right', 'rtc'],
-        // we include these common regular expressions
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        // C# style strings
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                [/(\.\.)/, 'delimiter'],
-                [/\b(16#[0-9A-Fa-f\_]*)+\b/, 'number.hex'],
-                [/\b(2#[01\_]+)+\b/, 'number.binary'],
-                [/\b(8#[0-9\_]*)+\b/, 'number.octal'],
-                [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
-                [/\b(L?REAL)#[0-9\_\.e]+\b/, 'number.float'],
-                [/\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#[0-9\_]+\b/, 'number'],
-                [/\d+/, 'number'],
-                [/\b(T|DT|TOD)#[0-9:-_shmyd]+\b/, 'tag'],
-                [/\%(I|Q|M)(X|B|W|D|L)[0-9\.]+/, 'tag'],
-                [/\%(I|Q|M)[0-9\.]*/, 'tag'],
-                [/\b[A-Za-z]{1,6}#[0-9]+/, 'tag'],
-                [/\b(TO_|CTU_|CTD_|CTUD_|MUX_|SEL_)[A_Za-z]+\b/, 'predefined'],
-                [/\b[A_Za-z]+(_TO_)[A_Za-z]+\b/, 'predefined'],
-                [/[;]/, 'delimiter'],
-                [/[.]/, { token: 'delimiter', next: '@params' }],
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@operators': 'operators',
-                            '@keywords': 'keyword',
-                            '@typeKeywords': 'type',
-                            '@defineKeywords': 'variable',
-                            '@constant': 'constant',
-                            '@builtinVariables': 'predefined',
-                            '@builtinFunctions': 'predefined',
-                            '@default': 'identifier'
-                        }
-                    }],
-                { include: '@whitespace' },
-                [/[{}()\[\]]/, '@brackets'],
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, { token: 'string.quote', bracket: '@open', next: '@string_dq' }],
-                [/'/, { token: 'string.quote', bracket: '@open', next: '@string_sq' }],
-                [/'[^\\']'/, 'string'],
-                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
-                [/'/, 'string.invalid']
-            ],
-            params: [
-                [/\b[A-Za-z0-9_]+\b(?=\()/, { token: 'identifier', next: '@pop' }],
-                [/\b[A-Za-z0-9_]+\b/, 'variable.name', '@pop']
-            ],
-            comment: [
-                [/[^\/*]+/, 'comment'],
-                [/\/\*/, 'comment', '@push'],
-                ["\\*/", 'comment', '@pop'],
-                [/[\/*]/, 'comment']
-            ],
-            comment2: [
-                [/[^\(*]+/, 'comment'],
-                [/\(\*/, 'comment', '@push'],
-                ["\\*\\)", 'comment', '@pop'],
-                [/[\(*]/, 'comment']
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white'],
-                [/\/\/.*$/, 'comment'],
-                [/\/\*/, 'comment', '@comment'],
-                [/\(\*/, 'comment', '@comment2'],
-            ],
-            string_dq: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
-            ],
-            string_sq: [
-                [/[^\\']+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/swift/swift.contribution.js b/node_modules/monaco-languages/release/dev/swift/swift.contribution.js
deleted file mode 100644
index 0c134af..0000000
--- a/node_modules/monaco-languages/release/dev/swift/swift.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'swift',
-        aliases: ['Swift', 'swift'],
-        extensions: ['.swift'],
-        mimetypes: ['text/swift'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./swift'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/swift/swift.js b/node_modules/monaco-languages/release/dev/swift/swift.js
deleted file mode 100644
index 744fa00..0000000
--- a/node_modules/monaco-languages/release/dev/swift/swift.js
+++ /dev/null
@@ -1,151 +0,0 @@
-/*!---------------------------------------------------------------------------------------------
- *  Copyright (C) David Owens II, owensd.io. All rights reserved.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '//',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '`', close: '`' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            { open: '`', close: '`' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.swift',
-        // TODO(owensd): Support the full range of unicode valid identifiers.
-        identifier: /[a-zA-Z_][\w$]*/,
-        // TODO(owensd): Support the @availability macro properly.
-        attributes: [
-            '@autoclosure', '@noescape', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged',
-            '@objc', '@UIApplicationMain', '@noreturn', '@availability', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'
-        ],
-        accessmodifiers: ['public', 'private', 'internal'],
-        keywords: [
-            '__COLUMN__', '__FILE__', '__FUNCTION__', '__LINE__', 'as', 'as!', 'as?', 'associativity', 'break', 'case', 'catch',
-            'class', 'continue', 'convenience', 'default', 'deinit', 'didSet', 'do', 'dynamic', 'dynamicType',
-            'else', 'enum', 'extension', 'fallthrough', 'final', 'for', 'func', 'get', 'guard', 'if', 'import', 'in', 'infix',
-            'init', 'inout', 'internal', 'is', 'lazy', 'left', 'let', 'mutating', 'nil', 'none', 'nonmutating', 'operator',
-            'optional', 'override', 'postfix', 'precedence', 'prefix', 'private', 'protocol', 'Protocol', 'public',
-            'repeat', 'required', 'return', 'right', 'self', 'Self', 'set', 'static', 'struct', 'subscript', 'super', 'switch',
-            'throw', 'throws', 'try', 'try!', 'Type', 'typealias', 'unowned', 'var', 'weak', 'where', 'while', 'willSet', 'FALSE', 'TRUE'
-        ],
-        symbols: /[=(){}\[\].,:;@#\_&\-<>`?!+*\\\/]/,
-        // Moved . to operatorstart so it can be a delimiter
-        operatorstart: /[\/=\-+!*%<>&|^~?\u00A1-\u00A7\u00A9\u00AB\u00AC\u00AE\u00B0-\u00B1\u00B6\u00BB\u00BF\u00D7\u00F7\u2016-\u2017\u2020-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u23FF\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3030]/,
-        operatorend: /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE00-\uFE0F\uFE20-\uFE2F\uE0100-\uE01EF]/,
-        operators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,
-        // TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        tokenizer: {
-            root: [
-                { include: '@comment' },
-                { include: '@attribute' },
-                { include: '@literal' },
-                { include: '@keyword' },
-                { include: '@invokedmethod' },
-                { include: '@symbol' },
-            ],
-            symbol: [
-                [/[{}()\[\]]/, '@brackets'],
-                [/[<>](?!@symbols)/, '@brackets'],
-                [/[.]/, 'delimiter'],
-                [/@operators/, 'operator'],
-                [/@symbols/, 'operator']
-            ],
-            comment: [
-                [/\/\/\/.*$/, 'comment.doc'],
-                [/\/\*\*/, 'comment.doc', '@commentdocbody'],
-                [/\/\/.*$/, 'comment'],
-                [/\/\*/, 'comment', '@commentbody']
-            ],
-            commentdocbody: [
-                [/\/\*/, 'comment', '@commentbody'],
-                [/\*\//, 'comment.doc', '@pop'],
-                [/\:[a-zA-Z]+\:/, 'comment.doc.param'],
-                [/./, 'comment.doc']
-            ],
-            commentbody: [
-                [/\/\*/, 'comment', '@commentbody'],
-                [/\*\//, 'comment', '@pop'],
-                [/./, 'comment']
-            ],
-            attribute: [
-                [/\@@identifier/, {
-                        cases: {
-                            '@attributes': 'keyword.control',
-                            '@default': ''
-                        }
-                    }]
-            ],
-            literal: [
-                [/"/, { token: 'string.quote', next: '@stringlit' }],
-                [/0[b]([01]_?)+/, 'number.binary'],
-                [/0[o]([0-7]_?)+/, 'number.octal'],
-                [/0[x]([0-9a-fA-F]_?)+([pP][\-+](\d_?)+)?/, 'number.hex'],
-                [/(\d_?)*\.(\d_?)+([eE][\-+]?(\d_?)+)?/, 'number.float'],
-                [/(\d_?)+/, 'number']
-            ],
-            stringlit: [
-                [/\\\(/, { token: 'operator', next: '@interpolatedexpression' }],
-                [/@escapes/, 'string'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, { token: 'string.quote', next: '@pop' }],
-                [/./, 'string']
-            ],
-            interpolatedexpression: [
-                [/\(/, { token: 'operator', next: '@interpolatedexpression' }],
-                [/\)/, { token: 'operator', next: '@pop' }],
-                { include: '@literal' },
-                { include: '@keyword' },
-                { include: '@symbol' }
-            ],
-            keyword: [
-                [/`/, { token: 'operator', next: '@escapedkeyword' }],
-                [/@identifier/, {
-                        cases: {
-                            '@keywords': 'keyword', '[A-Z][\a-zA-Z0-9$]*': 'type.identifier',
-                            '@default': 'identifier'
-                        }
-                    }]
-            ],
-            escapedkeyword: [
-                [/`/, { token: 'operator', next: '@pop' }],
-                [/./, 'identifier']
-            ],
-            //		symbol: [
-            //			[ /@symbols/, 'operator' ],
-            //			[ /@operators/, 'operator' ]
-            //		],
-            invokedmethod: [
-                [/([.])(@identifier)/, {
-                        cases: {
-                            '$2': ['delimeter', 'type.identifier'],
-                            '@default': ''
-                        }
-                    }],
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/tcl/tcl.contribution.js b/node_modules/monaco-languages/release/dev/tcl/tcl.contribution.js
deleted file mode 100644
index 54dc462..0000000
--- a/node_modules/monaco-languages/release/dev/tcl/tcl.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'tcl',
-        extensions: ['.tcl'],
-        aliases: ['tcl', 'Tcl', 'tcltk', 'TclTk', 'tcl/tk', 'Tcl/Tk'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./tcl'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/tcl/tcl.js b/node_modules/monaco-languages/release/dev/tcl/tcl.js
deleted file mode 100644
index b2a1ce1..0000000
--- a/node_modules/monaco-languages/release/dev/tcl/tcl.js
+++ /dev/null
@@ -1,134 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ]
-    };
-    exports.language = {
-        tokenPostfix: '.tcl',
-        specialFunctions: [
-            'set', 'unset', 'rename', 'variable', 'proc', 'coroutine',
-            'foreach',
-            'incr', 'append',
-            'lappend', 'linsert', 'lreplace'
-        ],
-        mainFunctions: [
-            'if', 'then', 'elseif', 'else', 'case', 'switch', 'while', 'for',
-            'break', 'continue', 'return',
-            'package', 'namespace',
-            'catch', 'exit',
-            'eval', 'expr', 'uplevel', 'upvar'
-        ],
-        builtinFunctions: [
-            'file', 'info', 'concat', 'join', 'lindex',
-            'list', 'llength', 'lrange', 'lsearch', 'lsort', 'split',
-            'array', 'parray', 'binary', 'format', 'regexp', 'regsub', 'scan', 'string',
-            'subst', 'dict', 'cd', 'clock', 'exec', 'glob', 'pid', 'pwd', 'close', 'eof', 'fblocked',
-            'fconfigure', 'fcopy', 'fileevent', 'flush', 'gets', 'open', 'puts', 'read', 'seek',
-            'socket', 'tell', 'interp', 'after', 'auto_execok',
-            'auto_load', 'auto_mkindex', 'auto_reset', 'bgerror', 'error',
-            'global', 'history', 'load', 'source', 'time', 'trace',
-            'unknown', 'unset', 'update', 'vwait', 'winfo', 'wm', 'bind', 'event',
-            'pack', 'place', 'grid', 'font', 'bell', 'clipboard', 'destroy', 'focus', 'grab', 'lower',
-            'option', 'raise', 'selection', 'send', 'tk', 'tkwait', 'tk_bisque', 'tk_focusNext',
-            'tk_focusPrev', 'tk_focusFollowsMouse', 'tk_popup', 'tk_setPalette'
-        ],
-        symbols: /[=><!~?:&|+\-*\/\^%]+/,
-        brackets: [
-            { open: '(', close: ')', token: 'delimiter.parenthesis' },
-            { open: '{', close: '}', token: 'delimiter.curly' },
-            { open: '[', close: ']', token: 'delimiter.square' }
-        ],
-        escapes: /\\(?:[abfnrtv\\"'\[\]\{\};\$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        variables: /(?:\$+(?:(?:\:\:?)?[a-zA-Z_]\w*)+)/,
-        tokenizer: {
-            root: [
-                // identifiers and keywords
-                [/[a-zA-Z_]\w*/, { cases: {
-                            '@specialFunctions': { token: 'keyword.flow', next: '@specialFunc' },
-                            '@mainFunctions': 'keyword',
-                            '@builtinFunctions': 'variable',
-                            '@default': 'operator.scss'
-                        } }],
-                [/\s+\-+(?!\d|\.)\w*|{\*}/, 'metatag'],
-                // whitespace
-                { include: '@whitespace' },
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, 'operator'],
-                [/\$+(?:\:\:)?\{/, { token: 'identifier', next: '@nestedVariable' }],
-                [/@variables/, 'type.identifier'],
-                [/\.(?!\d|\.)[\w\-]*/, 'operator.sql'],
-                // numbers
-                [/\d+(\.\d+)?/, 'number'],
-                [/\d+/, 'number'],
-                // delimiter
-                [/;/, 'delimiter'],
-                // strings
-                [/"/, { token: 'string.quote', bracket: '@open', next: '@dstring' }],
-                [/'/, { token: 'string.quote', bracket: '@open', next: '@sstring' }]
-            ],
-            dstring: [
-                [/\[/, { token: '@brackets', next: '@nestedCall' }],
-                [/\$+(?:\:\:)?\{/, { token: 'identifier', next: '@nestedVariable' }],
-                [/@variables/, 'type.identifier'],
-                [/[^\\$\[\]"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],
-            ],
-            sstring: [
-                [/\[/, { token: '@brackets', next: '@nestedCall' }],
-                [/\$+(?:\:\:)?\{/, { token: 'identifier', next: '@nestedVariable' }],
-                [/@variables/, 'type.identifier'],
-                [/[^\\$\[\]']+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white'],
-                [/#.*\\$/, { token: 'comment', next: '@newlineComment' }],
-                [/#.*(?!\\)$/, 'comment']
-            ],
-            newlineComment: [
-                [/.*\\$/, 'comment'],
-                [/.*(?!\\)$/, { token: 'comment', next: '@pop' }]
-            ],
-            nestedVariable: [
-                [/[^\{\}\$]+/, 'type.identifier'],
-                [/\}/, { token: 'identifier', next: '@pop' }]
-            ],
-            nestedCall: [
-                [/\[/, { token: '@brackets', next: '@nestedCall' }],
-                [/\]/, { token: '@brackets', next: '@pop' }],
-                { include: 'root' }
-            ],
-            specialFunc: [
-                [/"/, { token: 'string', next: '@dstring' }],
-                [/'/, { token: 'string', next: '@sstring' }],
-                [/(?:(?:\:\:?)?[a-zA-Z_]\w*)+/, { token: 'type', next: '@pop' }],
-            ]
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/twig/twig.contribution.js b/node_modules/monaco-languages/release/dev/twig/twig.contribution.js
deleted file mode 100644
index d4d8ac6..0000000
--- a/node_modules/monaco-languages/release/dev/twig/twig.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'twig',
-        extensions: ['.twig'],
-        aliases: ['Twig', 'twig'],
-        mimetypes: ['text/x-twig'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./twig'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/twig/twig.js b/node_modules/monaco-languages/release/dev/twig/twig.js
deleted file mode 100644
index 7ae8333..0000000
--- a/node_modules/monaco-languages/release/dev/twig/twig.js
+++ /dev/null
@@ -1,276 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
-        comments: {
-            blockComment: ['{#', '#}'],
-        },
-        brackets: [
-            ['{#', '#}'],
-            ['{%', '%}'],
-            ['{{', '}}'],
-            ['(', ')'],
-            ['[', ']'],
-            // HTML
-            ['<!--', '-->'],
-            ['<', '>'],
-        ],
-        autoClosingPairs: [
-            { open: '{# ', close: ' #}' },
-            { open: '{% ', close: ' %}' },
-            { open: '{{ ', close: ' }}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-            // HTML
-            { open: '<', close: '>' },
-        ],
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '',
-        ignoreCase: true,
-        keywords: [
-            // (opening) tags
-            'apply', 'autoescape', 'block', 'deprecated', 'do', 'embed', 'extends',
-            'flush', 'for', 'from', 'if', 'import', 'include', 'macro', 'sandbox',
-            'set', 'use', 'verbatim', 'with',
-            // closing tags
-            'endapply', 'endautoescape', 'endblock', 'endembed', 'endfor', 'endif',
-            'endmacro', 'endsandbox', 'endset', 'endwith',
-            // literals
-            'true', 'false',
-        ],
-        tokenizer: {
-            root: [
-                // whitespace
-                [/\s+/],
-                // Twig Tag Delimiters
-                [/{#/, 'comment.twig', '@commentState'],
-                [/{%[-~]?/, 'delimiter.twig', '@blockState'],
-                [/{{[-~]?/, 'delimiter.twig', '@variableState'],
-                // HTML
-                [/<!DOCTYPE/, 'metatag.html', '@doctype'],
-                [/<!--/, 'comment.html', '@comment'],
-                [/(<)((?:[\w\-]+:)?[\w\-]+)(\s*)(\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']],
-                [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],
-                [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],
-                [/(<)((?:[\w\-]+:)?[\w\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/(<\/)((?:[\w\-]+:)?[\w\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],
-                [/</, 'delimiter.html'],
-                [/[^<]+/],
-            ],
-            /**
-             * Comment Tag Handling
-             */
-            commentState: [
-                [/#}/, 'comment.twig', '@pop'],
-                [/./, 'comment.twig'],
-            ],
-            /**
-             * Block Tag Handling
-             */
-            blockState: [
-                [/[-~]?%}/, 'delimiter.twig', '@pop'],
-                // whitespace
-                [/\s+/],
-                // verbatim
-                // Unlike other blocks, verbatim ehas its own state
-                // transition to ensure we mark its contents as strings.
-                [/(verbatim)(\s*)([-~]?%})/, [
-                        'keyword.twig',
-                        '',
-                        { token: 'delimiter.twig', next: '@rawDataState' },
-                    ]],
-                { include: 'expression' }
-            ],
-            rawDataState: [
-                // endverbatim
-                [/({%[-~]?)(\s*)(endverbatim)(\s*)([-~]?%})/, [
-                        'delimiter.twig',
-                        '',
-                        'keyword.twig',
-                        '',
-                        { token: 'delimiter.twig', next: '@popall' },
-                    ]],
-                [/./, 'string.twig'],
-            ],
-            /**
-             * Variable Tag Handling
-             */
-            variableState: [
-                [/[-~]?}}/, 'delimiter.twig', '@pop'],
-                { include: 'expression' },
-            ],
-            stringState: [
-                // closing double quoted string
-                [/"/, 'string.twig', '@pop'],
-                // interpolation start
-                [/#{\s*/, 'string.twig', '@interpolationState'],
-                // string part
-                [/[^#"\\]*(?:(?:\\.|#(?!\{))[^#"\\]*)*/, 'string.twig'],
-            ],
-            interpolationState: [
-                // interpolation end
-                [/}/, 'string.twig', '@pop'],
-                { include: 'expression' },
-            ],
-            /**
-             * Expression Handling
-             */
-            expression: [
-                // whitespace
-                [/\s+/],
-                // operators - math
-                [/\+|-|\/{1,2}|%|\*{1,2}/, 'operators.twig'],
-                // operators - logic
-                [/(and|or|not|b-and|b-xor|b-or)(\s+)/, ['operators.twig', '']],
-                // operators - comparison (symbols)
-                [/==|!=|<|>|>=|<=/, 'operators.twig'],
-                // operators - comparison (words)
-                [/(starts with|ends with|matches)(\s+)/, ['operators.twig', '']],
-                // operators - containment
-                [/(in)(\s+)/, ['operators.twig', '']],
-                // operators - test
-                [/(is)(\s+)/, ['operators.twig', '']],
-                // operators - misc
-                [/\||~|:|\.{1,2}|\?{1,2}/, 'operators.twig'],
-                // names
-                [/[^\W\d][\w]*/, {
-                        cases: {
-                            '@keywords': 'keyword.twig',
-                            '@default': 'variable.twig'
-                        }
-                    }],
-                // numbers
-                [/\d+(\.\d+)?/, 'number.twig'],
-                // punctuation
-                [/\(|\)|\[|\]|{|}|,/, 'delimiter.twig'],
-                // strings
-                [/"([^#"\\]*(?:\\.[^#"\\]*)*)"|\'([^\'\\]*(?:\\.[^\'\\]*)*)\'/, 'string.twig'],
-                // opening double quoted string
-                [/"/, 'string.twig', '@stringState'],
-                // misc syntactic constructs
-                // These are not operators per se, but for the purposes of lexical analysis we
-                // can treat them as such.
-                // arrow functions
-                [/=>/, 'operators.twig'],
-                // assignment
-                [/=/, 'operators.twig'],
-            ],
-            /**
-             * HTML
-             */
-            doctype: [
-                [/[^>]+/, 'metatag.content.html'],
-                [/>/, 'metatag.html', '@pop'],
-            ],
-            comment: [
-                [/-->/, 'comment.html', '@pop'],
-                [/[^-]+/, 'comment.content.html'],
-                [/./, 'comment.content.html']
-            ],
-            otherTag: [
-                [/\/?>/, 'delimiter.html', '@pop'],
-                [/"([^"]*)"/, 'attribute.value.html'],
-                [/'([^']*)'/, 'attribute.value.html'],
-                [/[\w\-]+/, 'attribute.name.html'],
-                [/=/, 'delimiter.html'],
-                [/[ \t\r\n]+/],
-            ],
-            // -- BEGIN <script> tags handling
-            // After <script
-            script: [
-                [/type/, 'attribute.name.html', '@scriptAfterType'],
-                [/"([^"]*)"/, 'attribute.value.html'],
-                [/'([^']*)'/, 'attribute.value.html'],
-                [/[\w\-]+/, 'attribute.name.html'],
-                [/=/, 'delimiter.html'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(script\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <script ... type
-            scriptAfterType: [
-                [/=/, 'delimiter.html', '@scriptAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type =
-            scriptAfterTypeEquals: [
-                [/"([^"]*)"/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <script ... type = $S2
-            scriptWithCustomType: [
-                [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value.html'],
-                [/'([^']*)'/, 'attribute.value.html'],
-                [/[\w\-]+/, 'attribute.name.html'],
-                [/=/, 'delimiter.html'],
-                [/[ \t\r\n]+/],
-                [/<\/script\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            scriptEmbedded: [
-                [/<\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
-                [/[^<]+/, '']
-            ],
-            // -- END <script> tags handling
-            // -- BEGIN <style> tags handling
-            // After <style
-            style: [
-                [/type/, 'attribute.name.html', '@styleAfterType'],
-                [/"([^"]*)"/, 'attribute.value.html'],
-                [/'([^']*)'/, 'attribute.value.html'],
-                [/[\w\-]+/, 'attribute.name.html'],
-                [/=/, 'delimiter.html'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/(<\/)(style\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]
-            ],
-            // After <style ... type
-            styleAfterType: [
-                [/=/, 'delimiter.html', '@styleAfterTypeEquals'],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type =
-            styleAfterTypeEquals: [
-                [/"([^"]*)"/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],
-                [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            // After <style ... type = $S2
-            styleWithCustomType: [
-                [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],
-                [/"([^"]*)"/, 'attribute.value.html'],
-                [/'([^']*)'/, 'attribute.value.html'],
-                [/[\w\-]+/, 'attribute.name.html'],
-                [/=/, 'delimiter.html'],
-                [/[ \t\r\n]+/],
-                [/<\/style\s*>/, { token: '@rematch', next: '@pop' }]
-            ],
-            styleEmbedded: [
-                [/<\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],
-                [/[^<]+/, '']
-            ],
-        }
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/vb/vb.contribution.js b/node_modules/monaco-languages/release/dev/vb/vb.contribution.js
deleted file mode 100644
index a45d275..0000000
--- a/node_modules/monaco-languages/release/dev/vb/vb.contribution.js
+++ /dev/null
@@ -1,14 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'vb',
-        extensions: ['.vb'],
-        aliases: ['Visual Basic', 'vb'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./vb'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/vb/vb.js b/node_modules/monaco-languages/release/dev/vb/vb.js
deleted file mode 100644
index 1ab242d..0000000
--- a/node_modules/monaco-languages/release/dev/vb/vb.js
+++ /dev/null
@@ -1,167 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '\'',
-            blockComment: ['/*', '*/'],
-        },
-        brackets: [
-            ['{', '}'], ['[', ']'], ['(', ')'], ['<', '>'],
-            ['addhandler', 'end addhandler'],
-            ['class', 'end class'],
-            ['enum', 'end enum'],
-            ['event', 'end event'],
-            ['function', 'end function'],
-            ['get', 'end get'],
-            ['if', 'end if'],
-            ['interface', 'end interface'],
-            ['module', 'end module'],
-            ['namespace', 'end namespace'],
-            ['operator', 'end operator'],
-            ['property', 'end property'],
-            ['raiseevent', 'end raiseevent'],
-            ['removehandler', 'end removehandler'],
-            ['select', 'end select'],
-            ['set', 'end set'],
-            ['structure', 'end structure'],
-            ['sub', 'end sub'],
-            ['synclock', 'end synclock'],
-            ['try', 'end try'],
-            ['while', 'end while'],
-            ['with', 'end with'],
-            ['using', 'end using'],
-            ['do', 'loop'],
-            ['for', 'next']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}', notIn: ['string', 'comment'] },
-            { open: '[', close: ']', notIn: ['string', 'comment'] },
-            { open: '(', close: ')', notIn: ['string', 'comment'] },
-            { open: '"', close: '"', notIn: ['string', 'comment'] },
-            { open: '<', close: '>', notIn: ['string', 'comment'] },
-        ],
-        folding: {
-            markers: {
-                start: new RegExp("^\\s*#Region\\b"),
-                end: new RegExp("^\\s*#End Region\\b")
-            }
-        }
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.vb',
-        ignoreCase: true,
-        brackets: [
-            { token: 'delimiter.bracket', open: '{', close: '}' },
-            { token: 'delimiter.array', open: '[', close: ']' },
-            { token: 'delimiter.parenthesis', open: '(', close: ')' },
-            { token: 'delimiter.angle', open: '<', close: '>' },
-            // Special bracket statement pairs
-            // according to https://msdn.microsoft.com/en-us/library/tsw2a11z.aspx
-            { token: 'keyword.tag-addhandler', open: 'addhandler', close: 'end addhandler' },
-            { token: 'keyword.tag-class', open: 'class', close: 'end class' },
-            { token: 'keyword.tag-enum', open: 'enum', close: 'end enum' },
-            { token: 'keyword.tag-event', open: 'event', close: 'end event' },
-            { token: 'keyword.tag-function', open: 'function', close: 'end function' },
-            { token: 'keyword.tag-get', open: 'get', close: 'end get' },
-            { token: 'keyword.tag-if', open: 'if', close: 'end if' },
-            { token: 'keyword.tag-interface', open: 'interface', close: 'end interface' },
-            { token: 'keyword.tag-module', open: 'module', close: 'end module' },
-            { token: 'keyword.tag-namespace', open: 'namespace', close: 'end namespace' },
-            { token: 'keyword.tag-operator', open: 'operator', close: 'end operator' },
-            { token: 'keyword.tag-property', open: 'property', close: 'end property' },
-            { token: 'keyword.tag-raiseevent', open: 'raiseevent', close: 'end raiseevent' },
-            { token: 'keyword.tag-removehandler', open: 'removehandler', close: 'end removehandler' },
-            { token: 'keyword.tag-select', open: 'select', close: 'end select' },
-            { token: 'keyword.tag-set', open: 'set', close: 'end set' },
-            { token: 'keyword.tag-structure', open: 'structure', close: 'end structure' },
-            { token: 'keyword.tag-sub', open: 'sub', close: 'end sub' },
-            { token: 'keyword.tag-synclock', open: 'synclock', close: 'end synclock' },
-            { token: 'keyword.tag-try', open: 'try', close: 'end try' },
-            { token: 'keyword.tag-while', open: 'while', close: 'end while' },
-            { token: 'keyword.tag-with', open: 'with', close: 'end with' },
-            // Other pairs
-            { token: 'keyword.tag-using', open: 'using', close: 'end using' },
-            { token: 'keyword.tag-do', open: 'do', close: 'loop' },
-            { token: 'keyword.tag-for', open: 'for', close: 'next' }
-        ],
-        keywords: [
-            'AddHandler', 'AddressOf', 'Alias', 'And', 'AndAlso', 'As', 'Async', 'Boolean', 'ByRef', 'Byte', 'ByVal', 'Call',
-            'Case', 'Catch', 'CBool', 'CByte', 'CChar', 'CDate', 'CDbl', 'CDec', 'Char', 'CInt', 'Class', 'CLng',
-            'CObj', 'Const', 'Continue', 'CSByte', 'CShort', 'CSng', 'CStr', 'CType', 'CUInt', 'CULng', 'CUShort',
-            'Date', 'Decimal', 'Declare', 'Default', 'Delegate', 'Dim', 'DirectCast', 'Do', 'Double', 'Each', 'Else',
-            'ElseIf', 'End', 'EndIf', 'Enum', 'Erase', 'Error', 'Event', 'Exit', 'False', 'Finally', 'For', 'Friend',
-            'Function', 'Get', 'GetType', 'GetXMLNamespace', 'Global', 'GoSub', 'GoTo', 'Handles', 'If', 'Implements',
-            'Imports', 'In', 'Inherits', 'Integer', 'Interface', 'Is', 'IsNot', 'Let', 'Lib', 'Like', 'Long', 'Loop',
-            'Me', 'Mod', 'Module', 'MustInherit', 'MustOverride', 'MyBase', 'MyClass', 'NameOf', 'Namespace', 'Narrowing', 'New',
-            'Next', 'Not', 'Nothing', 'NotInheritable', 'NotOverridable', 'Object', 'Of', 'On', 'Operator', 'Option',
-            'Optional', 'Or', 'OrElse', 'Out', 'Overloads', 'Overridable', 'Overrides', 'ParamArray', 'Partial',
-            'Private', 'Property', 'Protected', 'Public', 'RaiseEvent', 'ReadOnly', 'ReDim', 'RemoveHandler', 'Resume',
-            'Return', 'SByte', 'Select', 'Set', 'Shadows', 'Shared', 'Short', 'Single', 'Static', 'Step', 'Stop',
-            'String', 'Structure', 'Sub', 'SyncLock', 'Then', 'Throw', 'To', 'True', 'Try', 'TryCast', 'TypeOf',
-            'UInteger', 'ULong', 'UShort', 'Using', 'Variant', 'Wend', 'When', 'While', 'Widening', 'With', 'WithEvents',
-            'WriteOnly', 'Xor'
-        ],
-        tagwords: [
-            'If', 'Sub', 'Select', 'Try', 'Class', 'Enum',
-            'Function', 'Get', 'Interface', 'Module', 'Namespace', 'Operator', 'Set', 'Structure', 'Using', 'While', 'With',
-            'Do', 'Loop', 'For', 'Next', 'Property', 'Continue', 'AddHandler', 'RemoveHandler', 'Event', 'RaiseEvent', 'SyncLock'
-        ],
-        // we include these common regular expressions
-        symbols: /[=><!~?;\.,:&|+\-*\/\^%]+/,
-        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
-        integersuffix: /U?[DI%L&S@]?/,
-        floatsuffix: /[R#F!]?/,
-        // The main tokenizer for our languages
-        tokenizer: {
-            root: [
-                // whitespace
-                { include: '@whitespace' },
-                // special ending tag-words
-                [/next(?!\w)/, { token: 'keyword.tag-for' }],
-                [/loop(?!\w)/, { token: 'keyword.tag-do' }],
-                // usual ending tags
-                [/end\s+(?!for|do)([a-zA-Z_]\w*)/, { token: 'keyword.tag-$1' }],
-                // identifiers, tagwords, and keywords
-                [/[a-zA-Z_]\w*/, {
-                        cases: {
-                            '@tagwords': { token: 'keyword.tag-$0' },
-                            '@keywords': { token: 'keyword.$0' },
-                            '@default': 'identifier'
-                        }
-                    }],
-                // Preprocessor directive
-                [/^\s*#\w+/, 'keyword'],
-                // numbers
-                [/\d*\d+e([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/\d*\.\d+(e[\-+]?\d+)?(@floatsuffix)/, 'number.float'],
-                [/&H[0-9a-f]+(@integersuffix)/, 'number.hex'],
-                [/&0[0-7]+(@integersuffix)/, 'number.octal'],
-                [/\d+(@integersuffix)/, 'number'],
-                // date literal
-                [/#.*#/, 'number'],
-                // delimiters and operators
-                [/[{}()\[\]]/, '@brackets'],
-                [/@symbols/, 'delimiter'],
-                // strings
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/"/, 'string', '@string'],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/(\'|REM(?!\w)).*$/, 'comment'],
-            ],
-            string: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"C?/, 'string', '@pop']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/xml/xml.contribution.js b/node_modules/monaco-languages/release/dev/xml/xml.contribution.js
deleted file mode 100644
index 187d208..0000000
--- a/node_modules/monaco-languages/release/dev/xml/xml.contribution.js
+++ /dev/null
@@ -1,16 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'xml',
-        extensions: ['.xml', '.dtd', '.ascx', '.csproj', '.config', '.wxi', '.wxl', '.wxs', '.xaml', '.svg', '.svgz', '.opf', '.xsl'],
-        firstLine: '(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)',
-        aliases: ['XML', 'xml'],
-        mimetypes: ['text/xml', 'application/xml', 'application/xaml+xml', 'application/xml-dtd'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./xml'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/xml/xml.js b/node_modules/monaco-languages/release/dev/xml/xml.js
deleted file mode 100644
index df351bd..0000000
--- a/node_modules/monaco-languages/release/dev/xml/xml.js
+++ /dev/null
@@ -1,92 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-define(["require", "exports"], function (require, exports) {
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            blockComment: ['<!--', '-->'],
-        },
-        brackets: [
-            ['<', '>']
-        ],
-        autoClosingPairs: [
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-            { open: '"', close: '"' },
-        ],
-        surroundingPairs: [
-            { open: '<', close: '>' },
-            { open: '\'', close: '\'' },
-            { open: '"', close: '"' },
-        ]
-    };
-    exports.language = {
-        defaultToken: '',
-        tokenPostfix: '.xml',
-        ignoreCase: true,
-        // Useful regular expressions
-        qualifiedName: /(?:[\w\.\-]+:)?[\w\.\-]+/,
-        tokenizer: {
-            root: [
-                [/[^<&]+/, ''],
-                { include: '@whitespace' },
-                // Standard opening tag
-                [/(<)(@qualifiedName)/, [
-                        { token: 'delimiter' },
-                        { token: 'tag', next: '@tag' }
-                    ]],
-                // Standard closing tag
-                [/(<\/)(@qualifiedName)(\s*)(>)/, [
-                        { token: 'delimiter' },
-                        { token: 'tag' },
-                        '',
-                        { token: 'delimiter' }
-                    ]],
-                // Meta tags - instruction
-                [/(<\?)(@qualifiedName)/, [
-                        { token: 'delimiter' },
-                        { token: 'metatag', next: '@tag' }
-                    ]],
-                // Meta tags - declaration
-                [/(<\!)(@qualifiedName)/, [
-                        { token: 'delimiter' },
-                        { token: 'metatag', next: '@tag' }
-                    ]],
-                // CDATA
-                [/<\!\[CDATA\[/, { token: 'delimiter.cdata', next: '@cdata' }],
-                [/&\w+;/, 'string.escape'],
-            ],
-            cdata: [
-                [/[^\]]+/, ''],
-                [/\]\]>/, { token: 'delimiter.cdata', next: '@pop' }],
-                [/\]/, '']
-            ],
-            tag: [
-                [/[ \t\r\n]+/, ''],
-                [/(@qualifiedName)(\s*=\s*)("[^"]*"|'[^']*')/, ['attribute.name', '', 'attribute.value']],
-                [/(@qualifiedName)(\s*=\s*)("[^">?\/]*|'[^'>?\/]*)(?=[\?\/]\>)/, ['attribute.name', '', 'attribute.value']],
-                [/(@qualifiedName)(\s*=\s*)("[^">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],
-                [/@qualifiedName/, 'attribute.name'],
-                [/\?>/, { token: 'delimiter', next: '@pop' }],
-                [/(\/)(>)/, [
-                        { token: 'tag' },
-                        { token: 'delimiter', next: '@pop' }
-                    ]],
-                [/>/, { token: 'delimiter', next: '@pop' }],
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, ''],
-                [/<!--/, { token: 'comment', next: '@comment' }]
-            ],
-            comment: [
-                [/[^<\-]+/, 'comment.content'],
-                [/-->/, { token: 'comment', next: '@pop' }],
-                [/<!--/, 'comment.content.invalid'],
-                [/[<\-]/, 'comment.content']
-            ],
-        },
-    };
-});
diff --git a/node_modules/monaco-languages/release/dev/yaml/yaml.contribution.js b/node_modules/monaco-languages/release/dev/yaml/yaml.contribution.js
deleted file mode 100644
index 2428df6..0000000
--- a/node_modules/monaco-languages/release/dev/yaml/yaml.contribution.js
+++ /dev/null
@@ -1,15 +0,0 @@
-define(["require", "exports", "../_.contribution"], function (require, exports, __contribution_1) {
-    /*---------------------------------------------------------------------------------------------
-     *  Copyright (c) Microsoft Corporation. All rights reserved.
-     *  Licensed under the MIT License. See License.txt in the project root for license information.
-     *--------------------------------------------------------------------------------------------*/
-    'use strict';
-    Object.defineProperty(exports, "__esModule", { value: true });
-    __contribution_1.registerLanguage({
-        id: 'yaml',
-        extensions: ['.yaml', '.yml'],
-        aliases: ['YAML', 'yaml', 'YML', 'yml'],
-        mimetypes: ['application/x-yaml'],
-        loader: function () { return new Promise(function (resolve_1, reject_1) { require(['./yaml'], resolve_1, reject_1); }); }
-    });
-});
diff --git a/node_modules/monaco-languages/release/dev/yaml/yaml.js b/node_modules/monaco-languages/release/dev/yaml/yaml.js
deleted file mode 100644
index 2237001..0000000
--- a/node_modules/monaco-languages/release/dev/yaml/yaml.js
+++ /dev/null
@@ -1,191 +0,0 @@
-define(["require", "exports"], function (require, exports) {
-    "use strict";
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.conf = {
-        comments: {
-            lineComment: '#'
-        },
-        brackets: [
-            ['{', '}'],
-            ['[', ']'],
-            ['(', ')']
-        ],
-        autoClosingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        surroundingPairs: [
-            { open: '{', close: '}' },
-            { open: '[', close: ']' },
-            { open: '(', close: ')' },
-            { open: '"', close: '"' },
-            { open: '\'', close: '\'' },
-        ],
-        folding: {
-            offSide: true
-        }
-    };
-    exports.language = {
-        tokenPostfix: '.yaml',
-        brackets: [
-            { token: 'delimiter.bracket', open: '{', close: '}' },
-            { token: 'delimiter.square', open: '[', close: ']' }
-        ],
-        keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],
-        numberInteger: /(?:0|[+-]?[0-9]+)/,
-        numberFloat: /(?:0|[+-]?[0-9]+)(?:\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,
-        numberOctal: /0o[0-7]+/,
-        numberHex: /0x[0-9a-fA-F]+/,
-        numberInfinity: /[+-]?\.(?:inf|Inf|INF)/,
-        numberNaN: /\.(?:nan|Nan|NAN)/,
-        numberDate: /\d{4}-\d\d-\d\d([Tt ]\d\d:\d\d:\d\d(\.\d+)?(( ?[+-]\d\d?(:\d\d)?)|Z)?)?/,
-        escapes: /\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,
-        tokenizer: {
-            root: [
-                { include: '@whitespace' },
-                { include: '@comment' },
-                // Directive
-                [/%[^ ]+.*$/, 'meta.directive'],
-                // Document Markers
-                [/---/, 'operators.directivesEnd'],
-                [/\.{3}/, 'operators.documentEnd'],
-                // Block Structure Indicators
-                [/[-?:](?= )/, 'operators'],
-                { include: '@anchor' },
-                { include: '@tagHandle' },
-                { include: '@flowCollections' },
-                { include: '@blockStyle' },
-                // Numbers
-                [/@numberInteger(?![ \t]*\S+)/, 'number'],
-                [/@numberFloat(?![ \t]*\S+)/, 'number.float'],
-                [/@numberOctal(?![ \t]*\S+)/, 'number.octal'],
-                [/@numberHex(?![ \t]*\S+)/, 'number.hex'],
-                [/@numberInfinity(?![ \t]*\S+)/, 'number.infinity'],
-                [/@numberNaN(?![ \t]*\S+)/, 'number.nan'],
-                [/@numberDate(?![ \t]*\S+)/, 'number.date'],
-                // Key:Value pair
-                [/(".*?"|'.*?'|.*?)([ \t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],
-                { include: '@flowScalars' },
-                // String nodes
-                [/.+$/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-            // Flow Collection: Flow Mapping
-            object: [
-                { include: '@whitespace' },
-                { include: '@comment' },
-                // Flow Mapping termination
-                [/\}/, '@brackets', '@pop'],
-                // Flow Mapping delimiter
-                [/,/, 'delimiter.comma'],
-                // Flow Mapping Key:Value delimiter
-                [/:(?= )/, 'operators'],
-                // Flow Mapping Key:Value key
-                [/(?:".*?"|'.*?'|[^,\{\[]+?)(?=: )/, 'type'],
-                // Start Flow Style
-                { include: '@flowCollections' },
-                { include: '@flowScalars' },
-                // Scalar Data types
-                { include: '@tagHandle' },
-                { include: '@anchor' },
-                { include: '@flowNumber' },
-                // Other value (keyword or string)
-                [/[^\},]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-            // Flow Collection: Flow Sequence
-            array: [
-                { include: '@whitespace' },
-                { include: '@comment' },
-                // Flow Sequence termination
-                [/\]/, '@brackets', '@pop'],
-                // Flow Sequence delimiter
-                [/,/, 'delimiter.comma'],
-                // Start Flow Style
-                { include: '@flowCollections' },
-                { include: '@flowScalars' },
-                // Scalar Data types
-                { include: '@tagHandle' },
-                { include: '@anchor' },
-                { include: '@flowNumber' },
-                // Other value (keyword or string)
-                [/[^\],]+/, {
-                        cases: {
-                            '@keywords': 'keyword',
-                            '@default': 'string'
-                        }
-                    }]
-            ],
-            // First line of a Block Style
-            multiString: [
-                [/^( +).+$/, 'string', '@multiStringContinued.$1']
-            ],
-            // Further lines of a Block Style
-            //   Workaround for indentation detection
-            multiStringContinued: [
-                [/^( *).+$/, {
-                        cases: {
-                            '$1==$S2': 'string',
-                            '@default': { token: '@rematch', next: '@popall' }
-                        }
-                    }]
-            ],
-            whitespace: [
-                [/[ \t\r\n]+/, 'white']
-            ],
-            // Only line comments
-            comment: [
-                [/#.*$/, 'comment']
-            ],
-            // Start Flow Collections
-            flowCollections: [
-                [/\[/, '@brackets', '@array'],
-                [/\{/, '@brackets', '@object']
-            ],
-            // Start Flow Scalars (quoted strings)
-            flowScalars: [
-                [/"([^"\\]|\\.)*$/, 'string.invalid'],
-                [/'([^'\\]|\\.)*$/, 'string.invalid'],
-                [/'[^']*'/, 'string'],
-                [/"/, 'string', '@doubleQuotedString']
-            ],
-            doubleQuotedString: [
-                [/[^\\"]+/, 'string'],
-                [/@escapes/, 'string.escape'],
-                [/\\./, 'string.escape.invalid'],
-                [/"/, 'string', '@pop']
-            ],
-            // Start Block Scalar
-            blockStyle: [
-                [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']
-            ],
-            // Numbers in Flow Collections (terminate with ,]})
-            flowNumber: [
-                [/@numberInteger(?=[ \t]*[,\]\}])/, 'number'],
-                [/@numberFloat(?=[ \t]*[,\]\}])/, 'number.float'],
-                [/@numberOctal(?=[ \t]*[,\]\}])/, 'number.octal'],
-                [/@numberHex(?=[ \t]*[,\]\}])/, 'number.hex'],
-                [/@numberInfinity(?=[ \t]*[,\]\}])/, 'number.infinity'],
-                [/@numberNaN(?=[ \t]*[,\]\}])/, 'number.nan'],
-                [/@numberDate(?=[ \t]*[,\]\}])/, 'number.date']
-            ],
-            tagHandle: [
-                [/\![^ ]*/, 'tag']
-            ],
-            anchor: [
-                [/[&*][^ ]+/, 'namespace']
-            ]
-        }
-    };
-});
